<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Niko Stotz: Eclipse DemoCamp Photon in Eindhoven on July 4: Platform, Sirius, Xtext, and more!</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=365</guid>
	<link>https://www.nikostotz.de/blog/eclipse-democamp-photon-in-eindhoven-on-july-4-platform-sirius-xtext-and-more/</link>
	<description>&lt;p&gt;
&lt;strong&gt;tl;dr:&lt;/strong&gt; Altran organizes the first Eclipse DemoCamp in Eindhoven to celebrate the Photon Release Train on July 4, 17:00 hrs. &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;Register today&lt;/a&gt; or propose your own talk! So far, we have Obeo talking about Sirus 6, our own Marc Hamilton summarizing lessons learned from 10 years worth of MDE projects, and itemis’ Karsten Thoms and Holger Schill reporting about the latest features of Eclipse Platform 4.8 and Xtext 2.14, respectively.
&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-368&quot; height=&quot;301&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/06/EclipseDemoCampPhoton.png&quot; style=&quot;border: none;&quot; width=&quot;707&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
After hosting the Sirius Day in April, we’re already looking at the next Eclipse event at &lt;a href=&quot;https://www.altran.com/nl/en/&quot;&gt;Altran Netherlands&lt;/a&gt;: We’ll host the first &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;Eclipse DemoCamp in Eindhoven&lt;/a&gt; to &lt;a href=&quot;https://wiki.eclipse.org/Category:Photon&quot;&gt;celebrate the Photon Release Train&lt;/a&gt; on July 4, 17:00 hrs.
&lt;/p&gt;
&lt;p&gt;
We’ll start off at 17:00 hrs with a small dinner, so we all can enjoy the talks without starving. Afterwards, we have a very exiting list of speakers:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A yet-to-be-decided member of &lt;a href=&quot;https://www.obeo.fr/en/&quot;&gt;Obeo&lt;/a&gt; will tell us about &lt;b&gt;What’s new in Sirius 6&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;Major Changes in Sirius 6:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sirius now supports an optional integration with &lt;a href=&quot;http://www.eclipse.org/elk&quot;&gt;ELK&lt;/a&gt; for improved diagram layouts: specifiers can configure which ELK algorithm and parameters should be used for each of their diagrams, directly inside the VSM (ticket &lt;a href=&quot;http://eclip.se/509070&quot;&gt;#509070&lt;/a&gt;). This is still considered experimental in 6.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new generic edge creation tool is now available on all Sirius diagrams. With it, end users no longer have to select a specific edge creation tool in the palette, but only to choose the source and target elements (ticket &lt;a href=&quot;http://eclip.se/528002&quot;&gt;#528002&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved compatibility with Xtext with an important bug fix (ticket &lt;a href=&quot;http://eclip.se/513407&quot;&gt;#513407&lt;/a&gt;). This is a first step towards a better integration with Xtext, more fixes and improvements will come during the year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is now possible for specifiers to configure the background color of each diagram. Like everything else in Sirius, the color can be dynamic and reflect the current state of the model. (ticket &lt;a href=&quot;http://eclip.se/525533&quot;&gt;#525533&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When developing a new modeler, it is now possible to reload the modeler’s definition (.odesign) from an Eclipse runtime if the definition has changed in the host that launched the runtime. This is similar to “hot code replace” in Java, but for VSMs, and avoids stopping/restarting a new runtime on each VSM change (ticket &lt;a href=&quot;http://eclip.se/522407&quot;&gt;#522407&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the VSM editor, when editing an interpreted expression which uses custom Java services, it is now possible to navigate directly to a service’s source code using F3 (ticket &lt;a href=&quot;http://eclip.se/471900&quot;&gt;#471900&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A more &lt;a href=&quot;https://blog.obeo.fr/what-is-coming-in-sirius-6-0&quot;&gt;visual overview&lt;/a&gt; can be found in the Obeo blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Altran’s own Marc Hamilton shares &lt;b&gt;Altran’s experience developing MDE applications with Eclipse technology&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
    Altran Netherlands develops Eclipse-based model-driven applications for its customers for several years.&lt;br /&gt;
    In this talk, we share our experience with different modeling technologies like &lt;a href=&quot;https://www.eclipse.org/acceleo/&quot;&gt;Acceleo&lt;/a&gt;, &lt;a href=&quot;https://wiki.eclipse.org/OCL&quot;&gt;OCL&lt;/a&gt;, &lt;a href=&quot;https://wiki.eclipse.org/QVTo&quot;&gt;QVTo&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/egf/&quot;&gt;EGF&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Sirius&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/Xtext/&quot;&gt;Xtext&lt;/a&gt;, and others.
    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;What’s new in Xtext 2.14&lt;/b&gt; will be presented by Xtext committer of &lt;a href=&quot;https://www.itemis.com/en/&quot;&gt;itemis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/holgerschill&quot;&gt;Holger Schill&lt;/a&gt;.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Major Changes in Xtext 2.14:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 9 and 10 Support&lt;/li&gt;
&lt;li&gt;JUnit 5 Support&lt;/li&gt;
&lt;li&gt;New Grammar Annotations&lt;/li&gt;
&lt;li&gt;Create Action Quickfix&lt;/li&gt;
&lt;li&gt;Code Mining Support&lt;/li&gt;
&lt;li&gt;New Project and File Wizard&lt;/li&gt;
&lt;li&gt;Improved Language Server Support&lt;/li&gt;
&lt;li&gt;Performance Improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please check the &lt;a class=&quot;external text&quot; href=&quot;https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2018/05/23/version-2-14-0&quot; rel=&quot;nofollow&quot;&gt;Release Notes&lt;/a&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yet another overview by &lt;a href=&quot;https://twitter.com/kthoms&quot;&gt;Karsten Thoms&lt;/a&gt;, of itemis with his talk &lt;b&gt;Approaching Light Speed – News from the Eclipse Photon Platform&lt;/b&gt;.     &lt;/p&gt;
&lt;p&gt;
The Eclipse Photon simultaneous release comes this year with a plethora of new features and improvements that will continue the Eclipse IDE keeping the #1 flexible, scalable and most performing IDE!
&lt;/p&gt;
&lt;p&gt;
This session will give a guided tour through the new features and changes in Eclipse Photon. Due to the vast amount of noteworthy stuff the focus of this talk is on the Eclipse Platform Project, covering JDT only roughly. You will see usability improvements, useful new API for platform developers and neat features for users. Besides visible changes, the platform project team has paid special attention on stability, performance and resource consumption tuning. In this talk, I will give some insights how the team has worked on that.
&lt;/p&gt;
&lt;p&gt;
       Come and see the incredible achievements the platform team and its growing number of contributors made to bring you the best Eclipse IDE ever!
     &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
More talks are in discussion. Please &lt;a href=&quot;mailto:niko.stotz@altran.com&quot;&gt;propose your talk&lt;/a&gt; to us; we’d be especially &lt;b&gt;happy to include more local speakers&lt;/b&gt; in the lineup.
&lt;/p&gt;
&lt;p&gt;
We’ll have a break and some get-together afterwards, so there is plenty of opportunity to get in touch with the speakers and your fellow Eclipse enthusiasts in the region.
&lt;/p&gt;
&lt;p&gt;
The DemoCamp will take place at the Altran office in Eindhoven. Please refer to the Eclipse wiki for &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;all details&lt;/a&gt; and &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;register now&lt;/a&gt; to secure your spot at the first Eclipse DemoCamp in Eindhoven!&lt;/p&gt;</description>
	<pubDate>Mon, 04 Jun 2018 13:52:15 +0000</pubDate>
        <enclosure url="https://www.nikostotz.de/blog/wp-content/uploads/2018/06/EclipseDemoCampPhoton.png" length="2854" type="image/png"/>
</item>
<item>
	<title>Nikhil Nanivadekar: Bag — The Counter</title>
	<guid isPermaLink="false">https://medium.com/p/2689e901aadb</guid>
	<link>https://medium.com/oracledevs/bag-the-counter-2689e901aadb?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/proxy/1*d1FllHC2H0SXv7CK-aV_iQ.png&quot; /&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;https://www.eclipse.org/collections/&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I have often times encountered the necessity to count the number of objects. I have experienced the necessity to count in two flavors, first is to count the number of objects which satisfy a certain criteria and second is to find the number of times a particular object is encountered. In this blog we are going to see how to solve the second problem: Find the number of times a particular object is encountered.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bag (or Multiset):&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Bag is a data structure which you use when you are counting objects by putting in a Map&amp;lt;K, Integer&amp;gt; . A Bag is similar to your shopping bag or grocery bag, wherein you can have one or more occurrences or a particular item in no particular order. So, a Bag is an order independent data structure like a Set, however it allows duplicates.&lt;/p&gt;&lt;p&gt;Let us consider a list of items and you want to count the number of each fruit you have in your list. You can simply group the items and count, JDK has Collectors which do that for you. The code looks like this:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*JFcsY5vECKHJzzxUS3heXA.png&quot; /&gt;Using a Map to count&lt;/figure&gt;&lt;p&gt;“Apple”, “Banana” and “Orange” have a valid count, however, “Grapes” which are not a part of the items the assertion has to be for a null. There by making this implementation not null safe.&lt;/p&gt;&lt;p&gt;Now let us solve the same problem by using an Eclipse Collections Bag in this case. Eclipse Collections has the toBag() API available which returns a Bag.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CqP7n7MbLSjRQRkS4gjwQw.png&quot; /&gt;Using a Bag to count&lt;/figure&gt;&lt;p&gt;Bag has occurrencesOf() API on it which returns the count. The occurrencesOf() API is null safe as can be seen by the assertion for “Grapes”.&lt;/p&gt;&lt;p&gt;In addition to the rich API available on &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html&quot;&gt;RichIterable&lt;/a&gt; , the Eclipse Collections &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; also has more specific and intuitive API like occurrencesOf(), addOccurrences(), topOccurrences(), bottomOccurrences() to name a few.&lt;/p&gt;&lt;p&gt;The Eclipse Collections Bag implementation is called HashBag. A HashBag is backed by an ObjectIntMap&amp;lt;K&amp;gt; from Eclipse Collections itself. The ObjectIntMap is an open address map which has Objects as a Key but the values are primitive ints. This implementation makes the Bag leaner.&lt;/p&gt;&lt;p&gt;Below are a few memory and performance comparisons between JDK 1.8 HashMap and Eclipse Collections 9.2.0 Bag&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Memory Footprint (lower number the better)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This shows the total memory footprint including the constituents of the data structures.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*SuPY8rcEPI7xfahQ4phQMA.png&quot; /&gt;Memory Comparison HashMap&amp;lt;Integer, Integer&amp;gt; vs Eclipse Collections HashBag&amp;lt;Integer&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*2dN20K5t283ieOgf4ja9mw.png&quot; /&gt;Memory Comparison HashMap&amp;lt;String, Integer&amp;gt; vs Eclipse Collections HashBag&amp;lt;String&amp;gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Performance Tests (higher number the better)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;All measurements reported in operations/s.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gjk05HQxUyx5Ft_91oCCiA.png&quot; /&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/493/1*wO1-XOa3W-mmux86fFTVDQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Source code for memory tests and performance tests is available on &lt;a href=&quot;https://github.com/nikhilnanivadekar/MemoryPerformanceTest&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Map&amp;lt;K, Integer&amp;gt; is considered for memory and performance tests instead of Map&amp;lt;K, Long&amp;gt; so that the comparisons are comparable since the Eclipse Collections Bag is backed by an ObjectIntMap&amp;lt;K&amp;gt;. I have verified that the memory footprint for Map&amp;lt;K, Integer&amp;gt; and Map&amp;lt;K, Long&amp;gt; for &lt;em&gt;these&lt;/em&gt; tests was same.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Eclipse Collections HashBag has ~40% smaller memory footprint compared to JDK HashMap.&lt;/li&gt;&lt;li&gt;JDK HashMap performs better for than Eclipse Collections HashBag for add() and look-up operations for sizes less than 40,000 elements.&lt;/li&gt;&lt;li&gt;JDK HashMap and Eclipse Collections HashBag have comparable performance for sizes greater than 40,000 elements.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag performs better than JDK HashMap when adding the same element 10 times.&lt;/li&gt;&lt;li&gt;JDK HashMap performs slightly better than Eclipse Collections HashBag for look-up operations.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag has API which is helpful for Bag (count) specific operations.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag is null safe for cases where a particular object does not exist in the Bag.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Show your support &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;&lt;em&gt;star us on GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Resources:&lt;/strong&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; comes with it’s own implementations of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/list/mutable/FastList.html&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/set/mutable/UnifiedSet.html&quot;&gt;Set&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/map/mutable/UnifiedMap.html&quot;&gt;Map&lt;/a&gt;. It also has additional data structures like &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; and an entire Primitive Collections hierarchy. Each of our collections have a rich API for commonly required iteration patterns.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Source code on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md#eclipse-collections-reference-guide&quot;&gt;Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=2689e901aadb&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/bag-the-counter-2689e901aadb&quot;&gt;Bag — The Counter&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Mon, 04 Jun 2018 13:15:03 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - A First Look at Jakarta EE</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/tAdqAu17Gdk/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/tAdqAu17Gdk/</link>
	<description>This month, read eight great pieces to get informed about various parts of Jakarta EE.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/tAdqAu17Gdk&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 04 Jun 2018 10:40:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x goes Native</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-goes-native</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-goes-native</link>
	<description>&lt;article&gt;&lt;p&gt;I this blog post I would like to give you a preview on native image generation of Vert.x applications using GraalVM.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt; it is possible to generate native executables.
These executables can be directly run without the need of an installed JVM.&lt;/p&gt;
&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The start up time is way faster. It is no longer required to wait for the start up of the JVM. The application is usually up and running in a matter of milliseconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduced memory footprint. I measured 40 MB memory usage (RSS) for the Vert.x Web application which I’m going to showcase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smaller Containers. No JVM means no overhead. All the needed parts are already contained within the executable. This can be very beneficial when building deployable container images.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;demo-project&quot;&gt;Demo Project&lt;/h2&gt;
&lt;p&gt;For the demo application I choose a very basic hello world &lt;a href=&quot;https://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web&lt;/a&gt; server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; de.jotschi.examples;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.Vertx;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.Logger;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.LoggerFactory;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.SLF4JLogDelegateFactory;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.web.Router;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Runner&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-comment&quot;&gt;// Use logback for logging&lt;/span&gt;
        File logbackFile = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;config&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;logback.xml&quot;&lt;/span&gt;);
        System.setProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;logback.configurationFile&quot;&lt;/span&gt;, logbackFile.getAbsolutePath());
        System.setProperty(LoggerFactory.LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory.class.getName());
        Logger log = LoggerFactory.getLogger(Runner.class);

        &lt;span class=&quot;hljs-comment&quot;&gt;// Setup the http server&lt;/span&gt;
        log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting server for: http://localhost:8080/hello&quot;&lt;/span&gt;);
        Vertx vertx = Vertx.vertx();
        Router router = Router.router(vertx);

        router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;).handler(rc -&amp;gt; {
            log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got hello request&quot;&lt;/span&gt;);
            rc.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;);
        });

        vertx.createHttpServer()
            .requestHandler(router::accept)
            .listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);

    }

}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;graalvm&quot;&gt;GraalVM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt;runs a static analysis on the generated application in order to find the reachable code.
This process which is run within the &lt;a href=&quot;https://github.com/oracle/graal/tree/master/substratevm&quot;&gt;Substrate VM&lt;/a&gt; will lead to the generation of the native image.&lt;/p&gt;
&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;
&lt;p&gt;Due to the nature of the static analysis Substrate VM also has some &lt;a href=&quot;https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md&quot;&gt;limitations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dynamic class loading and unloading for example is not supported because this would in essence alter the available code during runtime. &lt;/p&gt;
&lt;p&gt;Reflection is only partially supported and requires some manual steps which we will cover later on.&lt;/p&gt;
&lt;h3 id=&quot;patches-workarounds&quot;&gt;Patches / Workarounds&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Work in progress &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; Next we need to apply some patches / workarounds. Keep in mind that native image generation is a fairly new topic and the these workarounds will hopefully no longer be required once the Substrate VM and Netty have better support for each other.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I did not manage to get native epoll, kqueue and SSL integration to work with native images.
These parts are heavily optimized within Netty and use JNI to directly access the OS features.
Substrate VM supports JNI and could in theory integrate these native libraries. &lt;/p&gt;
&lt;p&gt;I created a &lt;a href=&quot;https://github.com/Jotschi/vertx-graalvm-native-image-test/tree/netty-native-epoll&quot;&gt;reproducer&lt;/a&gt;
 and an &lt;a href=&quot;https://github.com/oracle/graal/issues/442&quot;&gt;issue&lt;/a&gt; so hopefully these problems can be addressed soon.&lt;/p&gt;
&lt;h3 id=&quot;vert-x-transport&quot;&gt;Vert.x Transport&lt;/h3&gt;
&lt;p&gt;First I needed to patch the &lt;code&gt;io.vertx.core.net.impl.transport.Transport&lt;/code&gt; class in order to prevent the loading of EPoll and KQueue native support. Otherwise Substrate VM will try to load these classes and fail.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Transport&lt;/span&gt; &lt;/span&gt;{
…
  &lt;span class=&quot;hljs-javadoc&quot;&gt;/**
   * The native transport, it may be {@code null} or failed.
   */&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Transport &lt;span class=&quot;hljs-title&quot;&gt;nativeTransport&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// Patched: I remove the native transport discovery. &lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// The imports would be picked up by substrate &lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// and cause further issues. &lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
  }
…
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;netty-ssl&quot;&gt;Netty SSL&lt;/h3&gt;
&lt;p&gt;Native SSL support is another problematic area. I created a patched dummy &lt;code&gt;io.netty.handler.ssl.ReferenceCountedOpenSslEngine&lt;/code&gt; class in order to prevent Substrate VM from digging deeper into the SSL code of Netty.&lt;/p&gt;
&lt;p&gt;Next we need to set up the reflection configuration within &lt;code&gt;reflectconfigs/netty.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Netty uses reflection to instantiate the socket channels. This is done in the ReflectiveChannelFactory. We need to tell Substrate VM how classes of type NioServerSocketChannel  and NioSocketChannel can be instantiated. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[
  {
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;io.netty.channel.socket.nio.NioSocketChannel&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;methods&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[
      { &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;parameterTypes&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[] &lt;/span&gt;}
    ]
  &lt;/span&gt;},
  {
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;io.netty.channel.socket.nio.NioServerSocketChannel&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;methods&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[
      { &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;parameterTypes&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[] &lt;/span&gt;}
    ]
  &lt;/span&gt;}
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to learn more about the state of Netty and GraalVM I can recommend this &lt;a href=&quot;https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692&quot;&gt;GraalVM Blogpost&lt;/a&gt; by Codrut Stancu.&lt;/p&gt;
&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;
&lt;p&gt;Finally we can build our maven project to generate a shaded jar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need the GraalVM package. You can download it from the &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We use the shaded jar as the input source for the &lt;code&gt;native-image&lt;/code&gt; command which will generate the executable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$GRAALVMDIR&lt;/span&gt;/bin/native-image \
 --verbose \
 --no-server \
 -Dio.netty.noUnsafe=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  \
 -H:ReflectionConfigurationFiles=./reflectconfigs/netty.json \
 -H:+ReportUnsupportedElementsAtRuntime \
 -Dfile.encoding=UTF-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; \
 -jar target/vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT.jar&lt;/code&gt;&lt;/pre&gt; 

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;
&lt;p&gt;Finally we end up with an 27 MB &lt;code&gt;vertx-graalvm-native-image-test-0.0.1-SNAPSHOT&lt;/code&gt; executable which we can run.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ ldd vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT 
  linux-vdso.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007ffc65be8000)
  libdl.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e892f0000)
  libpthread.so.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e890d3000)
  libz.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libz.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88eb9000)
  librt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/librt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88cb1000)
  libcrypt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libcrypt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88a79000)
  libc.so.&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libc.so.&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e886da000)
  /lib64/ld-linux-x86-&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e8afb7000)&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;memory&quot;&gt;Memory&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;/usr/bin/time &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\nmaxRSS\t%MkB&quot;&lt;/span&gt; java -jar target/vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT.jar 
/usr/bin/time &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\nmaxRSS\t%MkB&quot;&lt;/span&gt; ./vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Native Image: 40 MB&lt;/li&gt;
&lt;li&gt;Java 10: 125 MB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full project can be found on &lt;a href=&quot;https://github.com/Jotschi/vertx-graalvm-native-image-test&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to read more on the topic I can also recommend &lt;a href=&quot;https://sites.google.com/a/athaydes.com/renato-athaydes/posts/a7mbnative-imagejavaappthatrunsin30msandusesonly4mbofram&quot;&gt;this article&lt;/a&gt; by Renato Athaydes in which he demonstrates how to create a very small light weight low memory application using GraalVM.&lt;/p&gt;
&lt;p&gt;Thanks for reading. If you have any further questions or feedback don’t hesitate to send me a tweet to &lt;a href=&quot;https://twitter.com/Jotschi/&quot;&gt;@Jotschi&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: Leaving the Eclipse Foundation</title>
	<guid isPermaLink="false">https://medium.com/p/12148d680894</guid>
	<link>https://medium.com/@roxanne.iot/leaving-the-eclipse-foundation-12148d680894?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;Yes. The rumours are true. I will star in the next Marvel film! Alright, alright. That’s a lie, but it is true that I am leaving my Marketing Specialist position at the Eclipse Foundation after nearly 6 years.&lt;/p&gt;&lt;h3&gt;The beginning&lt;/h3&gt;&lt;p&gt;To be honest, I don’t remember applying for the job. I got an email from someone named Ian Skerrett saying I had an interview. I was like… “What’s the Eclipse Foundation?”. I even had to Google what a “committer” was. To top it off, I got to the headquarters in Ottawa for my interview and the door said to go around the back, but I went the wrong way. I came to a dead end: face-to-face with a fence. I looked at the clock, 2 minutes left. I looked around. Screw it. I threw my high heels and resume over the fence, climbed then jumped over it barefoot in a dress. I got the job!&lt;/p&gt;&lt;p&gt;It has been quite the journey. I have met many great people along the way. I’ve connected with so many smart and talented professionals, I’ve made awesome friends — I even met my now partner Stefan Oehme at EclipseCon Europe. I created and edited the Eclipse Newsletter since 2013; it now has 250,000 subscribers! I helped launch the first EclipseCon France in 2013. In 2016, I moved from Canada to Germany and have been working from home ever since. Finally, I gave my &lt;a href=&quot;https://medium.com/@roxanne.iot/my-first-conference-tech-talk-f73d6625d8ec&quot;&gt;first talk&lt;/a&gt; and coded my first full website in 2017.&lt;/p&gt;&lt;p&gt;All that to say that working at the Eclipse Foundation has shaped who I am today. Roxanne Joncas would be a completely different human being without the influence of all of you.&lt;/p&gt;&lt;h3&gt;Say Goodbye in Person&lt;/h3&gt;&lt;p&gt;I will be at &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;EclipseCon France&lt;/a&gt; on June 13–14 in Toulouse. This will be my 14th and last EclipseCon. Wow. I can’t believe my first EclipseCon was in Boston in 2013. Get your ticket for Toulouse if you want to get one last high five from me!&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://www.eclipsecon.org/2013/&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/318/1*NtcT9OKWG__7YUc_0vVKhw.png&quot; /&gt;&lt;/a&gt;My first EclipseCon&lt;/figure&gt;&lt;h3&gt;Thank you&lt;/h3&gt;&lt;p&gt;I wanted to take the time to write how some of you have influenced me and how I will remember you. Here goes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Sven Efftinge: First community member I remember working with and meeting in person.&lt;/li&gt;&lt;li&gt;Mélanie Bats: Voice your opinion.&lt;/li&gt;&lt;li&gt;Alex Morel: Always be yourself.&lt;/li&gt;&lt;li&gt;Mickael Istria: Passion is important.&lt;/li&gt;&lt;li&gt;Kai Hudalla: Ask questions.&lt;/li&gt;&lt;li&gt;Cédric Brun: Slides/presentations can be fun.&lt;/li&gt;&lt;li&gt;Jonas Helming: Always answer your emails.&lt;/li&gt;&lt;li&gt;Alexandra Schladebeck: Test. Test. Test. + Voice losenges.&lt;/li&gt;&lt;li&gt;Sebastian Zarnekow: Being quiet 99% of the time makes your words more powerful. Silent, but deadly.&lt;/li&gt;&lt;li&gt;Alexander Schmitt: I can speak in public.&lt;/li&gt;&lt;li&gt;Stéphane Bégaudeau: Stranger to friends in 5 seconds.&lt;/li&gt;&lt;li&gt;Tracy Miranda: Work on what you love.&lt;/li&gt;&lt;li&gt;Martin Lippert: Always show up.&lt;/li&gt;&lt;li&gt;Shawn Pearce: Being a ‘’Bored’’ Member can be fun.&lt;/li&gt;&lt;li&gt;Emily Jiang: A smile goes a long way!&lt;/li&gt;&lt;li&gt;Linda Snyder and Carole Garner: Plan. Plan. Plan. Make it seamless for attendees and it’ll be fine, even if it isn’t.&lt;/li&gt;&lt;li&gt;Goulwen Le Fur: A hoodie can be worth more than you think.&lt;/li&gt;&lt;li&gt;Eike Stepper: Badge ribbons are important.&lt;/li&gt;&lt;li&gt;Loredana Chituc: Open your heart.&lt;/li&gt;&lt;li&gt;Chris Aniszczyk: Spelling is important.&lt;/li&gt;&lt;li&gt;Lorenzo Bettini: Italy has a thing for paperwork.&lt;/li&gt;&lt;li&gt;Ivar Grimstad: When in London, eat Indian Food.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*Note: I didn’t include everyone, because the list would be too long. If your name isn’t up there. It does not mean I don’t like you or won’t remember you!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/300/1*vrQBozVZ9z0V7ddwgVcPKw.gif&quot; /&gt;&lt;/figure&gt;&lt;h3&gt;What next?&lt;/h3&gt;&lt;p&gt;My last day at the Foundation will be mid-August (exact date TBD). Following my departure, I am planning a sweet 4-month break to let all my creative out and learn German at an expert level. I have no idea what 2019 will have in store for me, but I am excited to find out! Ideally, I become as cool as Kate McKinnon in Ghostbusters.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/250/1*fHHv11-Nj03Ye1_AFjJT9Q.gif&quot; /&gt;&lt;/figure&gt;&lt;h3&gt;Not really goodbye&lt;/h3&gt;&lt;p&gt;Obviously, we live on the digital frontier, so it’s not really a farewell. You can:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Follow my current project &lt;a href=&quot;https://www.normalyouare.com/&quot;&gt;Normal You Are&lt;/a&gt;. I will be giving it a lot of love during my break.&lt;/li&gt;&lt;li&gt;Tweet me on the Twitter &lt;a href=&quot;https://twitter.com/roxannejoncas&quot;&gt;@roxannejoncas&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Farewell, my friends. See you out there in the wild!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/400/1*X--125652vHL40VIFxr6Mg.gif&quot; /&gt;&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Psst: You can apply for my position &lt;/em&gt;&lt;a href=&quot;https://www.linkedin.com/jobs/view/688159040/&quot;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=12148d680894&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 31 May 2018 16:27:20 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.6.0.AM2 for Eclipse Photon.0.M7</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.6.0.am2-for-photon.0.m7.html</guid>
	<link>https://tools.jboss.org/blog/4.6.0.am2-for-photon.0.m7.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.6.0.AM2 (Developer Milestone 2) build for Eclipse Photon.0.M7.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/photon/4.6.0.AM2.html&quot;&gt;JBoss Tools 4.6.0 AM2&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.6.0.AM2.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;general&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#general&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;eclipse-photon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#eclipse-photon&quot;&gt;&lt;/a&gt;Eclipse Photon&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools is now targeting Eclipse Photon M7.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift&quot;&gt;&lt;/a&gt;OpenShift&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;enhanced-spring-boot-support-for-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#enhanced-spring-boot-support-for-server-adapter&quot;&gt;&lt;/a&gt;Enhanced Spring Boot support for server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Spring Boot runtime was already supported by the OpenShift server adapter. However, it has one major limitation: files and
      resources were synchronized between the local workstation and the remote pod(s) only for the main project. If your Spring Boot
      application had dependencies that were present in the local workspace, any change to a file or resource of one of these dependencies
      was not handled. This is not true anymore.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;camel-rest-dsl-from-wsdl-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#camel-rest-dsl-from-wsdl-wizard&quot;&gt;&lt;/a&gt;Camel Rest DSL from WSDL wizard&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is a new &lt;em&gt;&quot;Camel Rest DSL from WSDL&quot;&lt;/em&gt; wizard. This wizard wraps the &lt;a href=&quot;https://github.com/jboss-fuse/wsdl2rest&quot;&gt;wsdl2rest tool&lt;/a&gt; now included with the Fuse 7 distribution, which
      takes a WSDL file for a SOAP-based (JAX-WS) web service and generates a combination of CXF-generated code and a Camel REST DSL route to make it accessible using REST operations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To start, you need an existing Fuse Integration project in your workspace and access to the WSDL for the SOAP service. Then use
      &lt;em&gt;File→New→Other…​&lt;/em&gt; and select &lt;em&gt;Red Hat Fuse→Camel Rest DSL from WSDL&lt;/em&gt; wizard.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On the first page of the wizard, select your WSDL and the Fuse Integration project in which to generate the Java code and Camel configuration.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;SOAP to REST Wizard page 1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/wsdl2rest-wizard-page-one.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On the second page, you can customize the Java folder path for your generated classes, the folder for the generated Camel file, plus any customization for the SOAP service
      address and destination REST service address.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;SOAP to REST Wizard page 2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools//images/wsdl2rest-wizard-page-two.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Click &lt;em&gt;Finish&lt;/em&gt; and the new Camel configuration and associated Java code are generated in your project. The wizard determines whether your project is Blueprint,
      Spring, or Spring Boot based, and it creates the corresponding artifacts without requiring any additional input. When the wizard is finished, you can open your
      new Camel file in the Fuse Tooling Route Editor to view what it created.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling editor Rest Tab&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools//images/fuse-editor-rest-tab-no-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That brings us to another new functionality, the REST tab in the Fuse Tooling Route Editor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;camel-editor-rest-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#camel-editor-rest-tab&quot;&gt;&lt;/a&gt;Camel Editor REST tab&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Fuse Tooling Route Editor provides a new &lt;em&gt;REST&lt;/em&gt; tab. For this release, the contents of this tab is read-only and includes the following information:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Details for the REST Configuration element including the component (jetty, netty, servlet, etc.), the context path, the port, binding mode (JSON, XML, etc.), and host. There is only one REST Configuration element.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A list of REST elements that collect REST operations. A configuration can have more than one REST element. Each REST element has an associated property page that displays additional details such as the path and the data it consumes or produces.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling Rest Elements Properties View&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools//images/fuse-editor-rest-tab-rest-element-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;A list of REST operations for the selected REST element. Each of the operations has an associated property page that provides details such as the URI and output type.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling Rest Operations Properties View&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools//images/fuse-editor-rest-tab-rest-operation-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For this release, the REST tab is read-only. If you want to edit the REST DSL, use the Route Editor Source tab. When you make changes and save them in the Source tab, the
      REST tab refreshes to show your updates.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 30 May 2018 17:33:01 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus Coding Day 2018</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1099</guid>
	<link>https://papyrusuml.wordpress.com/2018/05/30/papyrus-coding-day-2018/</link>
	<description>&lt;p&gt;In previous posts (&lt;a href=&quot;https://papyrusuml.wordpress.com/toolsmiths-tips-and-tricks/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://papyrusuml.wordpress.com/2018/03/15/some-love-for-toolsmiths/&quot;&gt;here&lt;/a&gt;), I mentioned the increased focus on Papyrus Toolsmiths.&lt;/p&gt;
&lt;p&gt;In this context, the Papyrus development team is putting together a “Papyrus coding day” just before &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;EclipseCon France&lt;/a&gt;.&lt;br /&gt;
During this free coding day, they will provide you with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hands-on sessions to get an insight on Papyrus SDK capabilities&lt;/li&gt;
&lt;li&gt;Discussions with the Papyrus development team&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Registration is mandatory as there is a limit on the number of attendees is limited.&lt;/p&gt;
&lt;p&gt;And rejoice in that attendance is free (and includes coffee and snacks)!&lt;/p&gt;
&lt;p&gt;There are, however, prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Knowledge of Java (at least intermediate level)&lt;/li&gt;
&lt;li&gt;EMF and UML experience is an plus!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So whether you are already invested in Papyrus, just curious, a toolsmith or a hacker, this may be of interest to you!&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://papyrusuml.wordpress.com/contact-us/&quot;&gt;contact me&lt;/a&gt; is this is of interest and I will put you in touch with the organizers!&lt;/p&gt;
&lt;h6&gt;(The information you provide will only be used to put you in touch with the organizer and then deleted)&lt;/h6&gt;</description>
	<pubDate>Wed, 30 May 2018 14:50:00 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: UnifiedSet — The Memory Saver</title>
	<guid isPermaLink="false">https://medium.com/p/25b830745959</guid>
	<link>https://medium.com/oracledevs/unifiedset-the-memory-saver-25b830745959?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*d1FllHC2H0SXv7CK-aV_iQ.png&quot; /&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;https://www.eclipse.org/collections/&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;In my previous blog I explained how Eclipse Collections &lt;a href=&quot;https://medium.com/oracledevs/unifiedmap-how-it-works-48af0b80cb37&quot;&gt;UnifiedMap works&lt;/a&gt;. In this blog, we will see how UnifiedSet in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; works.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Unified Set&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections/src/main/java/org/eclipse/collections/impl/set/mutable/UnifiedSet.java&quot;&gt;UnifiedSet&lt;/a&gt; is the Set implementation of Eclipse Collections and is implemented very differently than a JDK HashSet. UnifiedSet is based on principles similar to UnifiedMap.&lt;/p&gt;&lt;p&gt;A JDK java.util.HashSet is backed by a java.util.HashMap. The backing HashMap has a dummy value which is associated with an object in the backing Map: HashMap&amp;lt;E,Object&amp;gt; map ,Object &lt;strong&gt;&lt;em&gt;PRESENT &lt;/em&gt;&lt;/strong&gt;= new Object()&lt;br /&gt;This design leads to HashSet inheriting the behavior of the HashMap. A HashMap is backed by a table of Entry objects. The Entry implementation has hashcode, key, value, next as members, HashMap essentially caches the hashcode of keys. Moreover, due to the dummy value, HashSet ends up using more memory than required.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*8zvhbs6kYpwaiaXilgAk9Q.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;UnifiedSet, on the other hand is implemented as a Set i.e. it does not have any “dummy” empty value objects, it is not backed by table of Entry objects.&lt;br /&gt;UnifiedSet is backed by a flattened array. Each object occupies a slot in the backing array. The flattened array stores only the required objects there by creating a leaner implementation. Having objects in a flattened array, enhances the performance for iterations as well. Collisions in the main array are handled by putting a special object called ChainedBucket. The ChainedBucket is another array where the colliding elements are stored.&lt;/p&gt;&lt;p&gt;Look up patterns like contains in the UnifiedSet use a standard &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections/src/main/java/org/eclipse/collections/impl/set/mutable/UnifiedSet.java#L214&quot;&gt;hashcode index algorithm&lt;/a&gt; to find the location of the element. If the element at the index is &lt;em&gt;not &lt;/em&gt;a ChainedBucket then simply the existence of the element is examined. If the element at the index is a ChainedBucket then the backing array is evaluated linearly to find the required element.&lt;/p&gt;&lt;p&gt;Since UnifiedSet does not cache the hashcode, for each look up, hashcode needs to be computed. So, the performance of UnifiedSet is directly dependent on the hashcode implementation of the object in the UnifiedSet.&lt;/p&gt;&lt;p&gt;Below are a few memory and performance comparisons between JDK 1.8 HashSet and Eclipse Collections 9.2.0 UnifiedSet.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Memory Footprint (lower number the better)&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/868/1*RaeZSBkFJLxtRfUtQlk99Q.png&quot; /&gt;Memory Comparison HashSet&amp;lt;Integer&amp;gt; vs UnifiedSet&amp;lt;Integer&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/867/1*a0VLNvKWyegOTQNervYqTw.png&quot; /&gt;Memory Comparison HashSet&amp;lt;String&amp;gt; vs UnifiedSet&amp;lt;String&amp;gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Performance Tests (higher number the better)&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BehsghFNKuNuW8tQp1RfYw.png&quot; /&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*hdat9QVech7L_4M-bizY4w.png&quot; /&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/493/1*wO1-XOa3W-mmux86fFTVDQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Source code for memory tests and performance tests is available on &lt;a href=&quot;https://github.com/nikhilnanivadekar/MemoryPerformanceTest&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Eclipse Collections UnifiedSet has ~75% smaller memory footprint compared to JDK HashSet.&lt;/li&gt;&lt;li&gt;JDK HashSet performs slightly better than Eclipse Collections UnifiedSet for add() Operation.&lt;/li&gt;&lt;li&gt;Performance for JDK HashSet and Eclipse Collections UnifiedSet is similar for contains() Operation.&lt;/li&gt;&lt;li&gt;Eclipse Collections UnifiedSet performs better than JDK HashSet for forEach() Operation.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Resources:&lt;/strong&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; comes with it’s own implementations of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/list/mutable/FastList.html&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/set/mutable/UnifiedSet.html&quot;&gt;Set&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/map/mutable/UnifiedMap.html&quot;&gt;Map&lt;/a&gt;. It also has additional data structures like &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; and an entire Primitive Collections hierarchy. Each of our collections have a rich API for commonly required iteration patterns.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Source code on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md#eclipse-collections-reference-guide&quot;&gt;Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Show your support &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;&lt;em&gt;star us on GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=25b830745959&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/unifiedset-the-memory-saver-25b830745959&quot;&gt;UnifiedSet — The Memory Saver&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Tue, 29 May 2018 14:32:07 +0000</pubDate>
</item>
<item>
	<title>EclipseCon France 2018: Tracks: JakartaEE, MicroServices, Microprofiles and EE4J</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3909 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/tracks-jakartaee-microservices-microprofiles-and-ee4j</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;h4&gt;by Emily Jiang&lt;/h4&gt;

&lt;p&gt;Meet the communities, learn about the technologies and get the latest news around these important Java initiatives. This track offers some background information on MicroProfile and Jakarta EE, as well as best practices and practical tips on building your cloud-native microservices, how to scale them, and how to secure them.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/tracks-jakartaee-microservices-microprofiles-and-ee4j&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/Jakarta%20Microprofile.png?itok=obR6YvX8&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Fri, 25 May 2018 15:01:07 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Updates to our Privacy Policy</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/t7yT7k3a1Jc/updates-our-privacy-policy</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/t7yT7k3a1Jc/updates-our-privacy-policy</link>
	<description>The Eclipse Foundation has updated it's privacy policy for the protection of your personal data.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/t7yT7k3a1Jc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 25 May 2018 15:00:00 +0000</pubDate>
</item>
<item>
	<title>itemis: Using Eclipse Mita with YAKINDU Statechart Tools</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/using-eclipse-mita-with-yakindu-statechart-tools</guid>
	<link>https://blogs.itemis.com/en/using-eclipse-mita-with-yakindu-statechart-tools</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Using &lt;/span&gt;&lt;span&gt;YAKINDU Statechart Tools&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is an effective way to describe reactive, event-driven systems. As part of my master thesis I took YAKINDU Statechart Tools and implemented a custom code generator for the new programming language &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/projects/iot.mita&quot;&gt;&lt;span&gt;Eclipse Mita&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. In this blog post I want to show you how it works and how you can use it in your development.&lt;img alt=&quot;Eclipse-Mita-Logo&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Embedded/Eclipse-Mita-Logo.jpg?t=1527237710087&amp;amp;width=735&amp;amp;name=Eclipse-Mita-Logo.jpg&quot; style=&quot;width: 735px;&quot; width=&quot;735&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Mita domain in YAKINDU Statechart Tools&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In &lt;a href=&quot;https://github.com/Yakindu/statecharts&quot;&gt;YAKINDU Statechart Tools&lt;/a&gt; (YSCT), each statechart has its own domain. Depending on the domain it is possible to use different features. Currently, there are two different domains: A default domain and a C domain (Professional Edition) for the &lt;/span&gt;&lt;a href=&quot;https://blogs.itemis.com/en/using-c-code-in-statecharts-with-yakindu-statechart-tools-pro&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;deep C integration&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. In my thesis I’ve added a Mita domain, which allows you to import different platform packages and use the events, modalities and signals of each hardware component directly in the statechart model. But let’s start step by step.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Importing Mita packages&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As a first step, you can import a platform package in order to specify the desired target platform and get access to all signals and connectivities. In this example, I chose the Arduino platform as described in my previous blog post. To sum up, my Arduino platform consists of multiple LEDs and two buttons.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;br /&gt;&lt;img alt=&quot;Eclipse-Mita-YAKINDU-Statechart-Tools-DefSection&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/YAKINDU%20Statechart%20Tools/Eclipse-Mita-YAKINDU-Statechart-Tools-DefSection.png?t=1527237710087&amp;amp;width=168&amp;amp;name=Eclipse-Mita-YAKINDU-Statechart-Tools-DefSection.png&quot; style=&quot;width: 168px;&quot; width=&quot;168&quot; /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Additionally, it is possible to import further Mita application code. This is especially useful to extract the setup of your platform into own Mita files as well as defining utility functions that can be called from within the statechart:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package init;
import platforms.arduino;

setup led:LED {
    var red = light_up(color = Red);
    var yellow = light_up(color = Yellow);
    var orange = light_up(color = Orange);
}
&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;With this implementation a new instance of the LED will be created. The signals are connected to the variables and can now be used to control the single LEDs.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Creating YAKINDU Statechart Tools models with Mita&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now it’s time to create a statechart by using the imported platform. Here, I will use the Arduino platform as mentioned before.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;connectivity&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; LED defines a signal which can be accessed from within a state in order to turn the different LEDs on and off by writing a &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;true&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; or &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;false &lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;value. This can be done as an action, for example an entry action. Also, it’s possible to read the actual value of an LED. The result is, as expected, a boolean flag indicating whether the LED is turned on or not. This can be used in a guard, for example.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;sensor&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Button defines a modality &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;is_pressed&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which returns the actual value of the button state. Additionally, each Button instance defines two events, &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;pressed&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;released&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. And the great thing is: They are interpreted as native events in YAKINDU Statechart Tools, so they can directly be used on transitions. This is because under the hood Eclipse Mita is based on YSCT’s expression language and hence shares the same meta-model.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The following simple example statechart puts everything together:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;img alt=&quot;Eclipse-Mita-YAKINDU-Statechart-Tools&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/YAKINDU%20Statechart%20Tools/Eclipse-Mita-YAKINDU-Statechart-Tools.png?t=1527237710087&amp;amp;width=724&amp;amp;name=Eclipse-Mita-YAKINDU-Statechart-Tools.png&quot; style=&quot;width: 724px;&quot; width=&quot;724&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The statechart controls two LEDs – the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;orange&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;yellow&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; one. The orange LED will be turned off by pressing the button one and will be turned on after one second. As you can see, timers are fully supported by YSCT combined with Mita, without any additional implementation. The event &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;pressed&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is interpreted as an event in the model – no glue code or any APIs must be implemented. On the other side, in the second region, the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;yellow&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; LED is controlled by the status of the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;red&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; LED. Simplified, the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;yellow&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; LED will always have the opposite status of the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;red &lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;LED. This is realized by reading the value of the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;red&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; LED within a guard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Of course, this is not a very comprehensive or technically sophisticated example, but the complexity that can be achieved is an open field. All modeling components, which are delivered with YAKINDU Statechart Tools, can be used. For example: Orthogonal or composite states, history and deep history entries, multiple regions, choices and so on. And every hardware component, which is specified in the platform, can be used in the model, without spending time to implement any glue code or interfaces.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Generating Mita application code with YAKINDU Statechart Tools generators&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At last, but not least, it’s time to generate Mita code. Therefore, I implemented a new code generator – a Mita code generator. It generates an &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;application.mita&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; file, which represents the execution logic of the statechart’s model. The statechart cycles are triggered every milliseconds, so that the statechart will be executed continuously. Events are stored and handled automatically. Timers are, as mentioned before, completely integrated, so there is no need to implement timer interfaces. The generator model (.sgen) looks like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;GeneratorModel for yakindu::mita {

    statechart ArduinoYSCT {

   	 feature Outlet {
   		 targetProject = &quot;ArduinYSCT&quot;
   		 targetFolder = &quot;src-gen&quot;
   	 }
    }
}
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The generated Mita application code will generate C code on the fly. No execution is needed and it can get compiled and flashed directly on your target platform! This is illustrated on the following GIF:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;br /&gt;&lt;img alt=&quot;Eclipse-Mita-YAKINDU-Statechart-Tools&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/YAKINDU%20Statechart%20Tools/Eclipse-Mita-YAKINDU-Statechart-Tools.gif?t=1527237710087&amp;amp;width=724&amp;amp;name=Eclipse-Mita-YAKINDU-Statechart-Tools.gif&quot; style=&quot;width: 724px;&quot; width=&quot;724&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;The statechart can be edited. The Mita and C code will be generated automatically after saving the statechart model. Afterwards the C code can be compiled an flashed. That’s it!&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fusing-eclipse-mita-with-yakindu-statechart-tools&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 25 May 2018 09:22:27 +0000</pubDate>
	<author>robin.herrmann@itemis.de (Robin Herrmann)</author>
</item>
<item>
	<title>typefox.io: Theia  –  May 2018 Update</title>
	<guid isPermaLink="false">http://typefox.io/?p=14853</guid>
	<link>http://typefox.io/theia-may-2018-update</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth non-hundred-percent-height-scrolling&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 0px;&quot;&gt;
					&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
						&lt;div class=&quot;fusion-text&quot;&gt;&lt;p class=&quot;graf graf--p graf-after--h3&quot; id=&quot;f64f&quot;&gt;It has been a while since I last shared an update about Theia. A lot has happened since then.&lt;/p&gt;
&lt;h2 class=&quot;graf graf--h4 graf-after--p&quot; id=&quot;cc1f&quot;&gt;Eclipse Theia&lt;/h2&gt;
&lt;p class=&quot;graf graf--p graf-after--h4&quot; id=&quot;92d4&quot;&gt;That’s right, &lt;a href=&quot;https://theia-ide.org&quot;&gt;Theia&lt;/a&gt; is moving to the Eclipse Foundation. The project has already been &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://projects.eclipse.org/proposals/eclipse-theia&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;created&lt;/a&gt; and we are now in the process of getting approval from all the committers to relicense the code base. So far, Theia was licensed under Apache 2 but will now be relicensed to a dual license of &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://www.eclipse.org/legal/epl-2.0/&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;EPL2&lt;/a&gt; and a &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://projects.eclipse.org/license/secondary-gpl-2.0-cp&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;secondary GPL&lt;/a&gt;. The GPL bit is only interesting if you intend to use Theia in a GPL context, as EPL2 is not compatible. In most scenarios, especially for use in commercial products, the EPL2 license will apply.&lt;/p&gt;
&lt;h2 class=&quot;graf graf--h4 graf-after--p&quot; id=&quot;07d6&quot;&gt;Eclipse Che Uses Theia&lt;/h2&gt;
&lt;p class=&quot;graf graf--p graf-after--h4&quot; id=&quot;60b2&quot;&gt;Another great news for the community is that the &lt;a href=&quot;https://www.eclipse.org/che/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Che&lt;/a&gt; team has started to open up the Che workspace server to run Theia instead of the current GWT-based Che IDE. The plan is to completely switch over to Theia eventually. For that, we need to catch up and add some features that are available in today’s Che but not yet in Theia.&lt;/p&gt;
&lt;h2 class=&quot;graf graf--h4 graf-after--p&quot; id=&quot;01d6&quot;&gt;RedHat&lt;/h2&gt;
&lt;p class=&quot;graf graf--p graf-after--h4&quot; id=&quot;8a83&quot;&gt;Together with Ericsson and TypeFox, RedHat has started to actively contribute to Theia. Besides several smaller issues, the team has started working on a &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://github.com/theia-ide/theia/issues/1573&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;visual debugger&lt;/a&gt; supporting the Debug Adapter Protocol, as well as a plug-in system that allows running plug-ins in a sandboxed environment similar to how &lt;a href=&quot;https://code.visualstudio.com&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;VS Code&lt;/a&gt; does it.&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p&quot; id=&quot;4f19&quot;&gt;The new more restricted plug-in system will be optional and developed in addition to the existing extension model of Theia as they address two different use cases: Plug-ins are meant to be used for smaller and simple features, while with extensions you can build anything you want including fully white-labeled products.&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p&quot; id=&quot;62c6&quot;&gt;The plug-in API is designed with the current VS Code API in mind. The goal is to eventually fully support VS Code extensions through that.&lt;/p&gt;
&lt;h2 class=&quot;graf graf--h4 graf-after--p&quot; id=&quot;710c&quot;&gt;Lots Of New Features&lt;/h2&gt;
&lt;p class=&quot;graf graf--p graf-after--h4&quot; id=&quot;d4ae&quot;&gt;Finally, we have added many new features in the last four months. Without going into too much detail, here’s a list of the new &amp;amp; noteworthy things that have been done in 2018 so far:&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p&quot; id=&quot;b9cc&quot;&gt;The workbench shell has been rewritten and now supports drag &amp;amp; drop between all panels. We have added a bottom panel in addition to the side panels. For more details, read &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://typefox.io/flexible-window-layout-in-theia-ide&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Miro’s blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p&quot; id=&quot;0b71&quot;&gt;The Git integration now comes with commit staging, Git diff, and Git history. Git changes are signaled through annotations in the navigator as well as in editors.&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p&quot; id=&quot;ad17&quot;&gt;The navigator supports drag &amp;amp; drop, quick search and auto reveal with regards to the active editor. You can even upload files by simply dragging them from your desktop onto the file navigator. Furthermore, the navigator supports annotations. For instance, error markers and git changes are now shown in the navigator.&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p&quot; id=&quot;50b0&quot;&gt;The new search support allows searching for text occurrences in the workspace. Regular expression, glob patterns, and search &amp;amp; replace are supported, as well as some other options.&lt;/p&gt;
&lt;figure class=&quot;graf graf--figure graf-after--p&quot; id=&quot;57c8&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder is-locked&quot;&gt;
&lt;div class=&quot;aspectRatioPlaceholder-fill&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;progressiveMedia js-progressiveMedia graf-image is-canvasLoaded is-imageLoaded&quot;&gt;&lt;canvas class=&quot;progressiveMedia-canvas js-progressiveMedia-canvas&quot; height=&quot;50&quot; width=&quot;75&quot;&gt;&lt;/canvas&gt;&lt;img class=&quot;progressiveMedia-image js-progressiveMedia-image&quot; src=&quot;https://cdn-images-1.medium.com/max/1760/1*mTNFzyo4IHJMoxhOQfkZQA.png&quot; /&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/figure&gt;
&lt;p class=&quot;graf graf--p graf-after--figure&quot; id=&quot;6287&quot;&gt;There is much more like the &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://typefox.io/explore-the-call-hierarchy-in-theia&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;call hierarchy&lt;/a&gt; or the neat markdown support that are worth to check out.&lt;/p&gt;
&lt;h2 class=&quot;graf graf--h4 graf-after--p&quot; id=&quot;e450&quot;&gt;Summary&lt;/h2&gt;
&lt;p class=&quot;graf graf--p graf-after--h4&quot; id=&quot;d65a&quot;&gt;The strong support from different vendors and the move to Eclipse Foundation are a promising basis for the future of Theia. After one year of development, we are truly happy (and proud) to see our baby starting to fly.&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p&quot; id=&quot;43a3&quot;&gt;It is now ripe to be used as the foundation for new cloud and desktop IDE-like tools. If you want to learn how, you can either attend the &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://www.eclipsecon.org/france2018/schedule_item/workshop-building-cloud-and-desktop-ides-theia&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;tutorial on Theia&lt;/a&gt; during next month’s EclipseCon France, send me a &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;mailto:sven.efftinge@typefox.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;mail&lt;/a&gt;, or simply chime in on &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://github.com/theia-ide/theia&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; or our &lt;a class=&quot;markup--anchor markup--p-anchor&quot; href=&quot;https://gitter.im/theia-ide/theia&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Gitter channel&lt;/a&gt;.&lt;/p&gt;
&lt;p class=&quot;graf graf--p graf-after--p graf--trailing&quot; id=&quot;b3df&quot;&gt;P.S.: I was often asked whether I use Theia to develop Theia. I can finally say, yes. And I enjoy it. &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;

					&lt;/div&gt;
				&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 24 May 2018 12:38:22 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Jakarta EE Progress to Date</title>
	<guid isPermaLink="false">http://mmilinkov.wordpress.com/?p=1452</guid>
	<link>https://mmilinkov.wordpress.com/2018/05/24/jakarta-ee-progress-to-date/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last September &lt;/span&gt;&lt;a href=&quot;https://blogs.oracle.com/theaquarium/opening-up-ee-update&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Oracle announced&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, with the support of IBM and Red Hat, that Java EE was going to move to the Eclipse Foundation. Since then Fujitsu, Payara and Tomitribe have all joined the initiative with strategic-level commitments. The scale of this migration is huge, and if you’re interested in understanding the complexity of the undertaking, I highly recommend you read &lt;/span&gt;&lt;a href=&quot;https://mmilinkov.wordpress.com/2018/03/23/on-complexity-and-good-intentions/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;On Complexity and Good Intentions&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Roughly eight months later, let’s see how we are doing compared to the goals set out in Oracle’s original announcement.&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Relicense Oracle-led Java EE technologies, and related GlassFish technologies, to the Foundation. This would include RIs, TCKs, and associated project documentation.&lt;/span&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This has been the major accomplishment to date. The Eclipse Enterprise for Java (EE4J) top-level project has been created, and thirty-nine projects established. We don’t yet have all of the source code moved over, but you can follow the steady progress on the &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/ee4j/status.php&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;project status page&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. All of the projects are using the same license: Eclipse Public License 2.0 plus (Secondary) GNU General Public License, version 2 with the GNU Classpath Exception. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Demonstrate the ability to build a compatible implementation, using Foundation sources, that passes existing Java EE 8 TCKs.&lt;/span&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This is what the project community is working towards next, and it is going to be a Very Big Deal. Keep in mind that to accomplish this goal, we are going to have to complete the creation of 39 projects, get them building on eclipse.org infrastructure, run the Java EE 8 CTS on those builds, and then get all of the projects together to ship on the same day. There is an enormous amount of work and learning to be done before this release becomes a reality. &lt;/span&gt;&lt;br /&gt;
 &lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Define a branding strategy for the platform within the Foundation, including a new name for Java EE to be determined. We intend to enable use of existing javax package names and component specification names for existing JSRs to provide continuity.&lt;/span&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In the first quarter of 2018, the Eclipse Foundation worked with the community to establish a &lt;/span&gt;&lt;a href=&quot;https://mmilinkov.wordpress.com/2018/02/26/and-the-name-is/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;new name&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and a logo for the future of this technology. So &lt;/span&gt;&lt;a href=&quot;https://jakarta.ee/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Jakarta EE&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; was born, and we’re very excited about the new name and the logo. Folks who have been around the Java world for a long time will recognize the name “Jakarta,” as the Apache Software Foundation’s had a long-lived incubator under that name. With &lt;/span&gt;&lt;a href=&quot;https://www.tomitribe.com/blog/2018/02/java-ee-to-jakarta-ee/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;their kind permission&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; what was old is new again. We’re really excited about once again seeing Java innovation happening under the Jakarta banner.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;jakartaee_logo&quot; class=&quot;alignnone size-full wp-image-1453&quot; src=&quot;https://mmilinkov.files.wordpress.com/2018/05/jakartaee_logo.png?w=700&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Define a process by which existing specifications can evolve, and new specifications can be included in the platform.&lt;/span&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The first step in creating this process was to establish the &lt;/span&gt;&lt;a href=&quot;https://mmilinkov.wordpress.com/2018/02/05/introducing-the-ee-next-working-group/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Jakarta EE Working Group&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which will be the governing body for this community moving forward. This was completed back in March, and the various committees are hard at work. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Discussions to create the new Jakarta EE Specification Process are underway, and early results are promising. This is going to be a very large job, but one which is essential to the future of this technology. &lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Recruit and enable developers and other community members, as well as vendors, to sponsor platform technologies, and bring the platform forward within the foundation. This would include potential incorporation of Eclipse MicroProfile technologies into the platform.&lt;/span&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So far so good. Since the original announcement with Oracle, IBM and Red Hat back in September, here is the list of companies that have joined the initiative:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 60px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Strategic Members: Fujitsu, Payara, and Tomitribe&lt;/span&gt;&lt;/p&gt;
&lt;p style=&quot;padding-left: 60px;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Participating Members: DocDuko, Genuitec, IncQueryLabs, Lightbend, London Java Community, Microsoft, Pivotal, RCPVision, SAP, UseOpen, Vaadin, and Webtide.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;More importantly, we’ve seen a lot of developers from the Java EE community jump in and participate in the new projects as they’ve been set up. It has been great to welcome so many new people to the Eclipse community. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse MicroProfile has not joined the Jakarta EE initiative. But those conversations cannot even really start until the new specification process is available for that community to review. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Begin doing the above as soon as possible after completion of Java EE 8 to facilitate a rapid transition. &lt;/span&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We’ve all been busy! It’s hard to say if the transition has been rapid enough, but everyone involved has been working hard and making progress. The process has not been and will not be perfect. With so many moving parts, people, and technologies, perfection is the enemy of good. But we’ve been very excited by the process we’re making. In particular, we have been excited by the passion and energy of the Java EE community as they have embraced the future with Jakarta EE. &lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 24 May 2018 11:07:21 +0000</pubDate>
</item>
<item>
	<title>itemis: Xtext 2.14 released!</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/xtext-2-14-released</guid>
	<link>https://blogs.itemis.com/en/xtext-2-14-released</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Xtext team proudly announces the availability of the 2.14 release. While the previous releases have focused on performance and internal improvements this release comes with a bunch of &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/Xtext/releasenotes.html&quot;&gt;&lt;span&gt;new features&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; that will ease your life and make your DSLs even more valuable. We encourage to update to this release. Xtext 2.14 will also be part of the upcoming Eclipse Photon release &lt;/span&gt;&lt;a href=&quot;https://wiki.eclipse.org/Photon/Simultaneous_Release_Plan#Schedule&quot;&gt;&lt;span&gt;scheduled for June 27&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Update-handwritten&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Update-handwritten.jpg?t=1527237710087&amp;amp;width=938&amp;amp;name=Update-handwritten.jpg&quot; style=&quot;width: 938px;&quot; width=&quot;938&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Of course 2.14 provides full compatibility with the recent Java 9 and 10 releases. Quite a lot of effort went into this support as Xtext is not the only part that needed adoption. We heavily rely on JDT, Gradle, Maven and Maven Tycho which all had to be compatible before.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The new version is fully compatible with your existing languages. To best employ the new features after the upgrade, we recommend to use the Xtext Project Wizard to create new projects with an up-to-date configuration and compare the setup with your existing language. For example, for Java 10 support, we had to upgrade the ASM library to version 6.1.1 and so do you.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The brand &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.8/M5/#Platform-Dev&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;new Code Mining API from Eclipse Photon&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is supported by Xtext 2.14, too. To give it a try, you’ll need Eclipse Photon. You should use the &lt;/span&gt;&lt;a href=&quot;http://download.eclipse.org/eclipse/downloads/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;latest Eclipse 4.8 Integration Build&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The Domain-Model Example DSL contains a sample implementation for Code Minings and serves as a blueprint if you plan to implement your own. This is how it looks like in action:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Code-Mining-API-Eclipse-Photon-Xtext&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Code-Mining-API-Eclipse-Photon-Xtext.gif?t=1527237710087&amp;amp;width=484&amp;amp;name=Code-Mining-API-Eclipse-Photon-Xtext.gif&quot; style=&quot;width: 484px;&quot; width=&quot;484&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;As the Code Mining implementation in Eclipse is still under development, its inventor &lt;/span&gt;&lt;a href=&quot;https://twitter.com/angelozerr&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Angelo Zerr&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is happy to get your feedback, too. Fame and fortune is to come if you &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/enter_bug.cgi?product=Platform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;report bugs&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to the Platform Text component in time so they can be fixed for the Photon release.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We also &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/xtext-2.14-adds-support-for-junit-5&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;updated the testing infrastructure&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The JUnit support has been extended so you can execute tests written with &lt;/span&gt;&lt;a href=&quot;https://junit.org/junit5/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JUnit 5&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The Xtext Project Wizard allows you now to select JUnit 5 for testing support and will produce a sample parser test and add the required dependencies.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-New-Project-Wizard&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-New-Project-Wizard.gif?t=1527237710087&amp;amp;width=614&amp;amp;name=Xtext-New-Project-Wizard.gif&quot; style=&quot;width: 614px;&quot; width=&quot;614&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Creating project and file wizards for your DSL has always been a pain point. There already &lt;span&gt;exists&lt;/span&gt; a non-well known generator fragment for an Eclipse New Project Wizard that produced a wizard which was not easily customizable. Now we have a new API and generator fragment that allows to produce &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/generating-a-new-project-wizard-with-xtext-2.14&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;new project&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/new-file-wizard-easy-to-generate-with-xtext-2.14&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;new file&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; wizards.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-New-Template-Wizard&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-New-Template-Wizard.gif?t=1527237710087&amp;amp;width=542&amp;amp;name=Xtext-New-Template-Wizard.gif&quot; style=&quot;width: 542px;&quot; width=&quot;542&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The Xtext Grammar language now supports additional annotations for parser rules:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;@Deprecated&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: This annotation marks a rule to be deprecated. Issue markers with are produced where a deprecated rule is used.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;@Final&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: A rule marked as final cannot be overridden.&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;code&gt;@Exported&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: With &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@Exported&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; it can be customized on grammar level, which element types are exported to the index. The customization takes effect when at least one rule in a grammar is annotated with &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@Exported&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. By doing that you can easily manage visibility of elements and safe memory.&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To enable your DSLs to run out of the box on as many editors as possible the support of the language server protocol was updated to 3.7 with VS code debug protocol 1.25.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtend 2.14 is released together with Xtext and of course also supports Java 9 and 10. In addition a &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/xtend/releasenotes.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;few more enhancements&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; are included. One nice thing to mention is the &lt;/span&gt;&lt;a href=&quot;https://hosting.itemis.de/en/xtend-2-14-unnecessary-modifiers-validation&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;detection of unnecessary modifiers&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;And of course we have worked on performance improvements and have closed bugs to improve overall behaviour while adding new features.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext 2.14 is now available on the &lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/releases/&quot;&gt;release update site&lt;/a&gt;. &lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you have feedback please leave a comment. Suggestions for improvements, bug reports or code contributions are warmly welcome on &lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/xtext&quot;&gt;&lt;span&gt;GitHub&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. And if you are interested in news about Xtext in general follow us on &lt;/span&gt;&lt;a href=&quot;https://twitter.com/xtext&quot;&gt;&lt;span&gt;Twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. See you there!&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fxtext-2-14-released&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 23 May 2018 14:18:05 +0000</pubDate>
	<author>xtext@itemis.com (Xtext-Team)</author>
</item>
<item>
	<title>itemis: New File Wizard – easy to generate with Xtext 2.14</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/new-file-wizard-easy-to-generate-with-xtext-2.14</guid>
	<link>https://blogs.itemis.com/en/new-file-wizard-easy-to-generate-with-xtext-2.14</link>
	<description>&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;We have already shown on our blog &lt;a href=&quot;https://hosting.itemis.de/en/generating-a-new-project-wizard-with-xtext-2.14&quot;&gt;how to generate a new project wizard with Xtext 2.14&lt;/a&gt;. Now it's also possible to create a comparable wizard, also based on templates, for creating DSL files in existing projects.&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This wizard will appear with &lt;a href=&quot;https://projects.eclipse.org/projects/modeling.tmf.xtext&quot;&gt;Eclipse Photon in June 2018&lt;/a&gt;, but here is a quick preview.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Generating the wizard&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The wizard for new files is created in much the same way as the wizard for new projects. The following section must be inserted in the mwe2 file, which defines what is generated:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;language = StandardLanguage {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    name = &quot;org.xtext.example.mydsl.MyDsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    fileExtensions = &quot;mydsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    serializer = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        generateStub = false&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;strong&gt;fileWizard = {&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;        generate = true&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;    }&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Invoking &lt;code&gt;Run As -&amp;gt; MWE2 Workflow&lt;/code&gt; now generates the wizard and an example template.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A package &lt;code&gt;wizard&lt;/code&gt; is generated in the UI project of the language. This contains a file &lt;code&gt;MyDslFileTemplateProvider.xtend&lt;/code&gt;, where the actual name of the file depends on the name of the language. This file defines the contents of the wizard: other configurations are usually not necessary.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If only a single template is generated for a language, the wizard will have only one page. All the parameters of the template are specified on this page next to the directory and a name.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Xtext-214-new-file-wizard&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Xtext-214-new-file-wizard.png?t=1527237710087&amp;amp;width=511&amp;amp;name=Xtext-214-new-file-wizard.png&quot; style=&quot;width: 511px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;511&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;If there are several templates, a combo box for selecting a template will be displayed on the first page. The parameters are then configured on the optional second page.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Defining your own templates&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To adapt the &quot;Hello World&quot; example to your own language, or to add further templates, you need to adapt the &lt;code&gt;TemplateProvider&lt;/code&gt; class, which implements &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/IFileTemplateProvider.java&quot;&gt;&lt;code&gt;IFileTemplateProvider&lt;/code&gt;&lt;/a&gt;. This returns a list of all available templates for the language via the &lt;code&gt;getFileTemplates&lt;/code&gt; method. By default, the implementation looks like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class MyDslFileTemplateProvider implements IFileTemplateProvider {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override getFileTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        #[new HelloWorldFile]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Adding another template therefore consists of adding a new instance to this list. The new template must be a subclass of &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/AbstractFileTemplate.java&quot;&gt;&lt;code&gt;AbstractFileTemplate&lt;/code&gt;&lt;/a&gt;. The easiest way to do this is by using the active annotatio&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;n &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/FileTemplate.xtend&quot;&gt;&lt;code&gt;File Template&lt;/code&gt;&lt;/a&gt;. This annotation allows you to specify a name, an icon and some descriptive text for the template. These specify the presentation of the template in the list of available templates in the wizard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So you would start something like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;@FileTemplate(label=&quot;Test&quot;, icon=&quot;file_template.png&quot;,&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    description=&quot;This creates a new hello world file.&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldFile {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;As a minimum you need to implement the &lt;code&gt;generateFile (IFileGenerator)&lt;/code&gt; method here. The passed &lt;a href=&quot;https://github.com/eclipse/xtext-eclipse/blob/master/org.eclipse.xtext.ui/src/org/eclipse/xtext/ui/wizard/template/IFileGenerator.java&quot;&gt;&lt;code&gt;IFileGenerator&lt;/code&gt;&lt;/a&gt; contains a single method, &lt;code&gt;generate (CharSequence, CharSequence),&lt;/code&gt; which you can call any number of times to create files when you close the wizard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For example, a call to create a simple &quot;Hello World&quot;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt; file might look like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;override generateFiles(IFileGenerator generator) {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;generator.generate('''«folder»/«name».mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Hello «helloName»!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Additional calls to &lt;code&gt;generate&lt;/code&gt; generate additional files. The parameters for the templates are defined with the same API as the project templates. The complete &quot;Hello World&quot; example looks like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class MyDslFileTemplateProvider implements IFileTemplateProvider {&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;override getFileTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;#[new HelloWorldFile]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@FileTemplate(label=&quot;Hello World&quot;, icon=&quot;file_template.png&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;description=&quot;Create a hello world for MyDsl.&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldFile {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;val helloName = combo(&quot;Hello Name:&quot;, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;#[&quot;Xtext&quot;, &quot;World&quot;, &quot;Foo&quot;, &quot;Bar&quot;], &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;&quot;The name to say 'Hello' to&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;override generateFiles(IFileGenerator generator) {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;generator.generate('''«folder»/«name».mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;Hello «helloName»!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Adding more templates works analogously to the project templates via an extension point, in this case via &quot;org.eclipse.xtext.ui.fileTemplate”.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The release of Eclipse Photon is still a few days away, but here is the link to the nightly update site:&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fnew-file-wizard-easy-to-generate-with-xtext-2.14&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 23 May 2018 09:26:41 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>EclipseCon France 2018: Interview: Building streamed iOS and Android apps with one Java code</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3908 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/interview-building-streamed-ios-and-android-apps-one-java-code</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;&lt;em&gt;Learn more about Christopher Mindus and his talk on the iizi platform “&lt;a href=&quot;https://www.eclipsecon.org/france2018/session/building-streamed-ios-and-android-mobile-and-web-apps-one-java-code-sponsored-mindus&quot;&gt;Building streamed iOS and Android mobile and web apps with one Java code&lt;/a&gt;”. &lt;/em&gt;&lt;/p&gt;

&lt;p&gt;..The iizi platform is a Java and app streaming platform that enables developers to build a cross-platform app for Android and iOS mobile devices and a browser-based web app, using a single code base. It includes tools for WYSIWYG UI design, real-time prototyping, debugging and testing as well as for setting up a production server.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/interview-building-streamed-ios-and-android-apps-one-java-code&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/iizi.png?itok=Aw7eLul6&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 22 May 2018 14:14:03 +0000</pubDate>
</item>
<item>
	<title>itemis: Generating a new project wizard with Xtext 2.14</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/generating-a-new-project-wizard-with-xtext-2.14</guid>
	<link>https://blogs.itemis.com/en/generating-a-new-project-wizard-with-xtext-2.14</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Anyone who implements DSLs with Eclipse Xtext benefits from the fact that the necessary infrastructure is generated automatically from the grammar. This gives you an environment in which everything is provided for developing your own DSL with minimum effort. A mere grammar and two buttons later, you can start Eclipse, full of anticipation. It first asks what kind of project you want to create. Xtext has not answered this question yet, so you have a choice.&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once you have created a project, many questions arise as to how your brand-new DSL can be used… What is the file name extension? Is it a text file? Is there a wizard? An example would help, but where can I find one? Who isn’t familiar with this sort of situation?&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Previously, creating a wizard involved tedious and repetitive manual work. The requirements for wizards are not rocket science, nor is their implementation. What you want is a wizard that clearly shows how to create a special project for your DSL, ideally already containing examples. Can this be generated? Certainly it can: in Xtext 2.14 we can do exactly this.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Although this version will not be released until June 2018, together with Eclipse Photon, here is a preview.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Generating the wizard&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Immediately after creating a new Xtext project, the project contains a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;mwe2&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; file that defines what is generated. This contains the following section of code:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;language = StandardLanguage {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    name = &quot;org.xtext.example.mydsl.MyDsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    fileExtensions = &quot;mydsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    serializer = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        generateStub = false&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    validator = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        // composedCheck =&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;&quot;org.eclipse.xtext.validation.NamesAreUniqueValidator&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; }&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;To generate the wizard, this is expanded to include a &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;TemplateProjectWizard&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; fragment for the wizard.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;language = StandardLanguage {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    name = &quot;org.xtext.example.mydsl.MyDsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    fileExtensions = &quot;mydsl&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    serializer = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        generateStub = false&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    validator = {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        // composedCheck =&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;&quot;org.eclipse.xtext.validation.NamesAreUniqueValidator&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;strong&gt;projectWizard = {&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;        generate = true&lt;/strong&gt;&lt;strong&gt;&lt;br /&gt;&lt;/strong&gt;&lt;strong&gt;    }&lt;/strong&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;If the generation is triggered as normal, using a Run As -&amp;gt; MWE2 workflow, then not only are the editor, the auto-completion and so on generated, but also all the necessary extensions for the wizard.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A wizard package is generated in the UI project for the language, which mainly contains a file &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MyDslProjectTemplateProvider.xtend&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, where the name of the file depends on the name of the language. This file defines the content of the wizard: other configurations are usually not necessary.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you open the runtime workspace directly after generation, it is possible to create new projects by opening the new wizard, for example via the main menu command File -&amp;gt; New -&amp;gt; Project. There will be a category &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;MyDsl &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;with a MyDsl project, again dependent on the name of the language. If the generated names are inappropriate you can of course change them using standard Eclipse means via the plugin.xml plug-in. If you want to incorporate the wizard in an existing language and are short of new entries in plugin.xml, here is a tip. Xtext normally generates content in the file plugin.xml, which can be edited manually. However, Xtext does not overwrite this file for further generations, but instead generates another file, plugin.xml_gen. You can then manually merge the contents of the plugin.xml_gen file into the existing plugin.xml.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;OpenNewProjectWizard&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/OpenNewProjectWizard.png?t=1527237710087&amp;amp;width=602&amp;amp;name=OpenNewProjectWizard.png&quot; style=&quot;width: 602px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;602&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As usual, you can define a project name and location on the first page.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; &lt;img alt=&quot;NewProjectWizardSeite1&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/NewProjectWizardSeite1.png?t=1527237710087&amp;amp;width=597&amp;amp;name=NewProjectWizardSeite1.png&quot; style=&quot;width: 597px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;597&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The second page offers you a selection from the defined templates. By default only a &quot;Hello World&quot; template is provided.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; &lt;img alt=&quot;NewProjectWizardTemplateSelection&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/NewProjectWizardTemplateSelection.png?t=1527237710087&amp;amp;width=597&amp;amp;name=NewProjectWizardTemplateSelection.png&quot; style=&quot;width: 597px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;597&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The following optional page offers options to configure the template. The &quot;Hello World&quot; application is only an example for parameterization; it does not make much sense to parameterize it.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;NewProjectWizardTemplateConfiguration&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/NewProjectWizardTemplateConfiguration.png?t=1527237710087&amp;amp;width=599&amp;amp;name=NewProjectWizardTemplateConfiguration.png&quot; style=&quot;width: 599px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;599&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;If the wizard ends with ‘Finish’, a project is created, to which the Xtext-Nature has already been assigned that contains a &quot;Hello World&quot; of the generated DSL.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;GeneratedProject-1&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/GeneratedProject-1.png?t=1527237710087&amp;amp;width=601&amp;amp;name=GeneratedProject-1.png&quot; style=&quot;width: 601px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;601&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Defining your own templates&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To adapt the &quot;Hello World&quot; example for your own language, or to add further templates, you must adapt the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;TemplateProvider&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, the class that implements &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectTemplateProvider&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This returns a list of all available templates for the language with the method &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;getProjectTemplates&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. By default the implementation looks like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;class MyDslProjectTemplateProvider implements&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectTemplateProvider {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override getProjectTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        #[new HelloWorldProject]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Adding another template therefore consists of adding a new instance to this list.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;class MyDslProjectTemplateProvider implements&lt;/span&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectTemplateProvider {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override getProjectTemplates() {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        #[new HelloWorldProject, new TestProject]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The new project must be a subclass of&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AbstractProjectTemplate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The easiest way to do this is to use the active annotation provided by&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ProjectTemplate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This annotation allows you to specify a name, an icon and a descriptive text for the template. These control the presentation of the template in the list of available templates provided by the wizard.&lt;/span&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt; &lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@ProjectTemplate(label=&quot;Test&quot;, icon=&quot;project_template.png&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    description=&quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Test&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;This is a test project.&amp;lt;/p&amp;gt;&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class HelloWorldProject {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt; &lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;As a minimum, you must implement the&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;generateProjects (IProjectGenerator)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt; &lt;/span&gt;method. The transferred&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectGenerator&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contains a single method,&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;generate (ProjectFactory)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt; &lt;/span&gt;that you can call any number of times to create projects when exiting the Eclipse wizard. Xtext already provides various implementations of&lt;span&gt; &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ProjectFactory&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt; &lt;/span&gt;to create Java, plug-in or feature projects: you can of course add your own implementations here.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A call to create a simple plug-in project with a file might therefore look like this:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; generator.generate(new PluginProjectFactory =&amp;gt; [&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    projectName = projectInfo.projectName&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    location = projectInfo.locationPath&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    projectNatures += #[JavaCore.NATURE_ID, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                        &quot;org.eclipse.pde.PluginNature&quot;, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                        XtextProjectHelper.NATURE_ID]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    builderIds += JavaCore.BUILDER_ID&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    folders += &quot;src&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    addFile('''src/Model.mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        Hello World!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    ''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;])&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Additional calls to &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;generate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; create additional projects, while additional calls to &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;addFile&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; create additional files in the projects.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;UI parameterization&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To avoid merely static templates you can also use the API to define a simple UI. This will then be presented to users to allow them to provide parameters for the template.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;By default the API allows you to define checkboxes, text fields and combo boxes. You can group these using &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;group&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; elements to provide an overview. The &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;AbstractProjectTemplate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; class provides corresponding methods for defining the interface. A checkbox is generated by calling &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;check&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. When assigned to an instance variable it can be used in the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;generateProjects&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; method to determine a user-selected value. For example, you could generate a checkbox with the following code, which suppresses the generation of a project after the user’s selection:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;@ProjectTemplate(label=&quot;Test&quot;, icon=&quot;project_template.png&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    description=&quot;&amp;lt;p&amp;gt;&amp;lt;b&amp;gt;Test&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;This is a test project.&amp;lt;/p&amp;gt;&quot;)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;final class TestProject {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    val generateHello = check(&quot;Generate Hello&quot;, true)&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    override generateProjects(IProjectGenerator generator) {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        if (generateHello.value) {&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;            generator.generate(new PluginProjectFactory =&amp;gt; [&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                projectName = projectInfo.projectName&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                location = projectInfo.locationPath&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                projectNatures += #[JavaCore.NATURE_ID,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                                    &quot;org.eclipse.pde.PluginNature&quot;,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                                    XtextProjectHelper.NATURE_ID]&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                builderIds += JavaCore.BUILDER_ID&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                folders += &quot;src&quot;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                addFile('''src/Model.mydsl''', '''&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                    Hello World!&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                ''')&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;            ])&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;        }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    }&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;You can create text fields and combo boxes and use them analogously with the text and combo methods. If you need a more sophisticated wizard, you can overwrite the &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;updateVariables&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;validate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; methods, as in the &quot;Hello World&quot; example. These are called after every user interaction with the UI.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;updateVariables&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; can be used to manipulate widgets, for example to enable or disable specific items when the user changes a value in the wizard. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;validate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; can return a status value to allow reporting of user input errors in the wizard as error messages.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Contribute templates via the plug-in&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Project templates are registered via an extension point. You do not get much benefit from this as a DSL developer: things only become interesting when your plug-in is extended by a third party, who can easily contribute further implementations of &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IProjectTemplateProvider&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is necessary to reference the implementing class and specify the name of the grammar to which you want to contribute. This name is used to decide in which wizard the templates are displayed. The example generated by Xtext looks like this in plugin.xml.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&amp;lt;extension point=&quot;org.eclipse.xtext.ui.projectTemplate&quot;&amp;gt;&lt;br /&gt;    &amp;lt;projectTemplateProvider&lt;br /&gt;            class=&quot;org.xtext.example.mydsl.ui.wizard.MyDslProjectTemplateProvider&quot;&lt;br /&gt;            grammarName=&quot;org.xtext.example.mydsl.MyDsl&quot;&amp;gt;&lt;br /&gt;    &amp;lt;/projectTemplateProvider&amp;gt;&lt;br /&gt;&amp;lt;/extension&amp;gt;&lt;br /&gt;&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;For anyone who cannot wait for Eclipse Photon, check out the nightly updates at&lt;/span&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;http://download.eclipse.org/modeling/tmf/xtext/updates/composite/latest/&lt;/span&gt;&lt;/a&gt;.&lt;span style=&quot;font-weight: 400;&quot;&gt; Just install the latest and hottest Xtext to get started.&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fgenerating-a-new-project-wizard-with-xtext-2.14&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 22 May 2018 14:07:25 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>Donald Raab: Eclipse Collections 9.2 Released</title>
	<guid isPermaLink="false">https://medium.com/p/aa88b56ecacc</guid>
	<link>https://medium.com/oracledevs/eclipse-collections-9-2-released-aa88b56ecacc?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;New features, more symmetric sympathy and community contributions.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*qkgxMuPMmGLG-YO0VwWnwQ.png&quot; /&gt;Good symmetry at St. Paul’s&lt;/figure&gt;&lt;blockquote&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; is a collections framework for Java. It has optimized List, Set and Map implementations with a rich and fluent API. The library provides additional data structures not found in the JDK like Bags, Multimaps and BiMaps. The framework also provides primitive versions of Lists, Sets, Bags, Stacks and Maps with a rich and fluent API. There is support for both Mutable and Immutable versions of all containers in the library.&lt;/blockquote&gt;&lt;p&gt;There were nine developers who contributed to the Eclipse Collections 9.2.0 release. I want to thank everyone who made a contribution. If this was your first contribution to an open source project and/or Eclipse Collections, congratulations and welcome!&lt;/p&gt;&lt;p&gt;The release notes for Eclipse Collections 9.2.0 are here:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.2.0&quot;&gt;https://github.com/eclipse/eclipse-collections/releases/tag/9.2.0&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Features, Features, Features!&lt;/h3&gt;&lt;p&gt;We all love new features in a framework, especially one we use on a daily basis. Since we started compiling with Java 8 in Eclipse Collections 8.0, we have been enjoying new flexibility for adding new APIs in minor releases by using default methods. Here are some of the new API additions that were added in Eclipse Collections 9.2.&lt;/p&gt;&lt;h4&gt;Welcome: flatCollectWith&lt;/h4&gt;&lt;p&gt;The first story of symmetry improvements arrives in form of &lt;em&gt;flatCollectWith &lt;/em&gt;on&lt;em&gt; RichIterable&lt;/em&gt;. We have had &lt;em&gt;flatCollect&lt;/em&gt; since version 1.0 of the framework. We have also had &lt;em&gt;collect&lt;/em&gt; and &lt;em&gt;collectWith.&lt;/em&gt; Now we have improved symmetry having both &lt;em&gt;flatCollect&lt;/em&gt; and &lt;em&gt;flatCollectWith&lt;/em&gt;. Here’s an example of code using &lt;em&gt;flatCollectWith&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void flatCollectWith()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; list = &lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(5, 4, 3, 2, 1);&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; result = &lt;br /&gt;            list.flatCollectWith(Interval::&lt;em&gt;fromTo&lt;/em&gt;, 1);&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; expected = &lt;em&gt;mList&lt;/em&gt;(&lt;br /&gt;            5, 4, 3, 2, 1,&lt;br /&gt;            4, 3, 2, 1,&lt;br /&gt;            3, 2, 1,&lt;br /&gt;            2, 1,&lt;br /&gt;            1);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, result);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: toSortedMapBy&lt;/h4&gt;&lt;p&gt;Our second story of symmetry arrives in the form of &lt;em&gt;toSortedMapBy &lt;/em&gt;on&lt;em&gt; RichIterable&lt;/em&gt;. We have had &lt;em&gt;toSortedBagBy&lt;/em&gt; since 6.0. We have had to &lt;em&gt;toSortedListBy&lt;/em&gt; and &lt;em&gt;toSortedSetBy&lt;/em&gt; since 1.0.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void toSortedMapBy()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; list =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(4, 3, 2, 1);&lt;br /&gt;    MutableSortedMap&amp;lt;Integer, Integer&amp;gt; map =&lt;br /&gt;            list.toSortedMapBy(i -&amp;gt; i % 2, k -&amp;gt; k, v -&amp;gt; v);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            SortedMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                    Comparators.&lt;em&gt;byFunction&lt;/em&gt;(i -&amp;gt; i % 2),&lt;br /&gt;                    4, 2, 3, 1),&lt;br /&gt;            map);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: Bag.selectDuplicates&lt;/h4&gt;&lt;p&gt;We’ve had &lt;em&gt;selectByOccurrences&lt;/em&gt; on &lt;em&gt;Bag&lt;/em&gt; since 3.0. Now we have a short-cut for selecting all occurrences greater than one.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void selectDuplicates()&lt;br /&gt;{&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; bag =&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 2, 3, 3, 3);&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; duplicates =&lt;br /&gt;            bag.selectDuplicates();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(2, 2, 3, 3, 3),&lt;br /&gt;            duplicates);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: Bag.selectUnique&lt;/h4&gt;&lt;p&gt;The symmetric method to &lt;em&gt;selectDuplicates&lt;/em&gt; is &lt;em&gt;selectUnique&lt;/em&gt;. Unlike &lt;em&gt;selectDuplicates&lt;/em&gt; which returns a &lt;em&gt;Bag&lt;/em&gt;, &lt;em&gt;selectUnique&lt;/em&gt; returns a &lt;em&gt;Set&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void selectUnique()&lt;br /&gt;{&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; bag =&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 2, 3, 3, 3);&lt;br /&gt;    MutableSet&amp;lt;Integer&amp;gt; unique =&lt;br /&gt;            bag.selectUnique();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1),&lt;br /&gt;            unique);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: chunk (for primitive collections)&lt;/h4&gt;&lt;p&gt;The symmetry is strong in this one. We have had &lt;em&gt;chunk&lt;/em&gt; for object collections since version 1.0.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void chunk()&lt;br /&gt;{&lt;br /&gt;    IntList list = IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(10);&lt;br /&gt;    RichIterable&amp;lt;IntIterable&amp;gt; chunks = list.chunk(2);&lt;br /&gt;&lt;br /&gt;    Verify.&lt;em&gt;assertSize&lt;/em&gt;(5, chunks);&lt;br /&gt;    String string = chunks.makeString(&lt;strong&gt;&quot;/&quot;&lt;/strong&gt;);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            &lt;strong&gt;&quot;[1, 2]/[3, 4]/[5, 6]/[7, 8]/[9, 10]&quot;&lt;/strong&gt;,&lt;br /&gt;            string);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: newEmpty (for primitive collections)&lt;/h4&gt;&lt;p&gt;We’ve had &lt;em&gt;newEmpty&lt;/em&gt; for our object collections since 1.0. The method &lt;em&gt;newEmpty&lt;/em&gt; gives you an empty version of the same collection type. Now we have the same method for primitive collections.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void newEmpty()&lt;br /&gt;{&lt;br /&gt;    MutableIntList empty1 = IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;    MutableIntList empty2 = empty1.newEmpty();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(empty1, empty2);&lt;br /&gt;    Assert.&lt;em&gt;assertNotSame&lt;/em&gt;(empty1, empty2);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: OrderedMapAdapter&lt;/h4&gt;&lt;p&gt;This is missing symmetry of a sort. We have had adapters for &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt;, &lt;em&gt;SortedSet&lt;/em&gt;, &lt;em&gt;Collection&lt;/em&gt;, &lt;em&gt;Map&lt;/em&gt; since 1.0. While there is no &lt;em&gt;OrderedMap&lt;/em&gt; interface in Java, there is an &lt;em&gt;OrderedMap&lt;/em&gt; implementation, which is called &lt;em&gt;LinkedHashMap&lt;/em&gt;. You could always adapt a &lt;em&gt;LinkedHashMap&lt;/em&gt; as a &lt;em&gt;MutableMap&lt;/em&gt;. Now you can adapt it and get back an &lt;em&gt;OrderedMap&lt;/em&gt; or a &lt;em&gt;MutableOrderedMap&lt;/em&gt;. Of course, the next thing we will eventually want on &lt;em&gt;RichIterable&lt;/em&gt; is &lt;em&gt;toOrderedMap&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void orderedMapAdapter()&lt;br /&gt;{&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; keys = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(3, 2, 1);&lt;br /&gt;    MutableOrderedMap&amp;lt;Object, Object&amp;gt; orderedMap =&lt;br /&gt;            OrderedMaps.&lt;em&gt;adapt&lt;/em&gt;(&lt;br /&gt;                    keys.injectInto(&lt;br /&gt;                            new LinkedHashMap&amp;lt;&amp;gt;(),&lt;br /&gt;                            (map, each) -&amp;gt; {&lt;br /&gt;                                map.put(each, each);&lt;br /&gt;                                return map;&lt;br /&gt;                            }));&lt;br /&gt;&lt;br /&gt;    LinkedHashMap&amp;lt;Object, Object&amp;gt; expected = new LinkedHashMap&amp;lt;&amp;gt;();&lt;br /&gt;    expected.put(3, 3);&lt;br /&gt;    expected.put(2, 2);&lt;br /&gt;    expected.put(1, 1);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, orderedMap);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(keys, orderedMap.keysView().toList());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Interval.&lt;em&gt;fromTo&lt;/em&gt;(3, 1), orderedMap.toList());&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Here’s an example using forEachWithIndex to populate the orderedMap.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void orderedMapAdapter()&lt;br /&gt;{&lt;br /&gt;    MutableOrderedMap&amp;lt;Integer, Integer&amp;gt; orderedMap =&lt;br /&gt;            OrderedMaps.&lt;em&gt;adapt&lt;/em&gt;(new LinkedHashMap&amp;lt;&amp;gt;());&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; keys = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(3, 2, 1);&lt;br /&gt;    keys.forEachWithIndex(orderedMap::put);&lt;br /&gt;&lt;br /&gt;    Map&amp;lt;Object, Object&amp;gt; expected = new LinkedHashMap&amp;lt;&amp;gt;();&lt;br /&gt;    expected.put(3, 0);&lt;br /&gt;    expected.put(2, 1);&lt;br /&gt;    expected.put(1, 2);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, orderedMap);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(keys, orderedMap.keysView().toList());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Interval.&lt;em&gt;zeroTo&lt;/em&gt;(2), orderedMap.toList());&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: toStringOfItemToCount (for primitive bags)&lt;/h4&gt;&lt;p&gt;We’ve had this method available on object Bags since version 3.0. Now &lt;em&gt;toStringOfItemToCount&lt;/em&gt; is available for all primitive Bag implementations.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void toStringOfItemToCount()&lt;br /&gt;{&lt;br /&gt;    MutableIntBag bag = IntBags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 2, 3, 3, 3);&lt;br /&gt;    String string = bag.toStringOfItemToCount();&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;{1=1, 2=2, 3=3}&quot;&lt;/strong&gt;, string);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Welcome: Two new Collectors on Collectors2&lt;/h4&gt;&lt;p&gt;We now have &lt;em&gt;aggregateBy&lt;/em&gt; and &lt;em&gt;countByEach&lt;/em&gt; on Collectors2. The method &lt;em&gt;aggregateBy&lt;/em&gt; gives us symmetry on &lt;em&gt;Collectors2&lt;/em&gt; with the same method on &lt;em&gt;RichIterable&lt;/em&gt;. The method &lt;em&gt;countByEach&lt;/em&gt; on the other hand, currently has no equivalent implementation in the &lt;em&gt;RichIterable&lt;/em&gt; API. This method is experimental in nature, and if it proves useful enough, we may add it as a feature to &lt;em&gt;RichIterable&lt;/em&gt; in a future release.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void countByEach()&lt;br /&gt;{&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; bag = Arrays.&lt;em&gt;asList&lt;/em&gt;(5, 4, 3, 2, 1)&lt;br /&gt;            .stream()&lt;br /&gt;            .collect(Collectors2.&lt;em&gt;countByEach&lt;/em&gt;(Interval::&lt;em&gt;oneTo&lt;/em&gt;));&lt;br /&gt;&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; expected = Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;    expected.addOccurrences(5, 1);&lt;br /&gt;    expected.addOccurrences(4, 2);&lt;br /&gt;    expected.addOccurrences(3, 3);&lt;br /&gt;    expected.addOccurrences(2, 4);&lt;br /&gt;    expected.addOccurrences(1, 5);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(expected, bag);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;And there is more…&lt;/h4&gt;&lt;p&gt;Have a look at some of the other features and improvements listed in the &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/releases/tag/9.2.0&quot;&gt;release notes&lt;/a&gt;. We look forward to seeing more contributors to Eclipse Collections in the future.&lt;/p&gt;&lt;p&gt;Have fun using Eclipse Collections 9.2 and all of the new features in your Java projects!&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=aa88b56ecacc&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/eclipse-collections-9-2-released-aa88b56ecacc&quot;&gt;Eclipse Collections 9.2 Released&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Mon, 21 May 2018 05:59:23 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Flamingo?!?</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1094</guid>
	<link>https://papyrusuml.wordpress.com/2018/05/18/flamingo/</link>
	<description>&lt;p&gt;I received an interesting email today. Someone asked why the logo contained a flamingo!&lt;/p&gt;
&lt;p&gt;Well, that my image is that of an Ibis, not a flamingo!&lt;/p&gt;
&lt;p&gt;An Ibis a bird that  is found in Egypt, where papyrus was used as paper (or even computers nowadays). That, and the Egyptian god &lt;a href=&quot;https://en.wikipedia.org/wiki/Thoth&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Toth&lt;/a&gt; was often depicted as a man with the head of an ibis&lt;em&gt; (I’ll let you make the link between that an me… &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt; )…&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Well, I hope this clarifies that for everyone!&lt;/p&gt;</description>
	<pubDate>Fri, 18 May 2018 13:15:02 +0000</pubDate>
</item>
<item>
	<title>itemis: Code Mining Support in Xtext</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/code-mining-support-in-xtext</guid>
	<link>https://blogs.itemis.com/en/code-mining-support-in-xtext</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One of the most notable &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/eclipse/news/4.8/M5/#Platform-Dev&quot;&gt;&lt;span&gt;new APIs in Eclipse Photon&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is called Code Mining. A code mining represents content (i.e. labels and icons) that are shown within the text editor, but are not part of the text itself. For example, within a method call statement a mining could display the name of parameters, or an icon above unit test methods could be shown that runs the test on clicking it.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt;  
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Code-Mining-Preview&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Code-Mining-Preview.jpg?t=1527237710087&amp;amp;width=720&amp;amp;name=Code-Mining-Preview.jpg&quot; style=&quot;width: 720px;&quot; width=&quot;720&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The following image illustrates such minings in Java code. The code minings are provided by the &lt;/span&gt;&lt;a href=&quot;https://github.com/angelozerr/jdt-codemining&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;jdt-codemining&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Plug-in, which the API’s inventor Angelo Zerr is developing on GitHub. This will eventually be contributed to JDT when it is mature enough.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;img alt=&quot;JDT-Code-Mining-PlugIn&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/JDT-Code-Mining-PlugIn.png?t=1527237710087&amp;amp;width=724&amp;amp;name=JDT-Code-Mining-PlugIn.png&quot; style=&quot;width: 724px;&quot; width=&quot;724&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Code Mining is a generic extension to text editors in Eclipse. The actual text to be displayed depends on the concrete language. It is up to the developers of the language tooling to implement the interface &lt;/span&gt;&lt;code&gt;org.eclipse.jface.text.codemining.ICodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and to register the provider with the &lt;/span&gt;&lt;code&gt;org.eclipse.ui.workbench.texteditor.codeMiningProviders&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; extension point.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext’s integration of the Code Mining API&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;span&gt;With version 2.14 t&lt;/span&gt;he Xtext project offers an integration with the Code Mining API. The API is provided by the new plugin &lt;/span&gt;&lt;code&gt;org.eclipse.xtext.ui.codemining&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Xtext’s Domain-Model example has been extended to make use of this API and serves as a blue print for other languages.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First of all, the language’s generator workflow is extended to use the &lt;/span&gt;&lt;code&gt;CodeMiningFragment&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;import org.eclipse.xtext.xtext.generator.ui.codemining.CodeMiningFragment
...
Workflow {
  ...
  language = StandardLanguage {
    ...
    &lt;strong&gt;fragment = CodeMiningFragment {&lt;/strong&gt;
      generateStub = true
      generateXtendStub = false
    }
  }
}&lt;/pre&gt; 
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;When the generator is executed it will create a &lt;/span&gt;&lt;code&gt;&amp;lt;DSL&amp;gt;CodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; stub class in the UI project and register it to the &lt;/span&gt;&lt;span style=&quot;font-weight: 400; font-family: 'andale mono', times;&quot;&gt;plugin.xml&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The provider extends from &lt;/span&gt;&lt;span style=&quot;font-family: 'andale mono', times;&quot;&gt;&lt;code&gt;AbstractXtextCodeMiningProvider&lt;/code&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which implements the general contract of an &lt;/span&gt;&lt;code&gt;ICodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Code Mining feature distinguishes between minings that are shown above a mined text line (line header minings) and minings shown within a line (line content minings – like the Java example above). &lt;/span&gt;&lt;code&gt;AbstractXtextCodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; offers some convenience methods &lt;/span&gt;&lt;code&gt;createNewLineHeaderCodeMining()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;code&gt;createNewLineContentCodeMining()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to create appropriate instances of &lt;/span&gt;&lt;code&gt;ICodeMining&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The developer’s task is to implement the &lt;/span&gt;&lt;code&gt;createCodeMinings()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; method:&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;img alt=&quot;Code-Mining-Method&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Code-Mining-Method.png?t=1527237710087&amp;amp;width=1010&amp;amp;name=Code-Mining-Method.png&quot; style=&quot;width: 1010px;&quot; width=&quot;1010&quot; /&gt;
&lt;br /&gt;
&lt;br /&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;In this method basically the resource is analysed to identify text to be displayed for some elements. Then the location for that text in the document has to be computed. U&lt;span&gt;sually t&lt;/span&gt;his affects accessing the document or the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;node model&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; using &lt;/span&gt;&lt;code&gt;NodeModelUtils&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In the &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Domain-Model Example&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; return types of operations are optional. When not declared, the return type is inferred. Therefore code minings could be created that display the inferred return type when not specified.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Domain-Model-Example-Code-Mining&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Domain-Model-Example-Code-Mining.png?t=1527237710087&amp;amp;width=724&amp;amp;name=Domain-Model-Example-Code-Mining.png&quot; style=&quot;width: 724px;&quot; width=&quot;724&quot; /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;The example’s &lt;/span&gt;&lt;code&gt;DomainmodelCodeMiningProvider&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; class implements the &lt;/span&gt;&lt;code&gt;createCodeMinings()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; method as follows: First, all &lt;/span&gt;&lt;code&gt;Operation&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; instances in the resource are collected. For each instance that doesn't have an explicit type set, the inferred return type’s name is computed. The type should be displayed after the closing parenthesis. The parenthesis’ Keyword is looked up in the grammar and stored in &lt;/span&gt;&lt;code&gt;rightParenthesisKeyword_4&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. From the node model the node representing the parenthesis is searched to find the document offset where the text is to be displayed. Finally, the &lt;/span&gt;&lt;code&gt;acceptor&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is called with a line content mining created from offset position and the inferred type name.&lt;br /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;img alt=&quot;Code-Mining-Override&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog/Xtext/Code-Mining-Override.png?t=1527237710087&amp;amp;width=1999&amp;amp;name=Code-Mining-Override.png&quot; style=&quot;width: 1999px;&quot; width=&quot;1999&quot; /&gt;&lt;br /&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A look behind the scenes&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Mining is an extension to JFace’s &lt;/span&gt;&lt;code&gt;SourceViewer&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. The new interface &lt;/span&gt;&lt;code&gt;ISourceViewerExtension5&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; defines the contract for code mining support in source viewers.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext uses this extension in the &lt;/span&gt;&lt;code&gt;XtextCodeMiningReconcileStrategy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and calls the extension methods (mainly &lt;/span&gt;&lt;code&gt;updateCodeMinings()&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;) when the text in the editor is reconciled. Xtext’s main &lt;/span&gt;&lt;code&gt;IReconcilingStratetgy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; implementation &lt;/span&gt;&lt;code&gt;XtextDocumentReconcileStrategy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; was already aggregating two custom reconciling strategies, but not well prepared to add a third. It was refactored to aggregrate multiple now.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The &lt;/span&gt;&lt;code&gt;XtextCodeMiningReconcileStrategy&lt;/code&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; will only be added when code mining support is provided by a DSL. Thus there will be no overhead for any existing DSL until they implement code mining. Users will currently experience a small delay on the text update, since minings are computed and displayed asynchronously.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A note on backward compatility&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The Xtext framework is backward compatible to older versions of the Eclipse Platform. With Xtext 2.14, the project still targets Eclipse Luna (4.4) as lowest supported platform to run on and is built and tested against it.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Since Code Mining is a new feature that's only provided on Eclipse Photon (4.8) and later, this raised some challenges on compatibility:&lt;/span&gt;&lt;/p&gt; 
&lt;ul&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Xtext must be buildable with Eclipse Luna as Target Platform&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;DSLs developed on a 4.8+ Platform with Code Mining must be deployable on Eclipse Oxygen and earlier&lt;/span&gt;&lt;/li&gt; 
 &lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The DSL’s editor must run on Eclipse Oxygen and earlier without breakage, just the minings are not displayed&lt;/span&gt;&lt;/li&gt; 
&lt;/ul&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We'll highlight these challenges and how they were solved in Xtext in a later blog post.&lt;/span&gt;&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Mining is a new feature in Eclipse text editors that can provide valuable context information to developers within displayed text. Xtext 2.14 adopts the Code Mining API and offers an own API suited for Xtext DSL implementations. A usage reference is contained in the Domain-Model example. DSLs providing a Code Mining implementation are safely installable on older Eclipse versions.&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Kudos to &lt;a href=&quot;https://twitter.com/angelozerr?lang=de&quot;&gt;Angelo Zerr&lt;/a&gt;, who has contributed the API to Eclipse Photon and was always helpful to solve issues that we faced with the API and its implementation. On itemis side, a huge part of the effort was done by student René Purrio, who carefully analyzed the implementation and did intensive testing. With tight cooperation with our Xtext core team he was able to shape a nice implementation and contribute a valuable feature to Xtext.&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fcode-mining-support-in-xtext&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 18 May 2018 13:10:00 +0000</pubDate>
	<author>thoms@itemis.de (Karsten Thoms)</author>
</item>

</channel>
</rss>
