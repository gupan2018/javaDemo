<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Donald Raab: Visualizing Eclipse Collections</title>
	<guid isPermaLink="false">https://medium.com/p/646dad9533a9</guid>
	<link>https://medium.com/@donraab/visualizing-eclipse-collections-646dad9533a9?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;A visual overview of the APIs, Interfaces, Factories, Static Utility and Adapters in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; using mind maps.&lt;/p&gt;&lt;h3&gt;A picture is worth a thousand words&lt;/h3&gt;&lt;p&gt;I’m not sure how many words a mind map is worth, but they are useful for information chunking. &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; is a very feature rich library. The mind maps help organize and group concepts and they help convey a sense of the symmetry in Eclipse Collections.&lt;/p&gt;&lt;h4&gt;&lt;a href=&quot;https://medium.com/@donraab/symmetric-sympathy-2c59d4541d60&quot;&gt;Symmetric Sympathy&lt;/a&gt;&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*x7tvAh5_CcaS0TZ1O62sRQ.png&quot; /&gt;A High-level view of the Eclipse Collections Library&lt;/figure&gt;&lt;h3&gt;RichIterable API&lt;/h3&gt;&lt;p&gt;The &lt;em&gt;RichIterable&lt;/em&gt; API is the set of common APIs share between all of the container classes in Eclipse Collections. Some methods have overloaded forms which take additional parameters. In the picture below I have grouped the unique set of methods by the kind of functionality they provide.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Br4eQEhSsLeRZ1EVZIHhPA.png&quot; /&gt;RichIterable API&lt;/figure&gt;&lt;h4&gt;API by Example&lt;/h4&gt;&lt;p&gt;Below are links to several blogs covering various APIs available on &lt;em&gt;RichIterable&lt;/em&gt;.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-filtering-4f14b906f718&quot;&gt;Filtering&lt;/a&gt; (&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-partitioning-d2704f826e66&quot;&gt;Partitioning&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Transforming (&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-collect-262a46030c49&quot;&gt;Collect&lt;/a&gt; / &lt;a href=&quot;https://medium.com/@donraab/ec-by-example-flatcollect-3efe24e43da2&quot;&gt;FlatCollect&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-short-circuiting-methods-e60121bc5a&quot;&gt;Short-circuiting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-counting-688dfaaf513c&quot;&gt;Counting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/the-sum-of-all-reductions-d46dfd334704&quot;&gt;Filter / Map / Reduce&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/a-rose-by-any-other-name-e15060d4c98e&quot;&gt;Eclipse Collections API compared to Stream API&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;RichIterable Interface Hiearchy&lt;/h3&gt;&lt;p&gt;&lt;em&gt;RichIterable&lt;/em&gt; is the base type for most container types in Eclipse Collections. Even object valued &lt;em&gt;Map&lt;/em&gt; types extend &lt;em&gt;RichIterable&lt;/em&gt; in Eclipse Collections. A &lt;em&gt;Map&lt;/em&gt; of type K (key) and V (value), will be an extension of &lt;em&gt;RichIterable&lt;/em&gt; of V (value). This provides an rich set of behaviors to &lt;em&gt;Map&lt;/em&gt; types for their values. You can still iterate over keys, and keys and values together, and there are separate methods for this purpose.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*X297GxEsPqidlMItQ5g5nw.png&quot; /&gt;RichIterable Interface Hierarchy — Green Star=Mutable, Red Circle=Immutable&lt;/figure&gt;&lt;h3&gt;PrimitiveIterable Interface Hierarchy&lt;/h3&gt;&lt;p&gt;Eclipse Collections provides container support for all eight Java primitives. There is a base interface with common behavior named &lt;em&gt;PrimitiveIterable&lt;/em&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/742/1*yzAO5Ciqu8Am_5gWxXfH8w.png&quot; /&gt;PrimitiveIterable Interface Hierarchy&lt;/figure&gt;&lt;p&gt;The following diagram shows the &lt;em&gt;IntIterable&lt;/em&gt; branch from the diagram above. There are seven other similar branches.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*vkS5xustMLJQAGBEPSPaKw.png&quot; /&gt;IntIterable Interface Hierarchy — Green Star=Mutable, Red Circle=Immutable&lt;/figure&gt;&lt;p&gt;The interface hierarchy for each primitive type is pretty much the same as &lt;em&gt;IntIterable&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;Factories&lt;/h3&gt;&lt;p&gt;If you want to create a collection in Eclipse Collections, you have a few options available. One option is to use a constructor or static factory method on the concrete mutable type that you want to create. This requires you to know the name of the concrete mutable types (e.g. FastList, UnifiedSet or UnifiedMap). This option does not exist for immutable types however. The most convenient, consistent and symmetric option if you are going to create both mutable and immutable containers is to use one of the factory classes provided. A factory class follows the pattern of using the type name plus an s, to make it plural. So if you want a mutable or immutable &lt;em&gt;List&lt;/em&gt;, you would use the &lt;em&gt;Lists&lt;/em&gt; class, and then specify whether you want the &lt;em&gt;mutable&lt;/em&gt; or &lt;em&gt;immutable&lt;/em&gt; factory for that class.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/958/1*Tsgi3i2VJUncEXE73HwT5A.png&quot; /&gt;Factory Classes available in Eclipse Collections for Object Containers&lt;/figure&gt;&lt;p&gt;There are separate factory classes for primitive containers. Prefix the primitive type in front of the container type to find the right primitive factory class.&lt;/p&gt;&lt;h4&gt;&lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;Mutable Factory Examples&lt;/a&gt;&lt;/h4&gt;&lt;pre&gt;MutableList&amp;lt;T&amp;gt; list = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableSet&amp;lt;T&amp;gt; set = Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableSortedSet&amp;lt;T&amp;gt; sortedSet = SortedSets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableMap&amp;lt;K, V&amp;gt; map = Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableSortedMap&amp;lt;K, V&amp;gt; sortedMap = SortedMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableStack&amp;lt;T&amp;gt; stack = Stacks.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableBag&amp;lt;T&amp;gt; bag = Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableSortedBag&amp;lt;T&amp;gt; sortedBag = SortedBags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableBiMap&amp;lt;K, V&amp;gt; biMap = BiMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;/pre&gt;&lt;h4&gt;&lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-2-immutable-8cb72ff897ee&quot;&gt;Immutable Factory Examples&lt;/a&gt;&lt;/h4&gt;&lt;pre&gt;ImmutableList&amp;lt;T&amp;gt; list = Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableSet&amp;lt;T&amp;gt; set = Sets.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableSortedSet&amp;lt;T&amp;gt; sortedSet = SortedSets.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableMap&amp;lt;K, V&amp;gt; map = Maps.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableSortedMap&amp;lt;K, V&amp;gt; sortedMap = SortedMaps.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableStack&amp;lt;T&amp;gt; stack = Stacks.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableBag&amp;lt;T&amp;gt; bag = Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableSortedBag&amp;lt;T&amp;gt; sortedBag = SortedBags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableBiMap&amp;lt;K, V&amp;gt; biMap = BiMaps.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;/pre&gt;&lt;h3&gt;Static Utility Classes&lt;/h3&gt;&lt;p&gt;In the beginning of Eclipse Collections development, everything was accomplished through static utility classes. We added our own interface types later on. Over time Eclipse Collections has accumulated quite a few static utility classes that serve various purposes. Static utility classes are useful when you want to use Eclipse Collections APIs with types that extend the JDK Collection interfaces like Iterable, Collection, List, RandomAccess and Map.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*D_KsXB4sWfrmRARmRjyBlQ.png&quot; /&gt;A collection of useful static utility classes&lt;/figure&gt;&lt;h4&gt;Static Utility Examples&lt;/h4&gt;&lt;pre&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        Iterate.&lt;em&gt;anySatisfy&lt;/em&gt;(&lt;br /&gt;                Collections.&lt;em&gt;singleton&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;),&lt;br /&gt;                &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;::equals));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        ListIterate.&lt;em&gt;anySatisfy&lt;/em&gt;(&lt;br /&gt;                Collections.&lt;em&gt;singletonList&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;),&lt;br /&gt;                Predicates.&lt;em&gt;equal&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;)));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        MapIterate.&lt;em&gt;anySatisfy&lt;/em&gt;(&lt;br /&gt;                Collections.&lt;em&gt;singletonMap&lt;/em&gt;(1, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;),&lt;br /&gt;                Predicates.&lt;em&gt;notEqual&lt;/em&gt;(&lt;strong&gt;&quot;2&quot;&lt;/strong&gt;)));&lt;/pre&gt;&lt;pre&gt;String[] strings = {&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;};&lt;br /&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        ArrayIterate.&lt;em&gt;anySatisfy&lt;/em&gt;(strings, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;::equals));&lt;br /&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        ArrayIterate.&lt;em&gt;contains&lt;/em&gt;(strings, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;));&lt;/pre&gt;&lt;h3&gt;Adapters&lt;/h3&gt;&lt;p&gt;There are adapters that provide the Eclipse Collections APIs to JDK types.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*EMfXxGe5uHYqtby0ctH7LQ.png&quot; /&gt;Adapters for JDK types&lt;/figure&gt;&lt;h4&gt;Creating an adapter&lt;/h4&gt;&lt;pre&gt;MutableList&amp;lt;String&amp;gt; list = &lt;br /&gt;        Lists.&lt;em&gt;adapt&lt;/em&gt;(new ArrayList&amp;lt;&amp;gt;());&lt;br /&gt;MutableSet&amp;lt;String&amp;gt; set = &lt;br /&gt;        Sets.&lt;em&gt;adapt&lt;/em&gt;(new HashSet&amp;lt;&amp;gt;());&lt;br /&gt;MutableMap&amp;lt;String, String&amp;gt; map = &lt;br /&gt;        Maps.&lt;em&gt;adapt&lt;/em&gt;(new HashMap&amp;lt;&amp;gt;());&lt;br /&gt;MutableList&amp;lt;String&amp;gt; array = &lt;br /&gt;        ArrayAdapter.&lt;em&gt;adapt&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;);&lt;br /&gt;CharAdapter chars = &lt;br /&gt;        Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;strong&gt;&quot;Hello Chars!&quot;&lt;/strong&gt;);&lt;br /&gt;CodePointAdapter codePoints = &lt;br /&gt;        Strings.&lt;em&gt;asCodePoints&lt;/em&gt;(&lt;strong&gt;&quot;Hello CodePoints!&quot;&lt;/strong&gt;);&lt;br /&gt;LazyIterable&amp;lt;String&amp;gt; lazy = &lt;br /&gt;        LazyIterate.&lt;em&gt;adapt&lt;/em&gt;(new CopyOnWriteArrayList&amp;lt;&amp;gt;());&lt;/pre&gt;&lt;h3&gt;Additional Types&lt;/h3&gt;&lt;p&gt;There are more types in Eclipse Collections like Multimaps. These will be covered in a separate blog. Multimap is one of the types today, along with ParallelIterable, that does not extend RichIterable directly.&lt;/p&gt;&lt;h3&gt;Links&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md&quot;&gt;Eclipse Collections Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Katas&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;API Design of Eclipse Collections&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/Refactoring-to-Eclipse-Collections&quot;&gt;Refactoring to Eclipse Collections&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/oracledevs/unifiedmap-how-it-works-48af0b80cb37&quot;&gt;UnifiedMap&lt;/a&gt;, &lt;a href=&quot;https://medium.com/oracledevs/unifiedset-the-memory-saver-25b830745959&quot;&gt;UnifiedSet&lt;/a&gt; and &lt;a href=&quot;https://medium.com/oracledevs/bag-the-counter-2689e901aadb&quot;&gt;Bag&lt;/a&gt; Explained&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=646dad9533a9&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 16 Jun 2018 21:36:42 +0000</pubDate>
</item>
<item>
	<title>itemis: Pro Tip: Implementing JUnit Test Cases in Xtend</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/implementing-junit-test-cases-in-xtend</guid>
	<link>https://blogs.itemis.com/en/implementing-junit-test-cases-in-xtend</link>
	<description>&lt;p&gt; &lt;/p&gt; 
&lt;blockquote&gt;
 What makes a clean test? Three things. Readability, readability, and readability. Readability is perhaps even more important in unit tests than it is in production code. What makes tests readable? The same thing that makes all code readable: clarity, simplicity, and density of expression.
&lt;/blockquote&gt; 
&lt;strong&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[Robert C. Martin: Clean Code - A Handbook of Agile Software Craftsmanship (page 124)]&lt;/span&gt;&lt;/strong&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;Recently, the &lt;a href=&quot;https://hosting.itemis.de/en/editing-graphviz-.dot-files-with-the-gef-dot-editor&quot;&gt;Eclipse GEF DOT&lt;/a&gt; Editor has been extended by the &lt;a href=&quot;http://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#refactoring&quot;&gt;Rename Refactoring&lt;/a&gt; functionality. Following the Behaviour-Driven Development approach, its acceptance criteria have been specified first:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;Feature: Rename Refactoring

  Scenario Outline:
    Given is the &amp;lt;dslFile&amp;gt;
    When renaming the &amp;lt;targetElement&amp;gt; to &amp;lt;newName&amp;gt;
    Then the dsl file has the content &amp;lt;newContent&amp;gt;.

    Examples:
      |  dslFile  |   targetElement   | newName | newContent |
      |-----------|-------------------|---------|------------|
      |  graph {  |                   |         |  graph {   |
      |    1      |     firstNode     |    2    |    2       |
      |  }        |                   |         |  }         |
      |           |                   |         |            |
      | digraph { |                   |         | digraph {  |
      |   1       |     firstNode     |    3    |   3        |
      |   1-&amp;gt;2    |                   |         |   3-&amp;gt;2     |
      | }         |                   |         | }          |
      |           |                   |         |            |
      | digraph { |                   |         | digraph {  |
      |   1       |    source node    |    3    |   3        |
      |   1-&amp;gt;2    | of the first edge |         |   3-&amp;gt;2     |
      | }         |                   |         | }          |
      |           |                   |         |            |&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;Thereafter, the test specification has been implemented in JUnit test cases: &lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class DotRenameRefactoringTests extends AbstractEditorTest {

	// ...

	@Test def testRenameRefactoring01() {
		'''
			graph {
				1
			}
		'''.
		testRenameRefactoring([firstNode], &quot;2&quot;, '''
			graph {
				2
			}
		''')
	}

	@Test def testRenameRefactoring02() {
		'''
			digraph {
				1
				1-&amp;gt;2
			}
		'''.
		testRenameRefactoring([firstNode], &quot;3&quot;, '''
			digraph {
				3
				3-&amp;gt;2
			}
		''')
	}

	@Test def testRenameRefactoring03() {
		'''
			digraph {
				1
				1-&amp;gt;2
			}
		'''.
		testRenameRefactoring([sourceNodeOfFirstEdge], &quot;3&quot;, '''
			digraph {
				3
				3-&amp;gt;2
			}
		''')
	}

	// ...

	private def testRenameRefactoring(CharSequence it, (DotAst)=&amp;gt;NodeId element,
		String newName, CharSequence newContent) {
		// given
		dslFile.
		// when
		rename(target(element), newName).
		// then
		dslFileHasContent(newContent)
	}

	// ...

}&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;Thanks to the &lt;a href=&quot;http://www.eclipse.org/xtend/&quot;&gt;Xtend&lt;/a&gt; programming language, the entire &lt;a href=&quot;https://github.com/eclipse/gef/blob/master/org.eclipse.gef.dot.tests/src/org/eclipse/gef/dot/tests/DotRenameRefactoringTests.xtend&quot;&gt;DotRenameRefactoringTests&lt;/a&gt; test suite became readable, clean, and scales very well.&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt;
 How did I do this? I did not simply write this program from beginning to end in its current form. To write clean code, you must first write dirty code and then clean it.
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;background-color: transparent; font-size: 12px;&quot;&gt;[Robert C. Martin: Clean Code - A Handbook of Agile Software Craftsmanship (page 200)]&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;Would you like to learn more about Clean Code, Behaviour-Driven and Test-Driven Development? Take a look at the (german) blog posts of my former colleague &lt;a href=&quot;https://hosting.itemis.de/author/christian-fischer&quot;&gt;Christian Fischer&lt;/a&gt;, a very passionate software craftsman and agile coach.&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fimplementing-junit-test-cases-in-xtend&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 15 Jun 2018 14:18:00 +0000</pubDate>
	<author>miklossy@itemis.de (Tamas Miklossy)</author>
</item>
<item>
	<title>Eclipse Ditto: Announcing Ditto Milestone 0.3.0-M2</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2018-06-15-milestone-announcement-030-M2.html</guid>
	<link>https://www.eclipse.org/ditto/2018-06-15-milestone-announcement-030-M2.html</link>
	<description>&lt;p&gt;Today we, the Eclipse Ditto team, are happy to announce our next milestone 0.3.0-M2.&lt;/p&gt;

&lt;p&gt;The main changes are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;improvement of Ditto’s cluster performance with many managed Things
    &lt;ul&gt;
      &lt;li&gt;a new Ditto service &lt;a href=&quot;https://www.eclipse.org/ditto/architecture-services-concierge.html&quot;&gt;ditto-concierge&lt;/a&gt; was added for this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;improved cluster bootstrapping based on DNS with the potential to easy plugin other mechanism (e.g. for Kubernetes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_030-M2.html&quot;&gt;0.3.0-M2 release notes&lt;/a&gt; for a detailed description of what 
changed.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Fri, 15 Jun 2018 04:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Hello Planet Eclipse!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39577</guid>
	<link>https://eclipsesource.com/blogs/2018/06/14/hello-planet-eclipse/</link>
	<description>&lt;p&gt;This is a test blog to check the aggregation on &lt;a href=&quot;http://www.planeteclipse.org/planet/&quot;&gt;Planet Eclipse&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 14 Jun 2018 09:23:40 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF Photon supports OSGi Async Remote Services</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-5680104965640748238</guid>
	<link>http://eclipseecf.blogspot.com/2018/05/ecf-photon-supports-osgi-async-intent.html</link>
	<description>In a &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/04/ecf-photon-supports-osgi-r7.html&quot;&gt;previous post&lt;/a&gt;, I indicated that ECF Photon/3.14.0 will support the recently-approved &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0&quot;&gt;OSGi R7 specification&lt;/a&gt;.   What does this support provide for  developers?&lt;br /&gt;&lt;br /&gt;Support &lt;b&gt;osgi.async&lt;/b&gt; remote service intent&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html&quot;&gt;OSGi R7 Remote Services specification&lt;/a&gt; has been enhanced with remote service &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#i1693415&quot;&gt;intents&lt;/a&gt;.  Remote Service Intents allow service authors to specify requirements on the underlying distribution system in a standardized way.   Standardization of service behavior guarantees the same runtime behavior across distribution providers and implementations.&lt;br /&gt;&lt;br /&gt;The &lt;b&gt;osgi.async&lt;/b&gt; intent allows the service interface to use return types such as Java8's &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;CompletableFuture&lt;/a&gt; or OSGi's &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/util.promise.html&quot;&gt;Promise&lt;/a&gt;.   With a supporting distribution provider, the proxy will automatically implement the asynchronous/non-blocking behavior for the service consumer.&lt;br /&gt;&lt;br /&gt;For example, consider a service interface:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;public interface Hello {&lt;br /&gt;    CompletableFuture&amp;lt;String&amp;gt; hello(String greetingMessage);&lt;br /&gt;}&lt;/pre&gt;When an implementation of this service is registered and exported as a remote service &lt;b&gt;with the osgi.async intent&lt;/b&gt;:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(property = { &quot;service.exported.interfaces=*&quot;, &quot;service.intents=osgi.async&quot; })&lt;br /&gt;public class HelloImpl implements Hello {&lt;br /&gt;    public CompletableFuture&amp;lt;String&amp;gt; hello(String greetingMessage) {&lt;br /&gt;          CompletableFuture&amp;lt;String&amp;gt; future = new CompletableFuture&amp;lt;String&amp;gt;();&lt;br /&gt;          future.complete(&quot;Hi.  This a response to the greeting: &quot;+greetingMessage);&lt;br /&gt;          return future;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;Then when a Hello service consumer (on same or other process) discovers, imports and then remote service is injected by DS:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(immediate=true)&lt;br /&gt;public class HelloConsumer {&lt;br /&gt;&lt;br /&gt;    @Reference&lt;br /&gt;    private Hello helloService;&lt;br /&gt;&lt;br /&gt;    @Activate&lt;br /&gt;    void activate() throws Exception {&lt;br /&gt;        // Call helloService.hello remote service without blocking&lt;br /&gt;        helloService.hello(&quot;hi there&quot;).whenComplete((result,exception) -&amp;gt; {&lt;br /&gt;            if (exception != null)&lt;br /&gt;                exception.printStackTrace(exception);&lt;br /&gt;            else&lt;br /&gt;                System.out.println(&quot;hello service responds: &quot; + result);&lt;br /&gt;        });&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;The injected &lt;b&gt;helloService &lt;/b&gt;instance (a distribution-provider-constructed proxy) will automatically implement the asynchronous remote call.   Since the proxy is constructed by the distribution provider, there is no need for the consumer to implement anything other than calling the 'hello' method and handling the response via the Java8-provided &lt;b&gt;whenComplete&lt;/b&gt; method.   Java8's &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html&quot;&gt;CompletionStage&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html&quot;&gt;Future&lt;/a&gt;, and OSGi's Promise are also supported return types.  (Only the return type is used to identify asynchronous remote methods, any method name can be used).  For example: the following signature is also supported as an async remote service: &lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;public interface Hello {&lt;br /&gt;    org.osgi.util.promise.Promise&amp;lt;String&amp;gt; hello(String greetingMessage);&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;Further, OSGi R7 Remote Services supports a timeout property: &lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(property = { &quot;service.exported.interfaces=*&quot;, &quot;service.intents=osgi.async&quot;, &quot;osgi.basic.timeout=20000&quot; })&lt;br /&gt;public class HelloImpl implements Hello {&lt;br /&gt;    public CompletableFuture&amp;lt;String&amp;gt; hello(String greetingMessage) {&lt;br /&gt;          CompletableFuture&amp;lt;String&amp;gt; future = new CompletableFuture&amp;lt;String&amp;gt;();&lt;br /&gt;          future.complete(&quot;Hi.  This a response to the greeting: &quot;+greetingMessage);&lt;br /&gt;          return future;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;With &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Communication_Framework_Project#OSGi_Remote_Services&quot;&gt;ECF's RSA implementation&lt;/a&gt; and &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt;, this timeout will be honored by the underlying distribution system.  That is, if the remote implementation does not return within 20000ms, then the returned CompletableFuture will complete with a TimeoutException. &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#d0e1407&quot;&gt;Async Remote Services&lt;/a&gt; make it very easy for service developers to define, implement, and consume loosely-coupled and dynamic asynchronous remote services.   It also makes asynchronous remote service contracts transport independent, allowing the swapping of &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt; or creating/using custom providers without changes to the service contract.&lt;br /&gt;&lt;br /&gt;For the documented example code, see &lt;a href=&quot;https://github.com/ECF/AsyncRemoteServiceExamples&quot;&gt;here&lt;/a&gt;</description>
	<pubDate>Tue, 12 Jun 2018 17:29:24 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.5.2</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-2</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-5-2</link>
	<description>&lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.2, a bug fix release of Vert.x 3.5.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.5.1, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.5.2 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.2-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.2-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Cedric Brun: Siemens partnering with Obeo on Model Based Systems Engineering solution - a major recognition for OSS Modeling Techs</title>
	<guid isPermaLink="false">http://cedric.brun.io/eclipse/siemens-obeo-partnership</guid>
	<link>http://cedric.brun.io/eclipse/siemens-obeo-partnership/</link>
	<description>&lt;p&gt;You might have already heard the news, earlier this week during &lt;a href=&quot;http://siemensplmconnectionamericas.org/&quot;&gt;Siemens PLM Connection Americas 2018&lt;/a&gt;, Joe Bohman announced that Siemens PLM was partnering with Obeo.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/plmconnection.png&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/plmconnection-mini.png&quot; /&gt;&lt;/a&gt;    
    
&lt;/figure&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://www.plm.automation.siemens.com/en/about_us/newsroom/press/press_release.cfm?Component=261192&amp;amp;ComponentTemplate=822&quot;&gt;complete press release&lt;/a&gt; for more detail but in short: we are working with Siemens with either standard modeling languages, Capella, SysML or tools to support custom process methodologies in order to contribute to the true integration of MBSE - Model Based System Engineering, within the entire product lifecycle.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://www.plm.automation.siemens.com/en/about_us/newsroom/press/press_release.cfm?Component=261192&amp;amp;ComponentTemplate=822&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/siemenspr.png&quot; /&gt;&lt;/a&gt;    
    
&lt;/figure&gt;

&lt;p&gt;This is significant in several ways.&lt;/p&gt;

&lt;p&gt;First it’s another strong data point demonstrating that MBSE is a key enabler in a strategy aiming at enabling multi-domain engineering.&lt;/p&gt;

&lt;p&gt;Second, it’s a public endorsement from one of the top high-tech multinational company that the OpenSource technologies built through the Eclipse Foundation and the Polarsys Working Group, in this case Acceleo, Sirius and Capella are innovation enablers. Our contribution is fundamental to those and as such this clearly strengthen these projects but also our vision and strategy!&lt;/p&gt;

&lt;p&gt;Even more importantly adopters of those technologies will benefit from new integration points and means to leverage their models during the entire product lifecycle, and that’s what modeling is all about: using the model, iterating over it, refining it; as a living artifact, one that is shared and not as something gathering dust in a corner.&lt;/p&gt;

&lt;p&gt;These are pretty exciting prospects ahead, no doubt this will be a central subject during &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;EclipseCon France&lt;/a&gt; next week. Note that we’ll hold a &lt;a href=&quot;https://www.eclipsecon.org/france2018/schedule_item/capella-workshop&quot;&gt;Capella workshop&lt;/a&gt; during the Unconference and that it’s still time to &lt;a href=&quot;https://www.eclipsecon.org/france2018/registration&quot;&gt;register&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;See you next week!&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;&lt;img src=&quot;https://www.eclipsecon.org/france2018/sites/all/themes/solstice/_themes/solstice_eclipsecon_france2018/logo.png&quot; /&gt;&lt;/a&gt;    
    
&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;http://cedric.brun.io/eclipse/siemens-obeo-partnership/&quot;&gt;Siemens partnering with Obeo on Model Based Systems Engineering solution - a major recognition for OSS Modeling Techs&lt;/a&gt; was originally published by Cédric Brun at &lt;a href=&quot;http://cedric.brun.io&quot;&gt;CEO @ Obeo&lt;/a&gt; on June 08, 2018.&lt;/p&gt;</description>
	<pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
	<author>cedric.brun@obeo.fr (Cédric Brun)</author>
</item>
<item>
	<title>Jeremie Bresson: Edit an OpenAPI specification in Eclipse IDE</title>
	<guid isPermaLink="true">http://jmini.github.io/blog/2018/2018-06-08_edit-openapi-files-in-eclipse.html</guid>
	<link>http://jmini.github.io/blog/2018/2018-06-08_edit-openapi-files-in-eclipse.html</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;I am working a lot on the &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot;&gt;OpenAPI Generator&lt;/a&gt; project these days. This means that I need to edit OpenAPI Specification files a lot. A specification file is a &lt;code&gt;*.yaml&lt;/code&gt; file that describes a REST API.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;In Eclipse IDE I have installed the &lt;a href=&quot;https://github.com/RepreZen/KaiZen-OpenApi-Editor&quot;&gt;KaiZen OpenAPI Editor&lt;/a&gt; plugin. This is an Xtext editor that provides everything that you need to be efficient with your OpenAPI specification: outline, code completion, jumps for references, renaming support…​&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;KaiZen OpenAPI Editor for Eclipse IDE&quot; src=&quot;http://jmini.github.io/blog/2018/2018-06-08_kaizen-openapi-editor.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;It can be installed from the &lt;a href=&quot;https://marketplace.eclipse.org/content/kaizen-openapi-editor&quot;&gt;Eclipse Marketplace&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;If you use the Eclipse Installer (also called Oomph), you can add this xml snippet to your &lt;code&gt;installation.setup&lt;/code&gt; file:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 1. Oomph snippet to install the KaiZen OpenAPI Editor
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;setup.p2:P2Task
    xmi:version=&quot;2.0&quot;
    xmlns:xmi=&quot;http://www.omg.org/XMI&quot;
    xmlns:setup.p2=&quot;http://www.eclipse.org/oomph/setup/p2/1.0&quot;&amp;gt;
  &amp;lt;requirement
      name=&quot;com.reprezen.swagedit.feature.feature.group&quot;/&amp;gt;
  &amp;lt;repository
      url=&quot;http://products.reprezen.com/swagedit/latest/&quot;/&amp;gt;
&amp;lt;/setup.p2:P2Task&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;It is free and open-source (EPL). Enjoy.&lt;/p&gt; 
&lt;/div&gt;</description>
	<pubDate>Thu, 07 Jun 2018 22:00:00 +0000</pubDate>
</item>
<item>
	<title>typefox.io: Visualizing npm Package Dependencies with Sprotty</title>
	<guid isPermaLink="false">http://typefox.io/?p=14872</guid>
	<link>http://typefox.io/visualizing-npm-package-dependencies-with-sprotty</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth non-hundred-percent-height-scrolling&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 0px;&quot;&gt;
					&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
						&lt;div class=&quot;fusion-text&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://typefox.io/sprotty-a-web-based-diagramming-framework&quot;&gt;Sprotty&lt;/a&gt; is an open-source diagramming framework that is based on web technologies. I’m excited to announce that it will &lt;a href=&quot;https://projects.eclipse.org/proposals/sprotty&quot;&gt;soon be moved to the Eclipse Foundation&lt;/a&gt;. This step will enable existing visualizations built on the Eclipse Platform to be migrated to cloud IDEs such as &lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-theia&quot;&gt;Eclipse Theia&lt;/a&gt;. But Sprotty is not limited to IDE integrations; it can be embedded in any web page simply by consuming its &lt;a href=&quot;https://www.npmjs.com/package/sprotty&quot;&gt;npm package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I present an application that I implemented with Sprotty: visualizing the dependencies of &lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm packages&lt;/a&gt; as a graph. Of course there are already several solutions for this, but I was not satisfied with their graph layout quality and their filtering capabilities. These are areas where Sprotty can excel.&lt;/p&gt;
&lt;h3&gt;Standalone Web Page&lt;/h3&gt;
&lt;p&gt;The application is available at &lt;a href=&quot;http://npm-dependencies.com/&quot;&gt;npm-dependencies.com&lt;/a&gt;. Its source code is &lt;a href=&quot;https://github.com/TypeFox/npm-dependency-graph&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-08.15.59.png&quot;&gt;&lt;img alt=&quot;Dependency graph of the sprotty package&quot; class=&quot;aligncenter wp-image-14873&quot; height=&quot;243&quot; src=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-08.15.59-300x146.png&quot; width=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The web page offers a search box for npm packages, with package name proposals provided through search requests to the &lt;a href=&quot;https://docs.npmjs.com/misc/registry&quot;&gt;npm registry&lt;/a&gt;. After selecting a package, its metadata is resolved through that same registry and the direct dependencies are shown in the diagram. Further dependencies are loaded by clicking on one of the yet unresolved packages (shown in light blue).&lt;/p&gt;
&lt;p&gt;If you want to see the whole dependency graph at once, click the “Resolve All” button. For projects with many transitive dependencies, this can take quite some time because the application needs to load the metadata of every package in the dependency graph from the npm registry. The resulting graph can be intimidatingly large, as seen below for &lt;a href=&quot;https://www.npmjs.com/package/lerna&quot;&gt;lerna&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2018/06/lerna-dependencies-m-2.png&quot;&gt;&lt;img alt=&quot;The full dependency graph of lerna&quot; class=&quot;aligncenter wp-image-14882&quot; height=&quot;464&quot; src=&quot;http://typefox.io/wp-content/uploads/2018/06/lerna-dependencies-m-2-1024x951.png&quot; width=&quot;499&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is where filtering becomes indispensable. Let’s say we’re only interested in the package &lt;code&gt;meow&lt;/code&gt; and how &lt;code&gt;lerna&lt;/code&gt; depends from it. Enter &lt;code&gt;meow&lt;/code&gt; in the filter box and you’ll see this result:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-08.50.47.png&quot;&gt;&lt;img alt=&quot;Dependency paths from lerna to meow&quot; class=&quot;aligncenter wp-image-14876&quot; height=&quot;410&quot; src=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-08.50.47-1024x600.png&quot; width=&quot;700&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The filtered graph shows the packages that contain the filter string plus all packages that have these as direct or indirect dependencies. Thus we obtain a compact visualization of all dependency paths from &lt;code&gt;lerna&lt;/code&gt; to &lt;code&gt;meow&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint:&lt;/em&gt; If the filter text starts with a space, only packages that have the following text as prefix are selected. If it ends with a space, packages must have the text as suffix. Thus, if the text starts &lt;em&gt;and&lt;/em&gt; ends with a space, only exact matches are accepted.&lt;/p&gt;
&lt;h3&gt;How It Works&lt;/h3&gt;
&lt;p&gt;The basic configuration of the diagram is quite simple and follows the concepts described in the &lt;a href=&quot;https://github.com/theia-ide/sprotty/wiki&quot;&gt;documentation of Sprotty&lt;/a&gt;. Some additional code is necessary to &lt;a href=&quot;https://github.com/TypeFox/npm-dependency-graph/blob/master/depgraph-navigator/src/browser/graph/npm-dependencies.ts&quot;&gt;resolve package metadata from the npm registry&lt;/a&gt; and to &lt;a href=&quot;https://github.com/TypeFox/npm-dependency-graph/blob/master/depgraph-navigator/src/browser/graph/graph-filter.ts&quot;&gt;analyze the graph to apply the selected filter&lt;/a&gt;. A &lt;a href=&quot;https://github.com/TypeFox/npm-dependency-graph/blob/master/depgraph-navigator/src/browser/graph/model-source.ts&quot;&gt;subclass of LocalModelSource&lt;/a&gt; serves as the main API to interact with the graph.&lt;/p&gt;
&lt;p&gt;Automatic layout is provided by &lt;a href=&quot;https://www.npmjs.com/package/elkjs&quot;&gt;elkjs&lt;/a&gt;, a JavaScript version of the &lt;a href=&quot;https://www.eclipse.org/elk/&quot;&gt;Eclipse Layout Kernel&lt;/a&gt;. Here it is configured such that dependency edges point upwards using the &lt;a href=&quot;https://www.eclipse.org/elk/reference/algorithms/org-eclipse-elk-layered.html&quot;&gt;Layered algorithm&lt;/a&gt;. It tries to minimize the number of crossings, though only through a heuristic because that goal &lt;a href=&quot;https://epubs.siam.org/doi/abs/10.1137/0604033&quot;&gt;cannot be satisfied efficiently&lt;/a&gt; (it’s an &lt;em&gt;NP-hard&lt;/em&gt; problem).&lt;/p&gt;
&lt;h3&gt;Integration in Theia&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.npmjs.com/package/depgraph-navigator&quot;&gt;depgraph-navigator&lt;/a&gt; package can be used in a standalone scenario as described above, but it also works as an extension for the &lt;a href=&quot;https://www.theia-ide.org&quot;&gt;Theia IDE&lt;/a&gt;. Once installed in the Theia frontend, you can use this extension by right-clicking the &lt;code&gt;package.json&lt;/code&gt; file of an npm package you are working on and selecting &lt;em&gt;Open With → Dependency Graph&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-09.01.13.png&quot;&gt;&lt;img alt=&quot;The dependency graph view embedded in Theia&quot; class=&quot;aligncenter wp-image-14877&quot; height=&quot;447&quot; src=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-09.01.13-1024x572.png&quot; width=&quot;801&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have already installed the dependencies of your project via &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;, all package metadata are available locally, so they are read from the file system instead of querying the npm registry. The registry is used only as a fallback in case a package is not installed in the local project. This means that resolving further packages is much faster compared to the standalone web page. You can get a full graph view of all dependencies by typing &lt;em&gt;ctrl + shift + A&lt;/em&gt; (&lt;em&gt;cmd + shift + A&lt;/em&gt; on Mac). Again, if the number of dependencies is too large, you probably want to filter the graph; simply start typing a package name to set up the same kind of filter described above for the standalone application (press &lt;em&gt;esc&lt;/em&gt; to remove the filter).&lt;/p&gt;
&lt;h3&gt;Try It!&lt;/h3&gt;
&lt;p&gt;If you haven’t already done it while reading, &lt;a href=&quot;http://npm-dependencies.com/&quot;&gt;try the dependency graph application&lt;/a&gt;. You are welcome to &lt;a href=&quot;http://typefox.io/author/mirospoenemann&quot;&gt;get in touch with me&lt;/a&gt; if you have any questions about Sprotty and how it can help you to build web-based diagrams and visualizations.&lt;/p&gt;
&lt;p&gt;By the way, don’t miss the &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/sprotty-graphical-views-web-applications&quot;&gt;talk on Sprotty at EclipseCon France&lt;/a&gt; that I will do together with Jan next week!&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;

					&lt;/div&gt;
				&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 07 Jun 2018 07:24:03 +0000</pubDate>
</item>
<item>
	<title>EclipseCon France 2018: Download the conference app</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3918 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/download-conference-app</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Explore the program by speaker, tracks (categories) or days. Read the session descriptions and speaker bios and choose your favourites. Download the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.eclipsesource.eclipseconfrance&quot; target=&quot;_blank&quot;&gt;Android&lt;/a&gt; or &lt;a href=&quot;https://itunes.apple.com/us/app/eclipsecon-france-2018/id1388897328?l=de&amp;amp;ls=1&amp;amp;mt=8&quot; target=&quot;_blank&quot;&gt;iOS&lt;/a&gt; versions. Thank you &lt;a href=&quot;https://twitter.com/eclipsesource&quot;&gt;@EclipseSource&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/download-conference-app&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/App.png?itok=bfOUL_RM&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 05 Jun 2018 11:56:53 +0000</pubDate>
</item>
<item>
	<title>EclipseCon France 2018: Meet the research community</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3917 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/meet-research-community</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Tap into the research community at EclipseCon France!&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Visit the Open Research labs exhibit and meet the researchers working in projects ranging from Automotive and IoT to data mining and GDPR compliance (see the whole list below)&lt;/li&gt;
	&lt;li&gt;Get a quick introduction to the projects at the l&lt;a href=&quot;https://www.eclipsecon.org/france2017/session/meet-greet-eclipse-research-project-community&quot;&gt;ightening talks session on Wednesday June 13th&lt;/a&gt;. &lt;/li&gt;
	&lt;li&gt;Visit workshops on GDPR for Engineers and on the AGAIL IoT platform. Test drive Gemoc at the Hackathon. All at the &lt;a href=&quot;https://www.eclipsecon.org/france2018/unconference&quot;&gt;Unconference on June 12&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Learn more about Eclipse Kuksa at the talk, &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/eclipse-kuksa-developing-open-source-connected-vehicle-ecosystem&quot;&gt;Eclipse Kuksa: Developing an open source connected vehicle ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/meet-research-community&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/Research.png?itok=CLmxWFGw&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 05 Jun 2018 10:39:26 +0000</pubDate>
</item>
<item>
	<title>Niko Stotz: Eclipse DemoCamp Photon in Eindhoven on July 4: Platform, Sirius, Xtext, and more!</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=365</guid>
	<link>https://www.nikostotz.de/blog/eclipse-democamp-photon-in-eindhoven-on-july-4-platform-sirius-xtext-and-more/</link>
	<description>&lt;p&gt;
&lt;strong&gt;tl;dr:&lt;/strong&gt; Altran organizes the first Eclipse DemoCamp in Eindhoven to celebrate the Photon Release Train on July 4, 17:00 hrs. &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;Register today&lt;/a&gt; or propose your own talk! So far, we have Obeo talking about Sirus 6, our own Marc Hamilton summarizing lessons learned from 10 years worth of MDE projects, and itemis’ Karsten Thoms and Holger Schill reporting about the latest features of Eclipse Platform 4.8 and Xtext 2.14, respectively.
&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-368&quot; height=&quot;301&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/06/EclipseDemoCampPhoton.png&quot; style=&quot;border: none;&quot; width=&quot;707&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
After hosting the Sirius Day in April, we’re already looking at the next Eclipse event at &lt;a href=&quot;https://www.altran.com/nl/en/&quot;&gt;Altran Netherlands&lt;/a&gt;: We’ll host the first &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;Eclipse DemoCamp in Eindhoven&lt;/a&gt; to &lt;a href=&quot;https://wiki.eclipse.org/Category:Photon&quot;&gt;celebrate the Photon Release Train&lt;/a&gt; on July 4, 17:00 hrs.
&lt;/p&gt;
&lt;p&gt;
We’ll start off at 17:00 hrs with a small dinner, so we all can enjoy the talks without starving. Afterwards, we have a very exiting list of speakers:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
A yet-to-be-decided member of &lt;a href=&quot;https://www.obeo.fr/en/&quot;&gt;Obeo&lt;/a&gt; will tell us about &lt;b&gt;What’s new in Sirius 6&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;Major Changes in Sirius 6:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sirius now supports an optional integration with &lt;a href=&quot;http://www.eclipse.org/elk&quot;&gt;ELK&lt;/a&gt; for improved diagram layouts: specifiers can configure which ELK algorithm and parameters should be used for each of their diagrams, directly inside the VSM (ticket &lt;a href=&quot;http://eclip.se/509070&quot;&gt;#509070&lt;/a&gt;). This is still considered experimental in 6.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new generic edge creation tool is now available on all Sirius diagrams. With it, end users no longer have to select a specific edge creation tool in the palette, but only to choose the source and target elements (ticket &lt;a href=&quot;http://eclip.se/528002&quot;&gt;#528002&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved compatibility with Xtext with an important bug fix (ticket &lt;a href=&quot;http://eclip.se/513407&quot;&gt;#513407&lt;/a&gt;). This is a first step towards a better integration with Xtext, more fixes and improvements will come during the year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is now possible for specifiers to configure the background color of each diagram. Like everything else in Sirius, the color can be dynamic and reflect the current state of the model. (ticket &lt;a href=&quot;http://eclip.se/525533&quot;&gt;#525533&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When developing a new modeler, it is now possible to reload the modeler’s definition (.odesign) from an Eclipse runtime if the definition has changed in the host that launched the runtime. This is similar to “hot code replace” in Java, but for VSMs, and avoids stopping/restarting a new runtime on each VSM change (ticket &lt;a href=&quot;http://eclip.se/522407&quot;&gt;#522407&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the VSM editor, when editing an interpreted expression which uses custom Java services, it is now possible to navigate directly to a service’s source code using F3 (ticket &lt;a href=&quot;http://eclip.se/471900&quot;&gt;#471900&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A more &lt;a href=&quot;https://blog.obeo.fr/what-is-coming-in-sirius-6-0&quot;&gt;visual overview&lt;/a&gt; can be found in the Obeo blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Altran’s own Marc Hamilton shares &lt;b&gt;Altran’s experience developing MDE applications with Eclipse technology&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
    Altran Netherlands develops Eclipse-based model-driven applications for its customers for several years.&lt;br /&gt;
    In this talk, we share our experience with different modeling technologies like &lt;a href=&quot;https://www.eclipse.org/acceleo/&quot;&gt;Acceleo&lt;/a&gt;, &lt;a href=&quot;https://wiki.eclipse.org/OCL&quot;&gt;OCL&lt;/a&gt;, &lt;a href=&quot;https://wiki.eclipse.org/QVTo&quot;&gt;QVTo&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/egf/&quot;&gt;EGF&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Sirius&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/Xtext/&quot;&gt;Xtext&lt;/a&gt;, and others.
    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;What’s new in Xtext 2.14&lt;/b&gt; will be presented by Xtext committer of &lt;a href=&quot;https://www.itemis.com/en/&quot;&gt;itemis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/holgerschill&quot;&gt;Holger Schill&lt;/a&gt;.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Major Changes in Xtext 2.14:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 9 and 10 Support&lt;/li&gt;
&lt;li&gt;JUnit 5 Support&lt;/li&gt;
&lt;li&gt;New Grammar Annotations&lt;/li&gt;
&lt;li&gt;Create Action Quickfix&lt;/li&gt;
&lt;li&gt;Code Mining Support&lt;/li&gt;
&lt;li&gt;New Project and File Wizard&lt;/li&gt;
&lt;li&gt;Improved Language Server Support&lt;/li&gt;
&lt;li&gt;Performance Improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please check the &lt;a class=&quot;external text&quot; href=&quot;https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2018/05/23/version-2-14-0&quot; rel=&quot;nofollow&quot;&gt;Release Notes&lt;/a&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yet another overview by &lt;a href=&quot;https://twitter.com/kthoms&quot;&gt;Karsten Thoms&lt;/a&gt;, of itemis with his talk &lt;b&gt;Approaching Light Speed – News from the Eclipse Photon Platform&lt;/b&gt;.     &lt;/p&gt;
&lt;p&gt;
The Eclipse Photon simultaneous release comes this year with a plethora of new features and improvements that will continue the Eclipse IDE keeping the #1 flexible, scalable and most performing IDE!
&lt;/p&gt;
&lt;p&gt;
This session will give a guided tour through the new features and changes in Eclipse Photon. Due to the vast amount of noteworthy stuff the focus of this talk is on the Eclipse Platform Project, covering JDT only roughly. You will see usability improvements, useful new API for platform developers and neat features for users. Besides visible changes, the platform project team has paid special attention on stability, performance and resource consumption tuning. In this talk, I will give some insights how the team has worked on that.
&lt;/p&gt;
&lt;p&gt;
       Come and see the incredible achievements the platform team and its growing number of contributors made to bring you the best Eclipse IDE ever!
     &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
More talks are in discussion. Please &lt;a href=&quot;mailto:niko.stotz@altran.com&quot;&gt;propose your talk&lt;/a&gt; to us; we’d be especially &lt;b&gt;happy to include more local speakers&lt;/b&gt; in the lineup.
&lt;/p&gt;
&lt;p&gt;
We’ll have a break and some get-together afterwards, so there is plenty of opportunity to get in touch with the speakers and your fellow Eclipse enthusiasts in the region.
&lt;/p&gt;
&lt;p&gt;
The DemoCamp will take place at the Altran office in Eindhoven. Please refer to the Eclipse wiki for &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;all details&lt;/a&gt; and &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;register now&lt;/a&gt; to secure your spot at the first Eclipse DemoCamp in Eindhoven!&lt;/p&gt;</description>
	<pubDate>Mon, 04 Jun 2018 13:52:15 +0000</pubDate>
        <enclosure url="https://www.nikostotz.de/blog/wp-content/uploads/2018/06/EclipseDemoCampPhoton.png" length="2854" type="image/png"/>
</item>
<item>
	<title>Nikhil Nanivadekar: Bag — The Counter</title>
	<guid isPermaLink="false">https://medium.com/p/2689e901aadb</guid>
	<link>https://medium.com/oracledevs/bag-the-counter-2689e901aadb?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/proxy/1*d1FllHC2H0SXv7CK-aV_iQ.png&quot; /&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;https://www.eclipse.org/collections/&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I have often times encountered the necessity to count the number of objects. I have experienced the necessity to count in two flavors, first is to count the number of objects which satisfy a certain criteria and second is to find the number of times a particular object is encountered. In this blog we are going to see how to solve the second problem: Find the number of times a particular object is encountered.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bag (or Multiset):&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Bag is a data structure which you use when you are counting objects by putting in a Map&amp;lt;K, Integer&amp;gt; . A Bag is similar to your shopping bag or grocery bag, wherein you can have one or more occurrences or a particular item in no particular order. So, a Bag is an order independent data structure like a Set, however it allows duplicates.&lt;/p&gt;&lt;p&gt;Let us consider a list of items and you want to count the number of each fruit you have in your list. You can simply group the items and count, JDK has Collectors which do that for you. The code looks like this:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*JFcsY5vECKHJzzxUS3heXA.png&quot; /&gt;Using a Map to count&lt;/figure&gt;&lt;p&gt;“Apple”, “Banana” and “Orange” have a valid count, however, “Grapes” which are not a part of the items the assertion has to be for a null. There by making this implementation not null safe.&lt;/p&gt;&lt;p&gt;Now let us solve the same problem by using an Eclipse Collections Bag in this case. Eclipse Collections has the toBag() API available which returns a Bag.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CqP7n7MbLSjRQRkS4gjwQw.png&quot; /&gt;Using a Bag to count&lt;/figure&gt;&lt;p&gt;Bag has occurrencesOf() API on it which returns the count. The occurrencesOf() API is null safe as can be seen by the assertion for “Grapes”.&lt;/p&gt;&lt;p&gt;In addition to the rich API available on &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html&quot;&gt;RichIterable&lt;/a&gt; , the Eclipse Collections &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; also has more specific and intuitive API like occurrencesOf(), addOccurrences(), topOccurrences(), bottomOccurrences() to name a few.&lt;/p&gt;&lt;p&gt;The Eclipse Collections Bag implementation is called HashBag. A HashBag is backed by an ObjectIntMap&amp;lt;K&amp;gt; from Eclipse Collections itself. The ObjectIntMap is an open address map which has Objects as a Key but the values are primitive ints. This implementation makes the Bag leaner.&lt;/p&gt;&lt;p&gt;Below are a few memory and performance comparisons between JDK 1.8 HashMap and Eclipse Collections 9.2.0 Bag&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Memory Footprint (lower number the better)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This shows the total memory footprint including the constituents of the data structures.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*SuPY8rcEPI7xfahQ4phQMA.png&quot; /&gt;Memory Comparison HashMap&amp;lt;Integer, Integer&amp;gt; vs Eclipse Collections HashBag&amp;lt;Integer&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*2dN20K5t283ieOgf4ja9mw.png&quot; /&gt;Memory Comparison HashMap&amp;lt;String, Integer&amp;gt; vs Eclipse Collections HashBag&amp;lt;String&amp;gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Performance Tests (higher number the better)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;All measurements reported in operations/s.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gjk05HQxUyx5Ft_91oCCiA.png&quot; /&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/493/1*wO1-XOa3W-mmux86fFTVDQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Source code for memory tests and performance tests is available on &lt;a href=&quot;https://github.com/nikhilnanivadekar/MemoryPerformanceTest&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Map&amp;lt;K, Integer&amp;gt; is considered for memory and performance tests instead of Map&amp;lt;K, Long&amp;gt; so that the comparisons are comparable since the Eclipse Collections Bag is backed by an ObjectIntMap&amp;lt;K&amp;gt;. I have verified that the memory footprint for Map&amp;lt;K, Integer&amp;gt; and Map&amp;lt;K, Long&amp;gt; for &lt;em&gt;these&lt;/em&gt; tests was same.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Eclipse Collections HashBag has ~40% smaller memory footprint compared to JDK HashMap.&lt;/li&gt;&lt;li&gt;JDK HashMap performs better for than Eclipse Collections HashBag for add() and look-up operations for sizes less than 40,000 elements.&lt;/li&gt;&lt;li&gt;JDK HashMap and Eclipse Collections HashBag have comparable performance for sizes greater than 40,000 elements.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag performs better than JDK HashMap when adding the same element 10 times.&lt;/li&gt;&lt;li&gt;JDK HashMap performs slightly better than Eclipse Collections HashBag for look-up operations.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag has API which is helpful for Bag (count) specific operations.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag is null safe for cases where a particular object does not exist in the Bag.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Show your support &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;&lt;em&gt;star us on GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Resources:&lt;/strong&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; comes with it’s own implementations of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/list/mutable/FastList.html&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/set/mutable/UnifiedSet.html&quot;&gt;Set&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/map/mutable/UnifiedMap.html&quot;&gt;Map&lt;/a&gt;. It also has additional data structures like &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; and an entire Primitive Collections hierarchy. Each of our collections have a rich API for commonly required iteration patterns.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Source code on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md#eclipse-collections-reference-guide&quot;&gt;Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=2689e901aadb&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/bag-the-counter-2689e901aadb&quot;&gt;Bag — The Counter&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Mon, 04 Jun 2018 13:15:03 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - A First Look at Jakarta EE</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/tAdqAu17Gdk/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/tAdqAu17Gdk/</link>
	<description>This month, read eight great pieces to get informed about various parts of Jakarta EE.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/tAdqAu17Gdk&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 04 Jun 2018 10:40:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x goes Native</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-goes-native</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-goes-native</link>
	<description>&lt;article&gt;&lt;p&gt;I this blog post I would like to give you a preview on native image generation of Vert.x applications using GraalVM.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt; it is possible to generate native executables.
These executables can be directly run without the need of an installed JVM.&lt;/p&gt;
&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The start up time is way faster. It is no longer required to wait for the start up of the JVM. The application is usually up and running in a matter of milliseconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reduced memory footprint. I measured 40 MB memory usage (RSS) for the Vert.x Web application which I’m going to showcase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Smaller Containers. No JVM means no overhead. All the needed parts are already contained within the executable. This can be very beneficial when building deployable container images.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;demo-project&quot;&gt;Demo Project&lt;/h2&gt;
&lt;p&gt;For the demo application I choose a very basic hello world &lt;a href=&quot;https://vertx.io/docs/vertx-web/java/&quot;&gt;Vert.x Web&lt;/a&gt; server.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;package&lt;/span&gt; de.jotschi.examples;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; java.io.File;

&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.Vertx;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.Logger;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.LoggerFactory;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.core.logging.SLF4JLogDelegateFactory;
&lt;span class=&quot;hljs-keyword&quot;&gt;import&lt;/span&gt; io.vertx.ext.web.Router;

&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Runner&lt;/span&gt; &lt;/span&gt;{

    &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;(String[] args)&lt;/span&gt; &lt;/span&gt;{
        &lt;span class=&quot;hljs-comment&quot;&gt;// Use logback for logging&lt;/span&gt;
        File logbackFile = &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; File(&lt;span class=&quot;hljs-string&quot;&gt;&quot;config&quot;&lt;/span&gt;, &lt;span class=&quot;hljs-string&quot;&gt;&quot;logback.xml&quot;&lt;/span&gt;);
        System.setProperty(&lt;span class=&quot;hljs-string&quot;&gt;&quot;logback.configurationFile&quot;&lt;/span&gt;, logbackFile.getAbsolutePath());
        System.setProperty(LoggerFactory.LOGGER_DELEGATE_FACTORY_CLASS_NAME, SLF4JLogDelegateFactory.class.getName());
        Logger log = LoggerFactory.getLogger(Runner.class);

        &lt;span class=&quot;hljs-comment&quot;&gt;// Setup the http server&lt;/span&gt;
        log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Starting server for: http://localhost:8080/hello&quot;&lt;/span&gt;);
        Vertx vertx = Vertx.vertx();
        Router router = Router.router(vertx);

        router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/hello&quot;&lt;/span&gt;).handler(rc -&amp;gt; {
            log.info(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Got hello request&quot;&lt;/span&gt;);
            rc.response().end(&lt;span class=&quot;hljs-string&quot;&gt;&quot;World&quot;&lt;/span&gt;);
        });

        vertx.createHttpServer()
            .requestHandler(router::accept)
            .listen(&lt;span class=&quot;hljs-number&quot;&gt;8080&lt;/span&gt;);

    }

}&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;graalvm&quot;&gt;GraalVM&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM&lt;/a&gt;runs a static analysis on the generated application in order to find the reachable code.
This process which is run within the &lt;a href=&quot;https://github.com/oracle/graal/tree/master/substratevm&quot;&gt;Substrate VM&lt;/a&gt; will lead to the generation of the native image.&lt;/p&gt;
&lt;h3 id=&quot;limitations&quot;&gt;Limitations&lt;/h3&gt;
&lt;p&gt;Due to the nature of the static analysis Substrate VM also has some &lt;a href=&quot;https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md&quot;&gt;limitations&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Dynamic class loading and unloading for example is not supported because this would in essence alter the available code during runtime. &lt;/p&gt;
&lt;p&gt;Reflection is only partially supported and requires some manual steps which we will cover later on.&lt;/p&gt;
&lt;h3 id=&quot;patches-workarounds&quot;&gt;Patches / Workarounds&lt;/h3&gt;
&lt;p&gt;&lt;/p&gt;&lt;div class=&quot;admonition-block note&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;admonition-icon&quot;&gt;&lt;i class=&quot;admonition-icon fa fa-comment&quot;&gt;&lt;/i&gt;&lt;/td&gt;&lt;td class=&quot;content&quot;&gt;&lt;span class=&quot;title&quot;&gt;Work in progress &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;content&quot;&gt; Next we need to apply some patches / workarounds. Keep in mind that native image generation is a fairly new topic and the these workarounds will hopefully no longer be required once the Substrate VM and Netty have better support for each other.&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;I did not manage to get native epoll, kqueue and SSL integration to work with native images.
These parts are heavily optimized within Netty and use JNI to directly access the OS features.
Substrate VM supports JNI and could in theory integrate these native libraries. &lt;/p&gt;
&lt;p&gt;I created a &lt;a href=&quot;https://github.com/Jotschi/vertx-graalvm-native-image-test/tree/netty-native-epoll&quot;&gt;reproducer&lt;/a&gt;
 and an &lt;a href=&quot;https://github.com/oracle/graal/issues/442&quot;&gt;issue&lt;/a&gt; so hopefully these problems can be addressed soon.&lt;/p&gt;
&lt;h3 id=&quot;vert-x-transport&quot;&gt;Vert.x Transport&lt;/h3&gt;
&lt;p&gt;First I needed to patch the &lt;code&gt;io.vertx.core.net.impl.transport.Transport&lt;/code&gt; class in order to prevent the loading of EPoll and KQueue native support. Otherwise Substrate VM will try to load these classes and fail.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-class&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;hljs-title&quot;&gt;Transport&lt;/span&gt; &lt;/span&gt;{
…
  &lt;span class=&quot;hljs-javadoc&quot;&gt;/**
   * The native transport, it may be {@code null} or failed.
   */&lt;/span&gt;
  &lt;span class=&quot;hljs-function&quot;&gt;&lt;span class=&quot;hljs-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;static&lt;/span&gt; Transport &lt;span class=&quot;hljs-title&quot;&gt;nativeTransport&lt;/span&gt;&lt;span class=&quot;hljs-params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class=&quot;hljs-comment&quot;&gt;// Patched: I remove the native transport discovery. &lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// The imports would be picked up by substrate &lt;/span&gt;
    &lt;span class=&quot;hljs-comment&quot;&gt;// and cause further issues. &lt;/span&gt;
    &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;null&lt;/span&gt;;
  }
…
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;netty-ssl&quot;&gt;Netty SSL&lt;/h3&gt;
&lt;p&gt;Native SSL support is another problematic area. I created a patched dummy &lt;code&gt;io.netty.handler.ssl.ReferenceCountedOpenSslEngine&lt;/code&gt; class in order to prevent Substrate VM from digging deeper into the SSL code of Netty.&lt;/p&gt;
&lt;p&gt;Next we need to set up the reflection configuration within &lt;code&gt;reflectconfigs/netty.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Netty uses reflection to instantiate the socket channels. This is done in the ReflectiveChannelFactory. We need to tell Substrate VM how classes of type NioServerSocketChannel  and NioSocketChannel can be instantiated. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;[
  {
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;io.netty.channel.socket.nio.NioSocketChannel&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;methods&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[
      { &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;parameterTypes&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[] &lt;/span&gt;}
    ]
  &lt;/span&gt;},
  {
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;io.netty.channel.socket.nio.NioServerSocketChannel&quot;&lt;/span&gt;&lt;/span&gt;,
    &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;methods&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[
      { &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;name&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;&lt;span class=&quot;hljs-string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/span&gt;, &quot;&lt;span class=&quot;hljs-attribute&quot;&gt;parameterTypes&lt;/span&gt;&quot; : &lt;span class=&quot;hljs-value&quot;&gt;[] &lt;/span&gt;}
    ]
  &lt;/span&gt;}
]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want to learn more about the state of Netty and GraalVM I can recommend this &lt;a href=&quot;https://medium.com/graalvm/instant-netty-startup-using-graalvm-native-image-generation-ed6f14ff7692&quot;&gt;GraalVM Blogpost&lt;/a&gt; by Codrut Stancu.&lt;/p&gt;
&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;
&lt;p&gt;Finally we can build our maven project to generate a shaded jar.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;mvn clean package&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next we need the GraalVM package. You can download it from the &lt;a href=&quot;https://www.graalvm.org/&quot;&gt;GraalVM website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We use the shaded jar as the input source for the &lt;code&gt;native-image&lt;/code&gt; command which will generate the executable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;&lt;span class=&quot;hljs-variable&quot;&gt;$GRAALVMDIR&lt;/span&gt;/bin/native-image \
 --verbose \
 --no-server \
 -Dio.netty.noUnsafe=&lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;  \
 -H:ReflectionConfigurationFiles=./reflectconfigs/netty.json \
 -H:+ReportUnsupportedElementsAtRuntime \
 -Dfile.encoding=UTF-&lt;span class=&quot;hljs-number&quot;&gt;8&lt;/span&gt; \
 -jar target/vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT.jar&lt;/code&gt;&lt;/pre&gt; 

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;
&lt;p&gt;Finally we end up with an 27 MB &lt;code&gt;vertx-graalvm-native-image-test-0.0.1-SNAPSHOT&lt;/code&gt; executable which we can run.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;$ ldd vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT 
  linux-vdso.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007ffc65be8000)
  libdl.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libdl.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e892f0000)
  libpthread.so.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libpthread.so.&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e890d3000)
  libz.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libz.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88eb9000)
  librt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/librt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88cb1000)
  libcrypt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libcrypt.so.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e88a79000)
  libc.so.&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; =&amp;gt; /lib/x86_64-linux-gnu/libc.so.&lt;span class=&quot;hljs-number&quot;&gt;6&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e886da000)
  /lib64/ld-linux-x86-&lt;span class=&quot;hljs-number&quot;&gt;64&lt;/span&gt;.so.&lt;span class=&quot;hljs-number&quot;&gt;2&lt;/span&gt; (&lt;span class=&quot;hljs-number&quot;&gt;0&lt;/span&gt;x00007f8e8afb7000)&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;memory&quot;&gt;Memory&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;hljs bash&quot;&gt;/usr/bin/time &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\nmaxRSS\t%MkB&quot;&lt;/span&gt; java -jar target/vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT.jar 
/usr/bin/time &lt;span class=&quot;hljs-operator&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;hljs-string&quot;&gt;&quot;\nmaxRSS\t%MkB&quot;&lt;/span&gt; ./vertx-graalvm-native-image-test-&lt;span class=&quot;hljs-number&quot;&gt;0.0&lt;/span&gt;.&lt;span class=&quot;hljs-number&quot;&gt;1&lt;/span&gt;-SNAPSHOT&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Native Image: 40 MB&lt;/li&gt;
&lt;li&gt;Java 10: 125 MB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full project can be found on &lt;a href=&quot;https://github.com/Jotschi/vertx-graalvm-native-image-test&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to read more on the topic I can also recommend &lt;a href=&quot;https://sites.google.com/a/athaydes.com/renato-athaydes/posts/a7mbnative-imagejavaappthatrunsin30msandusesonly4mbofram&quot;&gt;this article&lt;/a&gt; by Renato Athaydes in which he demonstrates how to create a very small light weight low memory application using GraalVM.&lt;/p&gt;
&lt;p&gt;Thanks for reading. If you have any further questions or feedback don’t hesitate to send me a tweet to &lt;a href=&quot;https://twitter.com/Jotschi/&quot;&gt;@Jotschi&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: Leaving the Eclipse Foundation</title>
	<guid isPermaLink="false">https://medium.com/p/12148d680894</guid>
	<link>https://medium.com/@roxanne.iot/leaving-the-eclipse-foundation-12148d680894?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;Yes. The rumours are true. I will star in the next Marvel film! Alright, alright. That’s a lie, but it is true that I am leaving my Marketing Specialist position at the Eclipse Foundation after nearly 6 years.&lt;/p&gt;&lt;h3&gt;The beginning&lt;/h3&gt;&lt;p&gt;To be honest, I don’t remember applying for the job. I got an email from someone named Ian Skerrett saying I had an interview. I was like… “What’s the Eclipse Foundation?”. I even had to Google what a “committer” was. To top it off, I got to the headquarters in Ottawa for my interview and the door said to go around the back, but I went the wrong way. I came to a dead end: face-to-face with a fence. I looked at the clock, 2 minutes left. I looked around. Screw it. I threw my high heels and resume over the fence, climbed then jumped over it barefoot in a dress. I got the job!&lt;/p&gt;&lt;p&gt;It has been quite the journey. I have met many great people along the way. I’ve connected with so many smart and talented professionals, I’ve made awesome friends — I even met my now partner Stefan Oehme at EclipseCon Europe. I created and edited the Eclipse Newsletter since 2013; it now has 250,000 subscribers! I helped launch the first EclipseCon France in 2013. In 2016, I moved from Canada to Germany and have been working from home ever since. Finally, I gave my &lt;a href=&quot;https://medium.com/@roxanne.iot/my-first-conference-tech-talk-f73d6625d8ec&quot;&gt;first talk&lt;/a&gt; and coded my first full website in 2017.&lt;/p&gt;&lt;p&gt;All that to say that working at the Eclipse Foundation has shaped who I am today. Roxanne Joncas would be a completely different human being without the influence of all of you.&lt;/p&gt;&lt;h3&gt;Say Goodbye in Person&lt;/h3&gt;&lt;p&gt;I will be at &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;EclipseCon France&lt;/a&gt; on June 13–14 in Toulouse. This will be my 14th and last EclipseCon. Wow. I can’t believe my first EclipseCon was in Boston in 2013. Get your ticket for Toulouse if you want to get one last high five from me!&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://www.eclipsecon.org/2013/&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/318/1*NtcT9OKWG__7YUc_0vVKhw.png&quot; /&gt;&lt;/a&gt;My first EclipseCon&lt;/figure&gt;&lt;h3&gt;Thank you&lt;/h3&gt;&lt;p&gt;I wanted to take the time to write how some of you have influenced me and how I will remember you. Here goes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Sven Efftinge: First community member I remember working with and meeting in person.&lt;/li&gt;&lt;li&gt;Mélanie Bats: Voice your opinion.&lt;/li&gt;&lt;li&gt;Alex Morel: Always be yourself.&lt;/li&gt;&lt;li&gt;Mickael Istria: Passion is important.&lt;/li&gt;&lt;li&gt;Kai Hudalla: Ask questions.&lt;/li&gt;&lt;li&gt;Cédric Brun: Slides/presentations can be fun.&lt;/li&gt;&lt;li&gt;Jonas Helming: Always answer your emails.&lt;/li&gt;&lt;li&gt;Alexandra Schladebeck: Test. Test. Test. + Voice losenges.&lt;/li&gt;&lt;li&gt;Sebastian Zarnekow: Being quiet 99% of the time makes your words more powerful. Silent, but deadly.&lt;/li&gt;&lt;li&gt;Alexander Schmitt: I can speak in public.&lt;/li&gt;&lt;li&gt;Stéphane Bégaudeau: Stranger to friends in 5 seconds.&lt;/li&gt;&lt;li&gt;Tracy Miranda: Work on what you love.&lt;/li&gt;&lt;li&gt;Martin Lippert: Always show up.&lt;/li&gt;&lt;li&gt;Shawn Pearce: Being a ‘’Bored’’ Member can be fun.&lt;/li&gt;&lt;li&gt;Emily Jiang: A smile goes a long way!&lt;/li&gt;&lt;li&gt;Linda Snyder and Carole Garner: Plan. Plan. Plan. Make it seamless for attendees and it’ll be fine, even if it isn’t.&lt;/li&gt;&lt;li&gt;Goulwen Le Fur: A hoodie can be worth more than you think.&lt;/li&gt;&lt;li&gt;Eike Stepper: Badge ribbons are important.&lt;/li&gt;&lt;li&gt;Loredana Chituc: Open your heart.&lt;/li&gt;&lt;li&gt;Chris Aniszczyk: Spelling is important.&lt;/li&gt;&lt;li&gt;Lorenzo Bettini: Italy has a thing for paperwork.&lt;/li&gt;&lt;li&gt;Ivar Grimstad: When in London, eat Indian Food.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;*Note: I didn’t include everyone, because the list would be too long. If your name isn’t up there. It does not mean I don’t like you or won’t remember you!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/300/1*vrQBozVZ9z0V7ddwgVcPKw.gif&quot; /&gt;&lt;/figure&gt;&lt;h3&gt;What next?&lt;/h3&gt;&lt;p&gt;My last day at the Foundation will be mid-August (exact date TBD). Following my departure, I am planning a sweet 4-month break to let all my creative out and learn German at an expert level. I have no idea what 2019 will have in store for me, but I am excited to find out! Ideally, I become as cool as Kate McKinnon in Ghostbusters.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/250/1*fHHv11-Nj03Ye1_AFjJT9Q.gif&quot; /&gt;&lt;/figure&gt;&lt;h3&gt;Not really goodbye&lt;/h3&gt;&lt;p&gt;Obviously, we live on the digital frontier, so it’s not really a farewell. You can:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Follow my current project &lt;a href=&quot;https://www.normalyouare.com/&quot;&gt;Normal You Are&lt;/a&gt;. I will be giving it a lot of love during my break.&lt;/li&gt;&lt;li&gt;Tweet me on the Twitter &lt;a href=&quot;https://twitter.com/roxannejoncas&quot;&gt;@roxannejoncas&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Farewell, my friends. See you out there in the wild!&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/400/1*X--125652vHL40VIFxr6Mg.gif&quot; /&gt;&lt;/figure&gt;&lt;p&gt;&lt;em&gt;Psst: You can apply for my position &lt;/em&gt;&lt;a href=&quot;https://www.linkedin.com/jobs/view/688159040/&quot;&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=12148d680894&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 31 May 2018 16:27:20 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.6.0.AM2 for Eclipse Photon.0.M7</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.6.0.am2-for-photon.0.m7.html</guid>
	<link>https://tools.jboss.org/blog/4.6.0.am2-for-photon.0.m7.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.6.0.AM2 (Developer Milestone 2) build for Eclipse Photon.0.M7.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/photon/4.6.0.AM2.html&quot;&gt;JBoss Tools 4.6.0 AM2&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.6.0.AM2.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;general&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#general&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;eclipse-photon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#eclipse-photon&quot;&gt;&lt;/a&gt;Eclipse Photon&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools is now targeting Eclipse Photon M7.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift&quot;&gt;&lt;/a&gt;OpenShift&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;enhanced-spring-boot-support-for-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#enhanced-spring-boot-support-for-server-adapter&quot;&gt;&lt;/a&gt;Enhanced Spring Boot support for server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Spring Boot runtime was already supported by the OpenShift server adapter. However, it has one major limitation: files and
      resources were synchronized between the local workstation and the remote pod(s) only for the main project. If your Spring Boot
      application had dependencies that were present in the local workspace, any change to a file or resource of one of these dependencies
      was not handled. This is not true anymore.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;camel-rest-dsl-from-wsdl-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#camel-rest-dsl-from-wsdl-wizard&quot;&gt;&lt;/a&gt;Camel Rest DSL from WSDL wizard&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is a new &lt;em&gt;&quot;Camel Rest DSL from WSDL&quot;&lt;/em&gt; wizard. This wizard wraps the &lt;a href=&quot;https://github.com/jboss-fuse/wsdl2rest&quot;&gt;wsdl2rest tool&lt;/a&gt; now included with the Fuse 7 distribution, which
      takes a WSDL file for a SOAP-based (JAX-WS) web service and generates a combination of CXF-generated code and a Camel REST DSL route to make it accessible using REST operations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To start, you need an existing Fuse Integration project in your workspace and access to the WSDL for the SOAP service. Then use
      &lt;em&gt;File→New→Other…​&lt;/em&gt; and select &lt;em&gt;Red Hat Fuse→Camel Rest DSL from WSDL&lt;/em&gt; wizard.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On the first page of the wizard, select your WSDL and the Fuse Integration project in which to generate the Java code and Camel configuration.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;SOAP to REST Wizard page 1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/wsdl2rest-wizard-page-one.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On the second page, you can customize the Java folder path for your generated classes, the folder for the generated Camel file, plus any customization for the SOAP service
      address and destination REST service address.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;SOAP to REST Wizard page 2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools//images/wsdl2rest-wizard-page-two.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Click &lt;em&gt;Finish&lt;/em&gt; and the new Camel configuration and associated Java code are generated in your project. The wizard determines whether your project is Blueprint,
      Spring, or Spring Boot based, and it creates the corresponding artifacts without requiring any additional input. When the wizard is finished, you can open your
      new Camel file in the Fuse Tooling Route Editor to view what it created.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling editor Rest Tab&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools//images/fuse-editor-rest-tab-no-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That brings us to another new functionality, the REST tab in the Fuse Tooling Route Editor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;camel-editor-rest-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#camel-editor-rest-tab&quot;&gt;&lt;/a&gt;Camel Editor REST tab&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Fuse Tooling Route Editor provides a new &lt;em&gt;REST&lt;/em&gt; tab. For this release, the contents of this tab is read-only and includes the following information:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Details for the REST Configuration element including the component (jetty, netty, servlet, etc.), the context path, the port, binding mode (JSON, XML, etc.), and host. There is only one REST Configuration element.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A list of REST elements that collect REST operations. A configuration can have more than one REST element. Each REST element has an associated property page that displays additional details such as the path and the data it consumes or produces.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling Rest Elements Properties View&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools//images/fuse-editor-rest-tab-rest-element-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;A list of REST operations for the selected REST element. Each of the operations has an associated property page that provides details such as the URI and output type.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling Rest Operations Properties View&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools//images/fuse-editor-rest-tab-rest-operation-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For this release, the REST tab is read-only. If you want to edit the REST DSL, use the Route Editor Source tab. When you make changes and save them in the Source tab, the
      REST tab refreshes to show your updates.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 30 May 2018 17:33:01 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus Coding Day 2018</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1099</guid>
	<link>https://papyrusuml.wordpress.com/2018/05/30/papyrus-coding-day-2018/</link>
	<description>&lt;p&gt;In previous posts (&lt;a href=&quot;https://papyrusuml.wordpress.com/toolsmiths-tips-and-tricks/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://papyrusuml.wordpress.com/2018/03/15/some-love-for-toolsmiths/&quot;&gt;here&lt;/a&gt;), I mentioned the increased focus on Papyrus Toolsmiths.&lt;/p&gt;
&lt;p&gt;In this context, the Papyrus development team is putting together a “Papyrus coding day” just before &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;EclipseCon France&lt;/a&gt;.&lt;br /&gt;
During this free coding day, they will provide you with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hands-on sessions to get an insight on Papyrus SDK capabilities&lt;/li&gt;
&lt;li&gt;Discussions with the Papyrus development team&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Registration is mandatory as there is a limit on the number of attendees is limited.&lt;/p&gt;
&lt;p&gt;And rejoice in that attendance is free (and includes coffee and snacks)!&lt;/p&gt;
&lt;p&gt;There are, however, prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Knowledge of Java (at least intermediate level)&lt;/li&gt;
&lt;li&gt;EMF and UML experience is an plus!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So whether you are already invested in Papyrus, just curious, a toolsmith or a hacker, this may be of interest to you!&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&quot;https://papyrusuml.wordpress.com/contact-us/&quot;&gt;contact me&lt;/a&gt; is this is of interest and I will put you in touch with the organizers!&lt;/p&gt;
&lt;h6&gt;(The information you provide will only be used to put you in touch with the organizer and then deleted)&lt;/h6&gt;</description>
	<pubDate>Wed, 30 May 2018 14:50:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Eclipse Target Platform Definition DSL and Generator</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=38920</guid>
	<link>https://eclipsesource.com/blogs/2018/05/30/eclipse-target-platform-definition-dsl-and-generator/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Target Platform definitions are a way to define from where Eclipse-based projects obtain their dependencies. They provide many benefits, but in case you still need more convincing please see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/tutorials/your-first-application-based-on-eclipse-faq/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, defining, updating, and especially applying target platform definitions in Eclipse-based projects has always been extremely cumbersome. There are two main reasons for this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;First&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, typical target platforms are a complex configuration of third-party bundles, which sometimes enhance with custom bundles. If any of those dependencies misbehave, bundles do not fit together, features are misconfigured, or specified source locations (i.e. update sites) are not available and loading the target platform fails. This issue can be mitigated, by mirroring the referenced locations and applying a decent process in terms of versioning. The Eclipse release train helps a lot in defining a compatible set of bundle versions. However, at the end of the day, configuring a functioning target platform is still inherently conceptually complex. If you have ever configured a package.json, you probably agree with this statement.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Second&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, the default tooling for defining a target platform in Eclipse is … let’s phrase it like this: there is room for improvement! Yes, we are talking about this editor:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Target Platform Definition DSL and Generator&quot; class=&quot;alignnone wp-image-38998 size-full&quot; height=&quot;373&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/04/image.png&quot; width=&quot;817&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To this point, there are two major issues. First, the editor triggers the resolving process of the target platform directly on opening – which often takes a long time. Second, you select the contents in a modal dialog, which is not prefilled with the previous selection.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Luckily, there is an alternative to this editor, even without switching your whole toolchain to something like Bnd tools. Michael Barbero has published a simple DSL to specify a target platform and an editor supporting this (see &lt;/span&gt;&lt;a href=&quot;https://github.com/mbarbero/fr.obeo.releng.targetplatform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The tooling provides 4 major features:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Editing the target definition&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Validating a target definition&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Setting the target platform (in the IDE)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Generating a .target file (i.e. original target definition), e.g. to be consumed by a Tycho build.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Editing a target platform is very simple and much more efficient as the default tooling. After installing the tool into your IDE (see &lt;/span&gt;&lt;a href=&quot;https://github.com/mbarbero/fr.obeo.releng.targetplatform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;), simply create an new file (New =&amp;gt; File) and name it like your former .target file using the extension “tpd”, e.g. “mytarget.tpd”. The file will be opened in the corresponding editor, which provides syntax highlighting and auto-completion for the underlying DSL.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Below you find a simple example of a tpd file. The first statement specifies a name. The “with” statement allows you to configure parameters, e.g. whether source bundles are also included in the target platform, use autocompletion and &lt;/span&gt;&lt;a href=&quot;https://github.com/mbarbero/fr.obeo.releng.targetplatform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;these descriptions&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for a detailed overview of the configuration parameters.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Subsequently, you simply need to specify an arbitrary number of source locations (i.e. update sites) and the features/bundles you want to retrieve from those. Please note that after specifying the location, triggering the auto-completion inside the location will show you all available installable units. For every bundle/feature, you can optionally specify a version range. Auto-completion will also assist you in this. Please note, that if you do not specify a version, the latest version will be written to the .target file. If you want to specify “0.0.0” (i.e. latest), you should add “lazy”. If you want to ping the version down, use a range like this: [1.0.0,1.0.0] (for version “1.0.0”).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Target Platform Definition DSL and Generator&quot; class=&quot;alignnone wp-image-38923 size-full&quot; height=&quot;151&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/04/image1.png&quot; width=&quot;490&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please see &lt;/span&gt;&lt;a href=&quot;https://git.eclipse.org/c/emfclient/org.eclipse.emf.ecp.core.git/tree/releng/org.eclipse.emf.ecp.target.rcp/ecp.tpd?h=develop&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for real examples of a tpd file from the EMF Forms project.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;After defining the target platform, you can use the right click actions “Set as Target Platform” (CTRL+R) to apply the definition in our IDE. In our experience, this works much more reliably than triggering it from the default editor.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A very interesting additional feature is to include other .tpd files. This way, you can specify your target in a modular way. A common .tpd file contains all regular dependencies, other .tpd files can include additional dependencies, e.g. for a RAP target based on the regular RCP target (see example below). The include feature makes it much more comfortable to deal with different configurations and maintain several target definitions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Target Platform Definition DSL and Generator&quot; class=&quot;alignnone wp-image-38924 size-full&quot; height=&quot;208&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/04/image2.png&quot; width=&quot;566&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, you still might require a .target file, e.g. for your build. This can be created from the tpd file using the action “Create Target Definition File”, you do not even have to open the .target file. Our recommendation is to make the tpd file authoritative, meaning it only allows modifications here and only generates the .target file if anything has changed. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This can be part of the build, in this case, you can delete the .target file from your repository. Please see &lt;/span&gt;&lt;a href=&quot;https://github.com/mbarbero/fr.obeo.releng.targetplatform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for documentation on how to do this using a headless application. This option has currently one drawback: Tycho resolves the target very early in the build (see &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=353889&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this bug&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;). Therefore, we are not able to trigger the target generation in the same build before Tycho requires the existence of the .target file. A work-around is to separate the target generation and call maven twice (first to generate and then the regular build).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, migration from an existing .target file to tpd is pretty simple. The best way is to open the .target file with a text editor and migrate the xml node containing the installable units and repository urls to the new syntax. Remember to transfer the version ranges and replace version “0.0.0” with lazy. It is worth it to keep the exact same order of repositories and IUs while migrating, because you can then very easily diff the changes on the .target file after generating it from tpd. The only thing which may change is the order of parameters for locations.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Migrating a regular .target file is maybe 15 minutes of work. Subsequently, you might save hours of frustration when working with the default tooling, so in our experience, the migration very quickly pays off. The tooling itself works great and also greatly improves the process of specifying and updating a target platform definition.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As the described tooling is not part of any regular Eclipse package, we have made it part of our &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2015/08/17/introducing-the-eclipsesource-oomph-profile/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EclipseSource Oomph Profile&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, so if you use this, the tool will automatically be included into your IDE.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, we want to thank Mikael Barbero for this great improvement and hereby publicly ask him to consider moving the tool to PDE, or at least make it part of the release train 🙂&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;More information and useful documentation can be found &lt;/span&gt;&lt;a href=&quot;https://github.com/mbarbero/fr.obeo.releng.targetplatform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 30 May 2018 12:20:06 +0000</pubDate>
</item>
<item>
	<title>Nikhil Nanivadekar: UnifiedSet — The Memory Saver</title>
	<guid isPermaLink="false">https://medium.com/p/25b830745959</guid>
	<link>https://medium.com/oracledevs/unifiedset-the-memory-saver-25b830745959?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*d1FllHC2H0SXv7CK-aV_iQ.png&quot; /&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;https://www.eclipse.org/collections/&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;In my previous blog I explained how Eclipse Collections &lt;a href=&quot;https://medium.com/oracledevs/unifiedmap-how-it-works-48af0b80cb37&quot;&gt;UnifiedMap works&lt;/a&gt;. In this blog, we will see how UnifiedSet in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; works.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Unified Set&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections/src/main/java/org/eclipse/collections/impl/set/mutable/UnifiedSet.java&quot;&gt;UnifiedSet&lt;/a&gt; is the Set implementation of Eclipse Collections and is implemented very differently than a JDK HashSet. UnifiedSet is based on principles similar to UnifiedMap.&lt;/p&gt;&lt;p&gt;A JDK java.util.HashSet is backed by a java.util.HashMap. The backing HashMap has a dummy value which is associated with an object in the backing Map: HashMap&amp;lt;E,Object&amp;gt; map ,Object &lt;strong&gt;&lt;em&gt;PRESENT &lt;/em&gt;&lt;/strong&gt;= new Object()&lt;br /&gt;This design leads to HashSet inheriting the behavior of the HashMap. A HashMap is backed by a table of Entry objects. The Entry implementation has hashcode, key, value, next as members, HashMap essentially caches the hashcode of keys. Moreover, due to the dummy value, HashSet ends up using more memory than required.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*8zvhbs6kYpwaiaXilgAk9Q.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;UnifiedSet, on the other hand is implemented as a Set i.e. it does not have any “dummy” empty value objects, it is not backed by table of Entry objects.&lt;br /&gt;UnifiedSet is backed by a flattened array. Each object occupies a slot in the backing array. The flattened array stores only the required objects there by creating a leaner implementation. Having objects in a flattened array, enhances the performance for iterations as well. Collisions in the main array are handled by putting a special object called ChainedBucket. The ChainedBucket is another array where the colliding elements are stored.&lt;/p&gt;&lt;p&gt;Look up patterns like contains in the UnifiedSet use a standard &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections/src/main/java/org/eclipse/collections/impl/set/mutable/UnifiedSet.java#L214&quot;&gt;hashcode index algorithm&lt;/a&gt; to find the location of the element. If the element at the index is &lt;em&gt;not &lt;/em&gt;a ChainedBucket then simply the existence of the element is examined. If the element at the index is a ChainedBucket then the backing array is evaluated linearly to find the required element.&lt;/p&gt;&lt;p&gt;Since UnifiedSet does not cache the hashcode, for each look up, hashcode needs to be computed. So, the performance of UnifiedSet is directly dependent on the hashcode implementation of the object in the UnifiedSet.&lt;/p&gt;&lt;p&gt;Below are a few memory and performance comparisons between JDK 1.8 HashSet and Eclipse Collections 9.2.0 UnifiedSet.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Memory Footprint (lower number the better)&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/868/1*RaeZSBkFJLxtRfUtQlk99Q.png&quot; /&gt;Memory Comparison HashSet&amp;lt;Integer&amp;gt; vs UnifiedSet&amp;lt;Integer&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/867/1*a0VLNvKWyegOTQNervYqTw.png&quot; /&gt;Memory Comparison HashSet&amp;lt;String&amp;gt; vs UnifiedSet&amp;lt;String&amp;gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Performance Tests (higher number the better)&lt;/strong&gt;&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*BehsghFNKuNuW8tQp1RfYw.png&quot; /&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*hdat9QVech7L_4M-bizY4w.png&quot; /&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/493/1*wO1-XOa3W-mmux86fFTVDQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Source code for memory tests and performance tests is available on &lt;a href=&quot;https://github.com/nikhilnanivadekar/MemoryPerformanceTest&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Eclipse Collections UnifiedSet has ~75% smaller memory footprint compared to JDK HashSet.&lt;/li&gt;&lt;li&gt;JDK HashSet performs slightly better than Eclipse Collections UnifiedSet for add() Operation.&lt;/li&gt;&lt;li&gt;Performance for JDK HashSet and Eclipse Collections UnifiedSet is similar for contains() Operation.&lt;/li&gt;&lt;li&gt;Eclipse Collections UnifiedSet performs better than JDK HashSet for forEach() Operation.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Resources:&lt;/strong&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; comes with it’s own implementations of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/list/mutable/FastList.html&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/set/mutable/UnifiedSet.html&quot;&gt;Set&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/map/mutable/UnifiedMap.html&quot;&gt;Map&lt;/a&gt;. It also has additional data structures like &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; and an entire Primitive Collections hierarchy. Each of our collections have a rich API for commonly required iteration patterns.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Source code on GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md#eclipse-collections-reference-guide&quot;&gt;Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Show your support &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;&lt;em&gt;star us on GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=25b830745959&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/unifiedset-the-memory-saver-25b830745959&quot;&gt;UnifiedSet — The Memory Saver&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Tue, 29 May 2018 14:32:07 +0000</pubDate>
</item>

</channel>
</rss>
