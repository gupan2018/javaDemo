<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Benjamin Cabe: Eclipse Kura on Steroids with UPM and Eclipse OpenJ9</title>
	<guid isPermaLink="false">https://blog.benjamin-cabe.com/?p=3216</guid>
	<link>http://feedproxy.google.com/~r/benjamin-cabe-planet-eclipse/~3/vZ8M47DyuS8/eclipse-kura-on-steroids-with-upm-and-eclipse-openj9</link>
	<description>&lt;p&gt;&lt;em&gt;So it‚Äôs been a while since the last time I blogged about a cool IoT demo‚Ä¶ Sorry about that! On the bright side, this post covers a couple projects that are really, really, neat so hopefully, this will help you forgive me for the wait!¬†&lt;/em&gt;&lt;img alt=&quot;üôÉ&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/2.4/72x72/1f643.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;UP Squared Grove IoT Development Kit&lt;/h2&gt;
&lt;p&gt;At the end of last year, a new high-performance IoT developer kit was &lt;a href=&quot;https://software.intel.com/en-us/articles/announcing-arduino-create-support-for-intel-based-platforms-and-the-up-squared-grove-iot&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;announced&lt;/a&gt;. Built on top of the &lt;a href=&quot;http://www.up-board.org/upsquared/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;UP Squared board&lt;/a&gt;, it features an Intel Apollo lake x86-64 processor, plenty of GPIOs, two Ethernet interfaces, USB 3.0 ports, an Altera MAX 10 FPGA, and more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/bazaar613193_img_4445a.jpg&quot;&gt;&lt;img alt=&quot;The UP Squared Grove IoT Development Kit&quot; class=&quot;aligncenter wp-image-3221 size-large&quot; height=&quot;356&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/bazaar613193_img_4445a-1024x768.jpg&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Of course, it wouldn‚Äôt be a &lt;em&gt;Grove&lt;/em&gt;¬†kit without the Grove shield that can be attached on top of the board to simplify the connection to a wide variety of sensors and actuators (and there‚Äôs actually a few of them in the kit).&lt;/p&gt;
&lt;h2&gt;Running Eclipse Kura on the UP Squared board&lt;/h2&gt;
&lt;p&gt;Enough with the hardware! With all this horsepower, it is of course very tempting to run Eclipse Kura on this. The UP Squared being based on an Intel x86-64 processor, it is incredibly easy to start by replacing the default OpenJDK JVM by &lt;strong&gt;&lt;a href=&quot;https://www.eclipse.org/openj9/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse OpenJ9&lt;/a&gt;&lt;/strong&gt;.¬† Here‚Äôs your two-step tutorial to get Eclipse OpenJ9 and Eclipse Kura running on your board:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download a ready-to-use build from &lt;a href=&quot;https://adoptopenjdk.net/nightly.html?variant=openjdk9-openj9&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;AdoptOpenJDK&lt;/a&gt; and use the &lt;a href=&quot;https://blog.benjamin-cabe.com/2016/04/05/installing-the-zulu-open-source-java-virtual-machine-on-raspberry-pi&quot;&gt;update-alternatives utility&lt;/a&gt; to set OpenJ9 as your default java executable.&lt;/li&gt;
&lt;li&gt;Get the &lt;a href=&quot;https://ci.eclipse.org/kura/job/kura-develop/lastSuccessfulBuild/artifact/kura/distrib/target/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;latest nightly build of the Kura UP Squared Debian package&lt;/a&gt; from Jenkins, and install it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you are wondering how much faster OpenJ9 is compared to OpenJDK or Oracle‚Äôs JVMs, here‚Äôs a quick comparison of the startup time of Eclipse Kura on the UP Squared:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/kura-startup-time.png&quot;&gt;&lt;img alt=&quot;Eclipse Kura start-up time on Intel UP Squared Grove kit&quot; class=&quot;aligncenter wp-image-3230 size-large&quot; height=&quot;146&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/kura-startup-time-1024x315.png&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;UPM&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;UPM logo&quot; class=&quot;size-full wp-image-3236 alignright&quot; height=&quot;71&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/logo.png&quot; width=&quot;288&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://upm.mraa.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;UPM&lt;/a&gt;&lt;/strong&gt; is a set of libraries for interacting with sensors and actuators in a cross-platform, cross-OS, language-agnostic, way.&lt;/p&gt;
&lt;p&gt;There are &lt;strong&gt;over 400 sensors &amp;amp; actuators supported in UPM&lt;/strong&gt;. Virtually all the ‚ÄúDIY‚Äù sensors you can get from SeeedStudio, Adafruit, etc. are supported, but beyond that, UPM also provides support for a wide variety of industrial sensors.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/upm-website.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter wp-image-3223 size-large&quot; height=&quot;302&quot; src=&quot;https://blog.benjamin-cabe.com/wp-content/uploads/2018/06/upm-website-1024x653.png&quot; width=&quot;474&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks to Eclipse &lt;strong&gt;Kura Wires&lt;/strong&gt; and &lt;a href=&quot;https://eclipse.github.io/kura/devices/1-driver-and-assets.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;the underlying concept of ‚ÄúDrivers‚Äù and ‚ÄúAssets‚Äù&lt;/a&gt;, Kura provides a way to access physical assets in a generic way.&lt;/p&gt;
&lt;p&gt;In the next section, we will see a proof-of-concept of UPM libraries being wrapped as Kura ‚Äúdrivers‚Äù in order to make it really simple to interact with the 400+ kind of sensors/actuators supported by UPM.&lt;/p&gt;
&lt;h2&gt;Integrating UPM in Kura Wires&lt;/h2&gt;
&lt;p&gt;UPM drivers are small native C/C++ libraries that expose bindings in several programming languages, including Java, and therefore calling UPM drivers from Kura is pretty simple.&lt;/p&gt;
&lt;p&gt;The only thing you need is a few JARs for UPM itself (and for MRAA, the framework that is supporting it), the JARs for the driver(s) of the particular sensor(s) you want to use, and the associated native libraries¬†(&lt;code&gt;.so&lt;/code&gt; files) for the above. As you may know, OSGi makes it pretty easy to package native libraries that may go alongside Java/JNI libraries, so there is really no difficulty there.&lt;/p&gt;
&lt;p&gt;In order for the UPM drivers to be accessible from Kura Wires, and to expose ‚Äúchannels‚Äù corresponding to the methods available on them, they need to be bundled as &lt;a href=&quot;http://download.eclipse.org/kura/docs/api/3.2.0/apidocs/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kura Drivers&lt;/a&gt;. This is also a pretty straightforward task, and while I created the driver for only a few sensor types out of the 400+ supported in UPM, I am pretty confident that Kura drivers can be automatically generated from UPM drivers.&lt;/p&gt;
&lt;p&gt;You can find the final result on my Github:¬†&lt;a href=&quot;https://github.com/kartben/org.intellabs.upm&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/kartben/org.intellabs.upm&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;See it in action!&lt;/h2&gt;
&lt;p&gt;So what do we end up getting, and why should you care? Just check out the video below and see for yourself!&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;L‚Äôarticle &lt;a href=&quot;https://blog.benjamin-cabe.com/2018/06/21/eclipse-kura-on-steroids-with-upm-and-eclipse-openj9&quot; rel=&quot;nofollow&quot;&gt;Eclipse Kura on Steroids with UPM and Eclipse OpenJ9&lt;/a&gt; est apparu en premier sur &lt;a href=&quot;https://blog.benjamin-cabe.com&quot; rel=&quot;nofollow&quot;&gt;Benjamin Cab√©&lt;/a&gt;.&lt;/p&gt;
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/benjamin-cabe-planet-eclipse/~4/vZ8M47DyuS8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 21 Jun 2018 10:28:17 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF Photon supports OSGi R7 Async Services - part 2</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-5952899420541319963</guid>
	<link>http://eclipseecf.blogspot.com/2018/06/ecf-photon-supports-osgi-r7-async.html</link>
	<description>In a &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/05/ecf-photon-supports-osgi-async-intent.html&quot;&gt;previous post&lt;/a&gt;, I described a usage of &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#d0e1407&quot;&gt;OSGi R7's Async Remote Services&lt;/a&gt;.  This specification makes it easy to define, implement and use non-blocking remote services.    ECF's implementation allows the use of pluggable transports...known as &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Here's a partial list of distribution providers:&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://www.eclipse.org/ecf/downloads.php&quot;&gt;R-OSGi&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.eclipse.org/ecf/downloads.php&quot;&gt;ECF generic&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JMS&quot;&gt;JMS/ActiveMQ&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/XmlRpcProvider&quot;&gt;XML-RPC&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/HazelcastProvider&quot;&gt;Hazelcast&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/Mqtt-Provider&quot;&gt;MQTT&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JaxRSProviders&quot;&gt;Jax-RS Jersey&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JaxRSProviders&quot;&gt;Jax-RS CXF&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/JGroups&quot;&gt;JavaGroups&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/ECF/Py4j-RemoteServicesProvider&quot;&gt;Python.Java (Supports async remote services between Java and Python with protocol buffers serialization)&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;¬†It's also straightforward to creation your own distribution provider, using private or legacy transport and/or serialization.  This can be done by extending one of the distribution providers above or creating a new one.&lt;br /&gt;&lt;br /&gt;Most of these distribution providers have updated¬†&lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Communication_Framework_Project#Tutorials&quot;&gt;examples and/or tutorials&lt;/a&gt;, and many of them now have templates included in the &lt;a href=&quot;https://wiki.eclipse.org/Bndtools_Support_for_Remote_Services_Development&quot;&gt;Bndtools (4.0+) Support&lt;/a&gt; added for Photon.&lt;br /&gt;&lt;br /&gt;Separating the remote service contract from the underlying distribution provider via OSGi remote services allows implementers and consumers to create, debug, and test remote services without being bound to a single transport, while still allowing consistent (specified) runtime behavior.&lt;br /&gt;&lt;br /&gt;For more info and links, please see the &lt;a href=&quot;https://www.eclipse.org/ecf/NewAndNoteworthy.html&quot;&gt;New and Noteworthy&lt;/a&gt;.</description>
	<pubDate>Wed, 20 Jun 2018 18:30:29 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>itemis: 4+1 = CAFEBABE: Java Bytecode in Eclipse</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/java-bytecode-in-eclipse</guid>
	<link>https://blogs.itemis.com/en/java-bytecode-in-eclipse</link>
	<description>&lt;p&gt;What might itemis staff do on their project-free 4 + 1 day? They continue their education, often by working on their own ideas; I would like to introduce just such a project today. The goal was to build familiarity with Xtext and Xtend. The result is a &lt;strong&gt;J&lt;/strong&gt;ava &lt;strong&gt;B&lt;/strong&gt;yte &lt;strong&gt;C&lt;/strong&gt;ode (JBC) Editor based on these technologies.&lt;br /&gt;¬†&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;HelloWorldInJBC-1&quot; height=&quot;487&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/HelloWorldInJBC-1.png?t=1529564307818&amp;amp;width=660&amp;amp;height=487&amp;amp;name=HelloWorldInJBC-1.png&quot; style=&quot;width: 660px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;¬†&lt;br /&gt;Xtext is above all an Eclipse-based framework for creating textual DSLs and generating tools for them, while Java bytecode stored in &lt;code style=&quot;font-size: 16px;&quot;&gt;.class&lt;/code&gt; files is binary. What appears out-of-scope at first is easy to manage with one or two tricks.&lt;/p&gt; 
&lt;p&gt;Without going into too much detail here, the most important part is replacing the &lt;code&gt;IDocumentProvider&lt;/code&gt; of the editor. This converts binary data both when reading text and writing back to binary format. In a future article I'll go into more detail about the technique, but today will just stick to the use and functionality of the Java bytecode editor.&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Motivation&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;Why might you be interested in the contents of &lt;code&gt;.class&lt;/code&gt; files and using an editor on them? In most projects the Java code itself is interesting, but not what the compiler makes of it. But there are cases in which a viewer and possibly an editor for the binary data could be helpful.&lt;/p&gt; 
&lt;p&gt;For example, anyone who writes their own compiler and designs a language for the Java Virtual Machine that compiles to bytecode will probably benefit if they can see the output of their tool. The same use case might arise with tool manufacturers who instrument bytecodes to allow, for example, tracing or profiling.&lt;/p&gt; 
&lt;p&gt;For anyone working on frameworks that dynamically create bytecode it might also be helpful to look at the code of existing classes, or to manually modify their code to observe the effects in real time before casting them into code.&lt;/p&gt; 
&lt;p&gt;Last but not least, an eager student who might want to look a little deeper into the technique could find it interesting and educational to see how the JVM gets its code.¬†&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Installation&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;You can get an idea of the possibilities most easily by installing and trying out our Java bytecode editor. Just go to the following update site in Eclipse under &lt;code&gt;Help -&amp;gt; Install New Software‚Ä¶&lt;/code&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;http://download.itemis.com/jbc/updates/&quot;&gt;http://download.itemis.com/jbc/updates/&lt;/a&gt;&lt;/span&gt;&lt;/p&gt; 
&lt;p&gt;Install the JBC feature, confirm the license (EPL) and restart.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;InstallJBC-1&quot; height=&quot;736&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/InstallJBC-1.png?t=1529564307818&amp;amp;width=660&amp;amp;height=736&amp;amp;name=InstallJBC-1.png&quot; style=&quot;width: 660px;&quot; width=&quot;660&quot; /&gt;¬†&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;Open the editor&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;To open the &lt;code&gt;.class&lt;/code&gt; file associated with a &lt;code&gt;.java&lt;/code&gt; file, an &lt;code&gt;Open JBC&lt;/code&gt; entry is provided in the Package and Project Explorer context menu. Executing this opens a new editor that displays the bytecode as a DSL.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;OpenJBCFromJava-1&quot; height=&quot;390&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/OpenJBCFromJava-1.png?t=1529564307818&amp;amp;width=660&amp;amp;height=390&amp;amp;name=OpenJBCFromJava-1.png&quot; style=&quot;width: 660px;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;¬†&lt;br /&gt;You can of course open &lt;code style=&quot;font-size: 16px;&quot;&gt;.class&lt;/code&gt; file directly with an editor. This is done as usual in Eclipse via the context menu using the command &lt;code style=&quot;font-size: 16px;&quot;&gt;Open With -&amp;gt; JBC Editor.&lt;br /&gt;&lt;/code&gt;¬†&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;OpenJBCFromClass-1&quot; height=&quot;460&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/OpenJBCFromClass-1.png?t=1529564307818&amp;amp;width=660&amp;amp;height=460&amp;amp;name=OpenJBCFromClass-1.png&quot; style=&quot;width: 660px;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;¬†&lt;/p&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Editing the bytecode&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;The editor displays each byte as a hexadecimal number. The only exception is UTF8 strings, which are represented as they are in Java; this is to provide enhanced editability. Changing a string value is as easy as it is in Java code. The data is enriched with keywords and grouping brackets to highlight its meaning. The presentation corresponds directly to what you can get from the &lt;a href=&quot;https://docs.oracle.com/javase/specs/jls/se8/jls8.pdf&quot;&gt;Java Spec&lt;/a&gt; via the ClassFile format.&lt;/p&gt; 
&lt;p&gt;You can generally navigate within the code using &lt;code&gt;F3 / Ctrl + Click&lt;/code&gt;. This allows you to follow references easily, which are represented by two bytes in most cases. If occurrence marking is activated the target under the cursor will be highlighted.&lt;br /&gt;¬†&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;OccurenceMarking&quot; height=&quot;135&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/OccurenceMarking.png?t=1529564307818&amp;amp;width=660&amp;amp;height=135&amp;amp;name=OccurenceMarking.png&quot; style=&quot;width: 660px;&quot; width=&quot;660&quot; /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;p&gt;In the bytecode the length of a table is display before each table. This length must be adjusted if entries are deleted or added using the editor. The editor therefore offers validation that compares the actual lengths of tables with their specified lengths. If they do not match they are highlighted as errors and can be adjusted via Quick Fix &lt;code&gt;(Ctrl + 1)&lt;/code&gt;.&lt;br /&gt;¬†&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Validation-1&quot; height=&quot;248&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Validation-1.png?t=1529564307818&amp;amp;width=660&amp;amp;height=248&amp;amp;name=Validation-1.png&quot; style=&quot;width: 660px;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;¬†&lt;br /&gt;Information displayed by hovering, together with the outline, can provide further understanding of the bytecode. The elements from the editor are also shown here, but with resolved references and interpreted values. For example, any access modifiers of a class are displayed textually rather than as a hexadecimal number, as in the editor.&lt;br /&gt;¬†&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;Outline&quot; height=&quot;175&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Outline.png?t=1529564307818&amp;amp;width=660&amp;amp;height=175&amp;amp;name=Outline.png&quot; style=&quot;width: 660px;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;¬†&lt;/p&gt; 
&lt;p&gt;To get an initial feel for the editor, try the following:&lt;/p&gt; 
&lt;ol&gt; 
 &lt;li&gt;&lt;span&gt;Create a ‚ÄòHello World‚Äô program&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;Run it and observe its output&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;Open the JBC editor&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;Change the string constant that contains the output text&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;Save to the JBC editor&lt;/span&gt;&lt;/li&gt; 
 &lt;li&gt;&lt;span&gt;Run the program again and observe the output&lt;/span&gt;&lt;/li&gt; 
&lt;/ol&gt; 
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The source code&lt;/span&gt;&lt;/h2&gt; 
&lt;p&gt;This project was implemented quickly thanks to Xtext. It could be extended with many more features that you might find useful: extended validations, better auto-completion, templates, refactorings, a formatter and more. All these could be added with minimal effort, or at least significantly less effort than would be involved in writing an Eclipse plug-in with plain Java. If your appetite is whetted you can also look at the &lt;a href=&quot;https://github.com/itemis/jbc&quot;&gt;source code&lt;/a&gt; on GitHub.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fjava-bytecode-in-eclipse&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 20 Jun 2018 16:00:00 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>Maximilian and Jonas: Welcome (at Eclipse), Theia!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39637</guid>
	<link>https://eclipsesource.com/blogs/2018/06/20/welcome-at-eclipse-theia/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Although there hasn‚Äôt yet been a big official announcement (except &lt;a href=&quot;https://typefox.io/theia-may-2018-update&quot;&gt;Svens blog last week&lt;/a&gt;), one of the most interesting Eclipse project proposals in recent years was approved a couple of weeks ago. So what is this all about? In a nutshell, it is a new platform to build modern IDEs and tools based on web technologies. It was open source and available before it even became an Eclipse project. However, the move to the Eclipse ecosystem is a good opportunity to have a closer look at this very promising project.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Welcome (at Eclipse), Theia!&quot; class=&quot;size-medium wp-image-39638 aligncenter&quot; height=&quot;207&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/06/image3-300x207.png&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;According to the hypothesis, &lt;/span&gt;&lt;b&gt;‚ÄúTheia‚Äù&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; collided with earth 4.5 billion years ago&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;What is Theia?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Theia is a platform based on modern web technologies (TypeScript, HTML and CSS) to build IDEs and tools. Those tools can run as desktop applications or in the browser. Besides that, the scope is pretty much like the classic Eclipse Platform and the Eclipse Tools platform. Such a tool platform aims at two generic goals:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The first goal&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is to provide common features, which can be reused to implement a custom tool as efficiently as possible. Some good examples for this feature are support for Git or a source code editor with syntax highlighting. These reusable features significantly lower the required effort for the implementation of a custom tool or IDE.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The second goal&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is providing mechanisms to integrate existing and new modules to a custom product, e.g. ‚Äúan IDE for TypeScript developers‚Äù. This integration must be supported on both a technical level as well as from a UI perspective. This allows you to create a custom product by combining existing modules with custom extensions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Theia in particular adds a &lt;/span&gt;&lt;b&gt;third goal&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which could be called the ‚Äúunique selling point‚Äù: A platform for building tools as desktop-apps &lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;and&lt;/span&gt;&lt;/i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; web-apps at the same time sharing the same code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To achieve the first two goals, Theia provides three main features:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;A basic workbench frame&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; including menus, a status bar, a view concept, part layouting, a workspace abstraction, etc.. This basic workbench can be extended with custom UI extensions, such as menu items, custom views, and custom editors.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;A modular extension mechanism&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, allowing you to implement features in a modular, reusable and combinable way. Those extension can target the frontend, the backend, or both. This extension mechanism also allows the user to install new features.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Common tool features to be reused&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, e.g. an integrated source code editor supporting LSP, support for the most important Git features, a terminal and many more&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To target the third goal ‚Äì the ability to run a tool on the desktop and as a web application ‚Äì&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Theia consists of two parts, a client (the UI) and a server. In a local, desktop scenario, the server part is deployed locally. Theia is implemented in Typescript, CSS, and HTML. When running a Theia-based tool on the desktop, Electron is used as a local replacement for the Browser.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Welcome (at Eclipse), Theia!&quot; class=&quot;alignnone size-medium wp-image-39639&quot; height=&quot;300&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/06/BlogPost-1-274x300.png&quot; width=&quot;274&quot; /&gt;¬† ¬† ¬†&lt;img alt=&quot;Welcome (at Eclipse), Theia!&quot; class=&quot;alignnone size-medium wp-image-39640&quot; height=&quot;300&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/06/BlogPost2-246x300.png&quot; width=&quot;246&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The same tool based on &lt;/span&gt;&lt;b&gt;Theia&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, running as a &lt;/span&gt;&lt;b&gt;desktop&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; application and in the &lt;/span&gt;&lt;b&gt;browser&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Yet another Web IDE?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There are several similar approaches out there already, some commercial and some open source. So why is there yet another Web IDE? The combination of several interesting features make Theia unique in the market. To pick the most relevant ones from our point of view:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;b&gt;Web AND desktop-based: &lt;span style=&quot;font-weight: 400;&quot;&gt;Theia as a platform supports the use case to run tools in the cloud (access via a browser), but also, at the same time, on the desktop (via Electron). This is a very unique and interesting feature, as it provides a lot of flexibility when it comes to use cases for tools created based on Theia.&lt;/span&gt;&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Do not reinvent the wheel:&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Theia reuses other frameworks, standards and technologies wherever it makes sense to do so. Otherwise, the project would not have evolved so quickly. As an example, Theia reuses the Monaco code editor of VS Code and makes strong use of the language server protocol (LSP).&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;For IDEs (not only code editors):&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Theia does not aim at being a simple code editor, but rather being a platform to create comprehensive tool-suites and integrated development environments (IDEs)&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Extension first:&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Theia is meant as a platform, not as a tool itself. This leads to a consistent ‚Äúextension first‚Äù approach, which basically means: Everything is an extension, even the core features, which are provided by the project itself. As a result, you can customize almost everything within Theia and even replace core features, if you like. This is an important ‚Äúlesson learned‚Äù from the Eclipse rich-client platform. &lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Promising community:&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; The project has currently a lot of traction and many of the key players in the Eclipse ecosystem have started to adopt, contribute, or evaluate Theia (see the next section). Eclipse itself could never have been as successful as it is without its excellent ecosystem. Therefore, building a strong ecosystem around a technology such as Theia is the key to success.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Where does it come from?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One very interesting aspect about Theia is that from the beginning it has not been a single-vendor driven project. The initial idea and scope has been discussed with member companies such as Ericsson, Codenvy, Intel, Obeo, RedHat, and Eclipse. If you look at the list of interested parties in the &lt;/span&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-theia&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;project proposal&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and the &lt;/span&gt;&lt;a href=&quot;https://github.com/theia-ide/theia/graphs/contributors&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;list of 40 contributors&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, you will immediately see, that Theia is not a one-man show. In any case, credits go to TypeFox and Ericsson for getting the ball rolling on this endeavour one year ago. The broad variety of interested parties also differentiates Theia from other approaches mentioned in the section before.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;What is the current state?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Theia is far from being as feature-rich as the Eclipse desktop ecosystem. This is kind of obvious, as the project was only incepted a year ago. However, Theia reuses existing components wherever this makes sense, rather than reinventing them from scratch. A good example of this is seen in the Monaco Code editor, which has its origin in VS Code and is also embedded into Theia. Another example is the focus on LSP, which allows you to reuse existing language servers. Therefore, Theia is already quite powerful for its age as a platform.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Although Theia is currently in the ‚Äúearly adopter‚Äù stage, which often means that something is not ready to be used, Theia has already been successfully used as a basis for products such as &lt;/span&gt;&lt;a href=&quot;https://github.com/theia-ide/yangster&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Yangster&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and we have already successfully adopted Theia for a couple of customer projects. It has been open source and available before even becoming an Eclipse project. Whatever is currently in Theia works pretty well in our experience. However, not ‚Äúeverything‚Äù is available from desktop Eclipse.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;How is it different from classic Eclipse?&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The most obvious difference is the technology stack. While Eclipse is implemented based on Java, SWT and uses OSGi as a module system, Theia is implemented in TypeScript uses HTML and CSS for the UI and provides its own extension mechanism based on npm. Therefore, if your UI is implemented in SWT, you cannot simply migrate it to Theia. However, there are several strategies to reuse existing tool components in Theia. One example is to embed existing components, e.g. a compiler into the server part of Theia and embed their results into the UI. The most prominent example is using a Language Server (LSP), which operates exactly like this. Another technique is to avoid manually written SWT code and use declarative approaches such as &lt;/span&gt;&lt;a href=&quot;http://www.eclipse.org/ecp/emfforms/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://jsonforms.io/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, the more interesting question is whether you would like to migrate to Theia. First of all, you should evaluate, whether you would benefit from a web-based solution, see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2018/06/19/web-based-vs-desktop-based-tools/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here for more details&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. Second, there is no rush if you have an existing tool. If you look at how long tools took to migrate to Eclipse 4, it is clear, that not everything is re-implemented over night. This is especially true for tools that typically have a long life cycle. Many projects could benefit from a more modern UI stack, but not enough to justify the efforts of an intermediate migration.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, it makes sense to develop a strategy for the future, as pointed out &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2018/06/19/web-based-vs-desktop-based-tools/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Which platform to use for new projects also depends on the use case you would like to implement. Although we like Theia a lot, it does not yet have a successful 17 year track record like desktop Eclipse does and obviously, Eclipse has had quite a head start in terms of supported features.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Conclusion&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So, Theia is not the next version of Eclipse and not a replacement, but hopefully it can be as successful. It fills an important gap in the Eclipse ecosystem, which previously lacked a platform to build web-based tools, which still run on the desktop. After several suggestions, e.g. ‚Äú&lt;/span&gt;&lt;a href=&quot;https://cdtdoug.ca/2017/02/16/what-is-two-much-more-than-yet-another-eclipse-ide.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Two‚Äù by Dough Schaefer&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, such a platform has now become a realty and it is moving forward very quickly. The broad set of interested parties looks very promising to create a powerful piece of technology.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Therefore, we look forward to contributing to Theia as well as using it in projects. Two particular features we are working on is enhancing the support for graphical editors and support for creating form-based data-centric editors in Theia.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In any case, Theia is a very interesting and promising project. The next months and years will be important to show whether Theia can become as successful as Eclipse has been (and still is), as a technology, a community, and an ecosystem. Welcome to Eclipse, Theia!&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 20 Jun 2018 10:35:29 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.6.0.AM3 for Eclipse Photon.0.RC3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.6.0.am3-for-photon.0.rc3.html</guid>
	<link>https://tools.jboss.org/blog/4.6.0.am3-for-photon.0.rc3.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.6.0.AM3 (Developer Milestone 3) build for Eclipse Photon.0.RC3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/photon/4.6.0.AM3.html&quot;&gt;JBoss Tools 4.6.0 AM3&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.6.0.AM3.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;general&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#general&quot;&gt;&lt;/a&gt;General&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;eclipse-photon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#eclipse-photon&quot;&gt;&lt;/a&gt;Eclipse Photon&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools is now targeting Eclipse Photon RC3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;camel-uri-completion-with-xml-dsl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#camel-uri-completion-with-xml-dsl&quot;&gt;&lt;/a&gt;Camel URI completion with XML DSL&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As announced &lt;a href=&quot;https://developers.redhat.com/blog/2018/01/31/apache-camel-uri-completion-eclipse-xml-editor/&quot;&gt;here&lt;/a&gt;, it was already possible to have Camel URI completion with XML DSL in the source tab of the Camel Route editor by installing the &lt;a href=&quot;https://github.com/camel-tooling/camel-lsp-client-eclipse&quot;&gt;Language Support for Apache Camel&lt;/a&gt; in your IDE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This feature is now installed by default with Fuse Tooling!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Camel URI completion in source tab of Camel Editor&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/completionSourceEditor.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now you have the choice to use the properties view with UI help to configure Camel components or to use the source editor and benefit from completion features. It all depends on your development preferences!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;webservices-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#webservices-tooling&quot;&gt;&lt;/a&gt;Webservices Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;jax-rs-2-1-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#jax-rs-2-1-support&quot;&gt;&lt;/a&gt;JAX-RS 2.1 Support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JAX-RS 2.1 is part of JavaEE8 and JBoss Tools now provides you with support for this update of the specification.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;server-side-events&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-side-events&quot;&gt;&lt;/a&gt;Server side events&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JAX-RS 2.1 brought support for server side events. The &lt;code&gt;Sse&lt;/code&gt; and &lt;code&gt;SseEventSink&lt;/code&gt; resources can now be injected into
      method arguments thanks to the @Context annotation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 20 Jun 2018 06:26:08 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: New Papyrus-based tool!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1104</guid>
	<link>https://papyrusuml.wordpress.com/2018/06/19/new-papyrus-based-tool/</link>
	<description>&lt;p&gt;Good news!¬†The¬†Papyrus Industry Consortium‚Äôs¬†steering committee has approved the creation of a ‚ÄúPapyrus Light‚Äù addition to the product line!&lt;/p&gt;
&lt;p&gt;My insiders have been telling me that work is ongoing on the requirements for this new tool.&lt;/p&gt;
&lt;p&gt;Would you like to have a voice? Well you can do so through the¬†&lt;a href=&quot;https://tuleap.eclipse.org/forum/forum.php&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Papyrus IC public Tuleap repo‚Äôs product management forum&lt;/a&gt;!¬† (You may remember my previous post about &lt;a href=&quot;https://papyrusuml.wordpress.com/2018/03/14/taking-a-tuleap/&quot;&gt;Tuleap&lt;/a&gt;).&lt;/p&gt;</description>
	<pubDate>Tue, 19 Jun 2018 13:30:16 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Web-based vs. desktop-based Tools</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39395</guid>
	<link>https://eclipsesource.com/blogs/2018/06/19/web-based-vs-desktop-based-tools/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is clear that there is an ongoing excitement surrounding web-based IDEs and tools, e.g. &lt;/span&gt;&lt;a href=&quot;https://eclipse.org/che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;https://eclipse.org/theia&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Theia&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Visual Studio Code&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Atom&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; or &lt;/span&gt;&lt;a href=&quot;https://eclipse.org/orion&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Orion&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. If you attended recent presentations or read current announcements, you may get the feeling that desktop IDEs have already been deprecated. But is this really true? If you ask developers for the tools they use in their daily work, you will rarely find someone already using web-based development tools in production.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At EclipseSource we develop &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IDE-based solutions,&lt;/span&gt;&lt;/a&gt; &lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;development tools&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/services/tools/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;tools for engineers&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/modeling-tools/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;modeling tools&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; on a daily basis in various customer projects. We are dealing with this particular design decision regularly: &lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;b&gt;Do we go for a desktop tool, a web-based, or cloud-based solution?&lt;/b&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Web-based vs. desktop-based Tools&quot; class=&quot;aligncenter wp-image-39396 size-medium&quot; height=&quot;201&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/05/image3-300x201.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Therefore, we want to share our experience on this topic. This is the first of three articles. It describes the most important drivers behind any design decision: the requirements. In the second article, we will describe challenges, technical patterns, solutions, and frameworks on how to match the requirements and how to remain as flexible as possible. In the third article, we will provide an example scenario to substantiate those best practises.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So first things first: As for so many design decisions, the most important thing is to know the requirements. Software Engineers love to talk about implementation and we also like to use new, fancy, or just our favorite technology. But in the end, we need to solve a given problem as efficiently as possible. Therefore, we should think about the problem definition first, even if that leads to a design decision that doesn‚Äôt bet on ‚Äúwhat‚Äôs trendy right now‚Äù?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;For the impatient reader, here is the possibly unsatisfying conclusion: Whether to go for a desktop or a web-based solution is a complex decision. If you want to make an optimal choice, you will need to consider your custom requirements in several dimensions. For some projects, it will be a rather simple and straightforward choice, e.g. if you are required to integrate with a given existing tool chain. However, for most projects you will need to consider the overall picture and even try to predict the future as accurately as possible. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In our experience, it is worth the effort. In the end, you will hopefully develop a good strategy. This strategy does not have to be limited to strictly choosing one option. It is also a perfectly valid strategy to choose one primary option, but also to decide on being compatible with another option. This allows for a future migration path forward. Further, it is possible to mix both worlds on a per use case basis. We will detail these particular strategies in a follow-up post.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So let‚Äôs look at the most common non-functional requirements, which play a role in the design choice between desktop and web. To be more precise, the following areas are typically treated as advantages of a web-based solution.&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Installability:&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (also referred to as deployment or ‚Äúset-up effort‚Äù): How easy and fast can you set-up the required tooling and the runtime for executing a system. Usually this is mainly referring to the developer tooling and its runtime(s) since it needs to be repeated for every developer. For simplicity, let us assume this also includes the effort to keep the system up-to-date.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Portability&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: How difficult is it to port a tool to another platform/hardware. In the case of IDEs this requirement is also sometimes referred to as ‚Äúaccessibility‚Äù. The typical use case is to access all development resources from any platform, e.g. also on your mobile device.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Performance and responsiveness:&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; How responsive is the tool or how responsive does it feel. How long do crucial operations take to run, e.g. a full rebuild.&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Usability:&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; Let us use this wonderful definition from &lt;/span&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Usability&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Wikipedia&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;: ‚ÄúIn software engineering, usability is the degree to which a software can be used by specified consumers to achieve quantified objectives with effectiveness, efficiency, and satisfaction in a quantified context of use‚Äù&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;b&gt;Cost:&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; The cost it takes to implement an IDE, tooling, extension or the necessary development runtime. For most projects it is probably one of the most important criteria to consider&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Besides those non-functional requirements, tools also need to fulfill functional requirements. As those are specific to a certain tool, we will only consider the cost requirement since typical projects are aimed at fulfilling their functional requirements at the lowest possible cost.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As a first requirement, we will look at installability, because it is the most obvious distinction between a desktop-based and a cloud-based solution. For this requirement, we will also¬†introduce some example scenarios and dimensions, that recur for other requirements later on, so the next section is the most comprehensive.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Installability (a.k.a. Deployment, ‚Äúset-up effort‚Äù and updatability)&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Web-based vs. desktop-based Tools&quot; class=&quot;aligncenter wp-image-39397 size-medium&quot; height=&quot;185&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/05/image7-300x185.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Installability is probably the most prominent advantage that is advertised for web-based solutions. The vision is that you can simply log into a system via your Browser and you can directly start to code without installing anything, neither the IDE or tools, nor any runtime environment. Further, you do not need to install any updates anymore, as they are applied in a central way.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So let us look at this obvious advantage more in detail. The first interesting dimension of this is how much time you can save with improving the installability. This is connected to the number of developers that you have on-board to use the tooling and the number of people who are occasionally using those tools. Further, it plays a role on how long a developer would use the tool after installation, the shorter the usage the more significant the set-up time would be.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let‚Äôs look at three example scenarios. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;First&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; let‚Äôs consider a tutorial/training scenario, where participants should participate in completing exercises. A tutorial/training takes usually a couple of hours or days, so the set-up time is a crucial part here. Further, trainings/tutorials are typically conducted for a bigger number of developers. Anybody who ever had to deal with preparing a setup guide for a tutorial would agree that a browser-based solution would immediately pay off here. Even the simplest and best prepared desktop-based setup will take some time to install. So this scenario is a win for a web-based solution if, and only if, you can rely on a robust high-speed internet connection. Consequently, you can observe that a lot of online tutorials already embed web-based code editors and tooling.¬†&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The second&lt;/b&gt; &lt;b&gt;scenario&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is an open source project. Many OS project have a mix of different developer roles. Some developers (committers) are regularly contributing to a project. The second group of contributors typically uses a technology (‚Äúadopters‚Äù), but want to eventually¬†contribute small enhancements and fixes. While for the regular committers, set-up is not that important compared to their time working on the project, occasional contributors are obviously often discouraged from contributing to a project by a complex set-up. Therefore, in this scenario, there is a mismatch between the requirements of two user roles that you need to balance. So is it worth to switch existing committers to a cloud-based solution to ease the life for contributors?&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ed Merks has described this issue very well in &lt;/span&gt;&lt;a href=&quot;http://ed-merks.blogspot.de/2014/02/shoes-for-shoemaker.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;his blog post in 2014&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. His conclusion was the creation of a tool called &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/tutorials/oomph-basic-tutorial/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Oomph&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, which automates the set-up of a desktop IDE for projects. For the source code, Oomph even goes partly a little further than most cloud-based solutions, as it even allows you to automatically check-out the sources. Please see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/tutorials/oomph-basic-tutorial/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here for a tutorial regarding Oomph&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. While Oomph greatly improves the set-up process, it does not solve the issue completely. It will still take some time to materialize all project resources (i.e. download time). So for a very small contribution, it might still be too much of a burden. Further, it does not fully automate the creation of an appropriate runtime. If a project requires a lot of external tools (e.g. databases, applications servers, etc.), those have to be installed separately. In turn, it does not touch the regular committer user, as they just continue using their existing and well-proven solutions. In scenarios with such different roles, it is always a good idea to let all developers use the same set-up and tooling. Otherwise, there might be slight differences in their output and further, the committers will usually only maintain their solution well.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;The third scenario&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is not differentiated by the type of project, but by the use case: code review. In a scenario where a developer works on implementation within a project every day, she might not care about installability so much, at least ot&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;her requirements might be more important. In turn, if you only review a code change and you do not implement something regularly, installing/updating all the required tooling plays a significant role. As a consequence, most reviews are already probably done in web interfaces (e.g. Gerrit or Pull Requests). Also the use case is focussed on reading and understanding code, rather than on changing or creating new code. Therefore, other requirements are not so important for a code review compared to a good installability.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Like the three scenarios described here, you can categorize any arbitrary project and the according use cases based on the importance of a good installability. The result of this will be very specific to a custom project set-up. Those considerations are naturally already reflected in today‚Äôs toolchains, where parts of the tool chain more focussed on reading or browsing code are often web-based.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There are some more considerations to make, which are related to installability. One is the updatability. While of course an update to the tooling is hopefully not the same as installing it from scratch, most considerations we had for the installability should be applied for the update case as well. This especially includes, how often updates to the tool are applied.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Another obvious dimension is the complexity of the project set-up. The more difficult it is, the bigger the advantage of simplifying it via a cloud solution. For this, we need to differentiate of course between the IDE tooling itself and the necessary runtime environment. The environment is often much more complicated, e.g. if you need to set-up several services, databases and so on. If only the runtime set-up is very complicated, a cloud-based IDE might not be the only valuable solution. There are several ways to ease those setups, even without using a cloud- based IDE, e.g. with docker containers or workspace servers like &lt;/span&gt;&lt;a href=&quot;https://eclipse.org/che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Installability is one of the major advantages of a web-based solution. However, it will only provide a significant advantage, if the use case fits. Therefore, it is worth it to spend some time on defining the core users and use cases of your system and define the importance of installability for them. In a nutshell, installability pays off most in environments, where a lot of people need to and can be on-boarded very fast, and if they do not work continuously on a project. Unfortunately, when onboarding developers it is usually much more time consuming to transfer the required knowledge than to setup the IDE.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Portability&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Web-based vs. desktop-based Tools&quot; class=&quot;aligncenter wp-image-39398 size-medium&quot; height=&quot;200&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/05/image8-300x200.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Portability is the second very obvious advantage of a cloud and browser-based solution over a desktop-based tool. The ultimate goal is that you can access the tooling and runtime with any device which has a browser. As a consequence, you can ideally fulfil your development use case at any location, even from a mobile device. In some discussions, this is currently referred to as ‚Äúaccessibility‚Äù. ¬†While this strictly speaking means something different, we consider Portability as the ability to access the tool from anywhere on any device.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A lot of the considerations we have described for installability can be shared when thinking about the advantage of Portability. Different project roles and different tooling use cases would benefit on a different level. Doing a code review or browsing a diagram on a tablet makes more sense than writing a lot of code. So, again, the detailed roles and use cases will need to be evaluated. We will not repeat that in detail, but focus on new dimensions, which are specific for portability.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One additional scenario connected to portability is the ability to share a certain runtime set-up or project state. That means developers always have exactly the same environment. This obviously simplifies life as the typical phrase ‚ÄúI cannot reproduce this on my machine‚Äù would no longer occur. However, this only fully applies to the tooling. For the runtime, it plays a role if the runtime platform for a system is unified, too. If the system under development runs natively on different operating systems again, you still need to test different runtime environments. As a consequence, cloud-based tooling currently seems to get adapted in the area of cloud-based development, first.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;And like mentioned for installability, there are other ways to achieve a uniform setup, although not as unified as a cloud solution.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A disadvantage of a pure cloud-based solution is that they often rely on constant internet connection. While this issue becomes less and less relevant, at least it must be considered. Some cloud-solutions already provide a good work-around, e.g. the offline mode of Google Mail.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;A final word about the dream to be able to contribute to a project from anywhere on any device: While this sounds appealing for certain use cases, do we really want to be called by a client and subsequently feel obligated to fix a bug on our smart phone while we are sitting in a ski lift?&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Web-based vs. desktop-based Tools&quot; class=&quot;aligncenter wp-image-39399 size-medium&quot; height=&quot;105&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/05/image11-300x105.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Performance is a very interesting requirement to consider. In contrast to installability and portability, there is no clear winner between desktop-based and cloud-based tooling. You will find valid arguments for both to be ‚Äúmore performant‚Äù, e.g. &lt;/span&gt;&lt;a href=&quot;https://jaxenter.com/performance-vs-convenience-desktop-or-browser-based-ides-128785.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this article by Tom Radcliffe&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; claims that desktop IDEs are the clear winner.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The major reason for this tie is again that we have to consider the specific use case when talking about performance. While writing and browsing code, we want fast navigation, key bindings and coding features such as auto-completion. While web IDEs have caught up a lot in recent years, you can still claim that a desktop tool is typically more performant for those ‚Äúlocal‚Äù use cases (as also claimed by Tom Radcliffe in the article referenced above).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Things change, when looking at other use cases, e.g. compiling. A powerful cloud-instance can certainly compile a project faster than a typical laptop. Further, it is comparably cheaper and more scalable to gain more resources in a central way. However, when going for a cloud-based solution, scalability must be taken into account. Any advantage is obsolete, if developers have to wait 15 minutes for getting something compiled, because other build jobs are running on the central instance. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So for performance, it is important to consider which development use cases are crucial and will benefit performance-wise from either solution. A follow-up decision of a cloud-based solution would be to strip down the hardware for participating developers to save costs (Chromebook scenario). While this sounds like a rational thing to do, not everybody will like the idea of giving away his or her powerful device.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Usability&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Web-based vs. desktop-based Tools&quot; class=&quot;aligncenter wp-image-39400 size-medium&quot; height=&quot;200&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/05/image1-300x200.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Usability also doesn‚Äôt have a clear winner in the comparison between desktop-based to web-based IDEs. While advocates of both platforms would claim a clear advantage, this is really a matter of personal taste. Web technologies have become incredibly powerful when it comes to styling, look, and feel. Therefore, you can achieve almost any visualization you would like.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Further, there is much more innovation going on in the web area in comparison to, e.g. SWT. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;On the desktop, depending on the UI Toolkit you use, there might be more restrictions. JavaFX and Swing are powerful when it comes to styling, but Swing is kind of deprecated. SWT has limitations when it comes to styling. However, it probably provides most existing framework support when it comes to tooling (see also ‚Äúcost vs. features‚Äù). &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Besides styling, native desktop applications have still some advantages in usability, e.g. by supporting native features such as application menus, tray icons, key bindings and such. Although, it is expectable that these advantages will shrink over time as ¬†browsers keep on evolving very fast. In any case, usability is not equal to the ability of supporting a dark theme as some browser advocats may try to make us believe.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;It is worth mentioning that there are platforms combining advantages of both worlds. Platforms such as Visual Studio Code, Atom or Eclipse Theia embed web technologies (HTML and Typescript) into a desktop application (using Electron).&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Cost vs. Features&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Web-based vs. desktop-based Tools&quot; class=&quot;aligncenter wp-image-39401 size-medium&quot; height=&quot;200&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/05/image4-300x200.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;At the end of the day, for many projects a very important constraint is cost, meaning the required effort to satisfy your list of functional requirements. A comparison of the required effort on either platform is driven by several parameters.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;First&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, the effort would be influenced by the general efficiency of a certain platform. It would go beyond the scope of this article to compare, for example, the efficiency of Java development with TypeScript or JavaScript development, so let us assume the general development efficiency to be equal for now.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Second&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, cloud-based solutions usually add some complexity to the architecture due to the required encapsulation of client and server. Of course, you want to have encapsulation of components in a desktop-based tool, too. However, you typically do not have to deal with the fact that components are deployed in a distributed environment.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Third&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, a very central aspect for implementing tooling is the availability of existing frameworks, tools and platforms to reuse. Ecosystems like Eclipse have grown over 17 years now and already provide a tool, framework or plugin for almost everything. Many requirements can be covered with very little effort, just by extending existing tools or by using the right framework. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While there are frameworks for cloud-tools, too (such as Orion, Eclipse Che or Theia), they are arguably not as powerful as Eclipse/IntelliJ/NetBeans, yet. This might of course change over time.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One mentionable trend is to reuse existing ‚Äúdesktop‚Äù components in web-tooling. As an example, Eclipse JDT provides an API to be used using the &lt;/span&gt;&lt;b&gt;language server protocol&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; (LSP). This allows you to reuse features such as auto-completion and syntax highlighting from another UI, typically a web-based IDE. While LSP does not yet cover the full feature set of the Eclipse desktop IDE, it is a great way of reusing existing efforts.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, powerful frameworks usually also carry the burden of complexity. The advantage of reusing existing stuff typically (or hopefully) justifies the effort of learning to use a framework. In turn, if you just use a tiny bit of a platform, you might be better off in using something slimmer, which covers your use cases just as well. As an example, if you need a plain code editor without any context, e.g. for a tutorial use case, a platform such as Eclipse might be overkill.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So it is useful to evaluate the desired feature set and how well it is supported by existing frameworks on the respective technology stack (web vs. desktop). It is also worth it to investigate whether existing features on one stack can be adapted to be reused on the other (e.g. using LSP). This applies in both directions. Not only can you call existing frameworks in the background from a cloud-based solution, it is also possible to embed web-based UI components into desktop applications (see also conclusion).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, what makes the dimension of cost vs. features especially difficult is that you typically cannot know exactly what kind of features you need to provide with a tool in the mid-term future.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;And more‚Ä¶&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Web-based vs. desktop-based Tools&quot; class=&quot;aligncenter wp-image-39402 size-medium&quot; height=&quot;225&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/05/image6-300x225.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;There are obviously many other parameters to consider when comparing the costs of cloud vs. desktop-based tools. This article would go beyond scope if we were to spend a section on all of these, but let us at least mention some more important topics.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One meta criterion in the decision for a platform, framework, or technology stack, is the long term availability as well as how actively it is maintained. Again, there is no clear winner, when comparing desktop and web stacks. While you can argue that there is more development going on in the web area, it is in turn extremely volatile. Platforms such as Eclipse have been successfully maintained for 17 years now. There are existing workflows for long-term support (LTS) and suppliers like us providing this as a service. Plus, the platform is very stable in terms of APIs. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In turn, web frameworks provide major version updates with improvements almost every year. While this brings in innovation, it also often requires refactoring of an adopting project. As an example, there is currently a lot of variety emerging when it comes to web-based IDEs (e.g. Visual Studio Code, Theia, Eclipse Che, Orion, etc.). We will cover strategies to deal with this risk in a follow-up article.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Another meta criterion is the availability of skilled resources. At the moment, you can probably find more Angular developers on the market than SWT experts. However, this may change very quickly ‚Äì once Angular is not ‚Äúhip‚Äù anymore.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Another frequently discussed topic when it comes to cloud-based solutions is of course the security as well as tracing aspect. While it is certainly worth considering, it is probably not the key decision factor for most professional environments, but rather requires special attention.&lt;/span&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img alt=&quot;Web-based vs. desktop-based Tools&quot; class=&quot;aligncenter wp-image-39403 size-medium&quot; height=&quot;184&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/05/image9-300x184.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this article, we have tried to cover the most important considerations when deciding between a cloud or web-based solution and a desktop tool. There are for sure many more things to consider. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;However, what all dimensions have in common is that it is most important to think about the users, their use cases and the frequency of those. Based on these criteria, you can evaluate the benefits of supporting them in the web or on the desktop. This is especially true, if you already have an existing tool and are considering a migration. In this case, there must be clear advantages justifying the cost.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While this is already complex, it is even worth it to make this decision on a per use case basis. This is already happening naturally in our tool landscape, e.g. code reviews are very often conducted using web-interfaces. Identifying the use cases in your tool, which would benefit most from being available online, reduces the effort and risk to migrate everything at once. So it is often a good idea to pick the low hanging fruits first.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ultimately, it will almost never be possible to make a perfect decision. This is especially true, as important criteria, use cases, and technologies change over time and no one can perfectly predict the future. Therefore, the most important thing is to keep some flexibility. That means, even if you decide for a desktop solution, or vice versa, it should be as easy as possible to switch to the other option later on. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Even mixtures of both technology stacks on a per use case basis often make sense. While this sounds ambiguous, there are some simple patterns to follow to make this true. We will highlight those strategies in a follow-up article. This strategy also allows an iterative migration, which is often the only viable way tackle the complexity and efforts of migrating existing tool projects. Some Frameworks even proactively support this strategy by supplying implementations based on web- and desktop technology at the same time, e.g. &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/ecp/emfforms/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://jsonforms.io/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let us close this article with a general, non-statistical overview of what most projects currently do. This is of course biased, as the input is derived from our customer projects or projects we know about. However, looking at those: &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Some projects&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; directly aim at a pure web-based solution, typically, if they benefit a lot from the advantages, if they implement something from scratch and if they have a pretty self-contained feature set (e.g. training). &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Few projects&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; do not consider web-based tooling at all, mostly if they have a defined set of continuous users and a lot of existing investments in their desktop tools. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Most projects&lt;/b&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; plan to maintain their desktop solutions in the near future, but will migrate certain use cases to web technology. Therefore, those projects implement certain design patterns allowing this partial migration. We will highlight those patterns in a follow-up article. &lt;/span&gt;&lt;a href=&quot;https://twitter.com/eclipsesourcem&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Follow us on Twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to get notified about our blog posts. Stay tuned!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, if you are dealing with the designing decision in your project and want support, if you want an evaluation of a web-based version of your tools or if you want to make your current tools ready for the upcoming challenges and chances, please do not hesitate to &lt;/span&gt;&lt;a href=&quot;mailto:munich@eclipsesource.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; us. &lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 19 Jun 2018 12:25:01 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Visualizing Eclipse Collections</title>
	<guid isPermaLink="false">https://medium.com/p/646dad9533a9</guid>
	<link>https://medium.com/@donraab/visualizing-eclipse-collections-646dad9533a9?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;A visual overview of the APIs, Interfaces, Factories, Static Utility and Adapters in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; using mind¬†maps.&lt;/p&gt;&lt;h3&gt;A picture is worth a thousand¬†words&lt;/h3&gt;&lt;p&gt;I‚Äôm not sure how many words a mind map is worth, but they are useful for information chunking. &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; is a very feature rich library. The mind maps help organize and group concepts and they help convey a sense of the symmetry in Eclipse Collections.&lt;/p&gt;&lt;h4&gt;&lt;a href=&quot;https://medium.com/@donraab/symmetric-sympathy-2c59d4541d60&quot;&gt;Symmetric Sympathy&lt;/a&gt;&lt;/h4&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*x7tvAh5_CcaS0TZ1O62sRQ.png&quot; /&gt;A High-level view of the Eclipse Collections Library&lt;/figure&gt;&lt;h3&gt;RichIterable API&lt;/h3&gt;&lt;p&gt;The &lt;em&gt;RichIterable&lt;/em&gt; API is the set of common APIs share between all of the container classes in Eclipse Collections. Some methods have overloaded forms which take additional parameters. In the picture below I have grouped the unique set of methods by the kind of functionality they¬†provide.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*Br4eQEhSsLeRZ1EVZIHhPA.png&quot; /&gt;RichIterable API&lt;/figure&gt;&lt;h4&gt;API by¬†Example&lt;/h4&gt;&lt;p&gt;Below are links to several blogs covering various APIs available on &lt;em&gt;RichIterable&lt;/em&gt;.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-filtering-4f14b906f718&quot;&gt;Filtering&lt;/a&gt; (&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-partitioning-d2704f826e66&quot;&gt;Partitioning&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;Transforming (&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-collect-262a46030c49&quot;&gt;Collect&lt;/a&gt; / &lt;a href=&quot;https://medium.com/@donraab/ec-by-example-flatcollect-3efe24e43da2&quot;&gt;FlatCollect&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-short-circuiting-methods-e60121bc5a&quot;&gt;Short-circuiting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/ec-by-example-counting-688dfaaf513c&quot;&gt;Counting&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/the-sum-of-all-reductions-d46dfd334704&quot;&gt;Filter / Map /¬†Reduce&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/@donraab/a-rose-by-any-other-name-e15060d4c98e&quot;&gt;Eclipse Collections API compared to Stream¬†API&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h3&gt;RichIterable Interface Hiearchy&lt;/h3&gt;&lt;p&gt;&lt;em&gt;RichIterable&lt;/em&gt; is the base type for most container types in Eclipse Collections. Even object valued &lt;em&gt;Map&lt;/em&gt; types extend &lt;em&gt;RichIterable&lt;/em&gt; in Eclipse Collections. A &lt;em&gt;Map&lt;/em&gt; of type K (key) and V (value), will be an extension of &lt;em&gt;RichIterable&lt;/em&gt; of V (value). This provides an rich set of behaviors to &lt;em&gt;Map&lt;/em&gt; types for their values. You can still iterate over keys, and keys and values together, and there are separate methods for this¬†purpose.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*X297GxEsPqidlMItQ5g5nw.png&quot; /&gt;RichIterable Interface Hierarchy‚Ää‚Äî‚ÄäGreen Star=Mutable, Red Circle=Immutable&lt;/figure&gt;&lt;h3&gt;PrimitiveIterable Interface Hierarchy&lt;/h3&gt;&lt;p&gt;Eclipse Collections provides container support for all eight Java primitives. There is a base interface with common behavior named &lt;em&gt;PrimitiveIterable&lt;/em&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/742/1*yzAO5Ciqu8Am_5gWxXfH8w.png&quot; /&gt;PrimitiveIterable Interface Hierarchy&lt;/figure&gt;&lt;p&gt;The following diagram shows the &lt;em&gt;IntIterable&lt;/em&gt; branch from the diagram above. There are seven other similar branches.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*vkS5xustMLJQAGBEPSPaKw.png&quot; /&gt;IntIterable Interface Hierarchy‚Ää‚Äî‚ÄäGreen Star=Mutable, Red Circle=Immutable&lt;/figure&gt;&lt;p&gt;The interface hierarchy for each primitive type is pretty much the same as &lt;em&gt;IntIterable&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;Factories&lt;/h3&gt;&lt;p&gt;If you want to create a collection in Eclipse Collections, you have a few options available. One option is to use a constructor or static factory method on the concrete mutable type that you want to create. This requires you to know the name of the concrete mutable types (e.g. FastList, UnifiedSet or UnifiedMap). This option does not exist for immutable types however. The most convenient, consistent and symmetric option if you are going to create both mutable and immutable containers is to use one of the factory classes provided. A factory class follows the pattern of using the type name plus an s, to make it plural. So if you want a mutable or immutable &lt;em&gt;List&lt;/em&gt;, you would use the &lt;em&gt;Lists&lt;/em&gt; class, and then specify whether you want the &lt;em&gt;mutable&lt;/em&gt; or &lt;em&gt;immutable&lt;/em&gt; factory for that¬†class.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/958/1*Tsgi3i2VJUncEXE73HwT5A.png&quot; /&gt;Factory Classes available in Eclipse Collections for Object Containers&lt;/figure&gt;&lt;p&gt;There are separate factory classes for primitive containers. Prefix the primitive type in front of the container type to find the right primitive factory¬†class.&lt;/p&gt;&lt;h4&gt;&lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;Mutable Factory¬†Examples&lt;/a&gt;&lt;/h4&gt;&lt;pre&gt;MutableList&amp;lt;T&amp;gt; list = Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableSet&amp;lt;T&amp;gt; set = Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableSortedSet&amp;lt;T&amp;gt; sortedSet = SortedSets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableMap&amp;lt;K, V&amp;gt; map = Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableSortedMap&amp;lt;K, V&amp;gt; sortedMap = SortedMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableStack&amp;lt;T&amp;gt; stack = Stacks.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableBag&amp;lt;T&amp;gt; bag = Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableSortedBag&amp;lt;T&amp;gt; sortedBag = SortedBags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;MutableBiMap&amp;lt;K, V&amp;gt; biMap = BiMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;/pre&gt;&lt;h4&gt;&lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-2-immutable-8cb72ff897ee&quot;&gt;Immutable Factory¬†Examples&lt;/a&gt;&lt;/h4&gt;&lt;pre&gt;ImmutableList&amp;lt;T&amp;gt; list = Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableSet&amp;lt;T&amp;gt; set = Sets.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableSortedSet&amp;lt;T&amp;gt; sortedSet = SortedSets.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableMap&amp;lt;K, V&amp;gt; map = Maps.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableSortedMap&amp;lt;K, V&amp;gt; sortedMap = SortedMaps.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableStack&amp;lt;T&amp;gt; stack = Stacks.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableBag&amp;lt;T&amp;gt; bag = Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableSortedBag&amp;lt;T&amp;gt; sortedBag = SortedBags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;ImmutableBiMap&amp;lt;K, V&amp;gt; biMap = BiMaps.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;/pre&gt;&lt;h3&gt;Static Utility¬†Classes&lt;/h3&gt;&lt;p&gt;In the beginning of Eclipse Collections development, everything was accomplished through static utility classes. We added our own interface types later on. Over time Eclipse Collections has accumulated quite a few static utility classes that serve various purposes. Static utility classes are useful when you want to use Eclipse Collections APIs with types that extend the JDK Collection interfaces like Iterable, Collection, List, RandomAccess and¬†Map.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*D_KsXB4sWfrmRARmRjyBlQ.png&quot; /&gt;A collection of useful static utility¬†classes&lt;/figure&gt;&lt;h4&gt;Static Utility¬†Examples&lt;/h4&gt;&lt;pre&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        Iterate.&lt;em&gt;anySatisfy&lt;/em&gt;(&lt;br /&gt;                Collections.&lt;em&gt;singleton&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;),&lt;br /&gt;                &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;::equals));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        ListIterate.&lt;em&gt;anySatisfy&lt;/em&gt;(&lt;br /&gt;                Collections.&lt;em&gt;singletonList&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;),&lt;br /&gt;                Predicates.&lt;em&gt;equal&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;)));&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        MapIterate.&lt;em&gt;anySatisfy&lt;/em&gt;(&lt;br /&gt;                Collections.&lt;em&gt;singletonMap&lt;/em&gt;(1, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;),&lt;br /&gt;                Predicates.&lt;em&gt;notEqual&lt;/em&gt;(&lt;strong&gt;&quot;2&quot;&lt;/strong&gt;)));&lt;/pre&gt;&lt;pre&gt;String[] strings = {&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;};&lt;br /&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        ArrayIterate.&lt;em&gt;anySatisfy&lt;/em&gt;(strings, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;::equals));&lt;br /&gt;Assert.&lt;em&gt;assertTrue&lt;/em&gt;(&lt;br /&gt;        ArrayIterate.&lt;em&gt;contains&lt;/em&gt;(strings, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;));&lt;/pre&gt;&lt;h3&gt;Adapters&lt;/h3&gt;&lt;p&gt;There are adapters that provide the Eclipse Collections APIs to JDK¬†types.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*EMfXxGe5uHYqtby0ctH7LQ.png&quot; /&gt;Adapters for JDK¬†types&lt;/figure&gt;&lt;h4&gt;Creating an¬†adapter&lt;/h4&gt;&lt;pre&gt;MutableList&amp;lt;String&amp;gt; list = &lt;br /&gt;        Lists.&lt;em&gt;adapt&lt;/em&gt;(new ArrayList&amp;lt;&amp;gt;());&lt;br /&gt;MutableSet&amp;lt;String&amp;gt; set = &lt;br /&gt;        Sets.&lt;em&gt;adapt&lt;/em&gt;(new HashSet&amp;lt;&amp;gt;());&lt;br /&gt;MutableMap&amp;lt;String, String&amp;gt; map = &lt;br /&gt;        Maps.&lt;em&gt;adapt&lt;/em&gt;(new HashMap&amp;lt;&amp;gt;());&lt;br /&gt;MutableList&amp;lt;String&amp;gt; array = &lt;br /&gt;        ArrayAdapter.&lt;em&gt;adapt&lt;/em&gt;(&lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;);&lt;br /&gt;CharAdapter chars = &lt;br /&gt;        Strings.&lt;em&gt;asChars&lt;/em&gt;(&lt;strong&gt;&quot;Hello Chars!&quot;&lt;/strong&gt;);&lt;br /&gt;CodePointAdapter codePoints = &lt;br /&gt;        Strings.&lt;em&gt;asCodePoints&lt;/em&gt;(&lt;strong&gt;&quot;Hello CodePoints!&quot;&lt;/strong&gt;);&lt;br /&gt;LazyIterable&amp;lt;String&amp;gt; lazy = &lt;br /&gt;        LazyIterate.&lt;em&gt;adapt&lt;/em&gt;(new CopyOnWriteArrayList&amp;lt;&amp;gt;());&lt;/pre&gt;&lt;h3&gt;Additional Types&lt;/h3&gt;&lt;p&gt;There are more types in Eclipse Collections like Multimaps. These will be covered in a separate blog. Multimap is one of the types today, along with ParallelIterable, that does not extend RichIterable directly.&lt;/p&gt;&lt;h3&gt;Links&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md&quot;&gt;Eclipse Collections Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections-kata&quot;&gt;Eclipse Collections Katas&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;API Design of Eclipse Collections&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.infoq.com/articles/Refactoring-to-Eclipse-Collections&quot;&gt;Refactoring to Eclipse Collections&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://medium.com/oracledevs/unifiedmap-how-it-works-48af0b80cb37&quot;&gt;UnifiedMap&lt;/a&gt;, &lt;a href=&quot;https://medium.com/oracledevs/unifiedset-the-memory-saver-25b830745959&quot;&gt;UnifiedSet&lt;/a&gt; and &lt;a href=&quot;https://medium.com/oracledevs/bag-the-counter-2689e901aadb&quot;&gt;Bag&lt;/a&gt; Explained&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on¬†GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=646dad9533a9&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sat, 16 Jun 2018 21:36:42 +0000</pubDate>
</item>
<item>
	<title>itemis: Pro Tip: Implementing JUnit Test Cases in Xtend</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/implementing-junit-test-cases-in-xtend</guid>
	<link>https://blogs.itemis.com/en/implementing-junit-test-cases-in-xtend</link>
	<description>&lt;p&gt;¬†&lt;/p&gt; 
&lt;blockquote&gt;
 What makes a clean test? Three things. Readability, readability, and readability. Readability is perhaps even more important in unit tests than it is in production code. What makes tests readable? The same thing that makes all code readable: clarity, simplicity, and density of expression.
&lt;/blockquote&gt; 
&lt;strong&gt;&lt;span style=&quot;font-size: 12px;&quot;&gt;[Robert C. Martin: Clean Code - A Handbook of Agile Software Craftsmanship (page 124)]&lt;/span&gt;&lt;/strong&gt; 
&lt;p&gt;¬†&lt;/p&gt; 
&lt;p&gt;Recently, the &lt;a href=&quot;https://hosting.itemis.de/en/editing-graphviz-.dot-files-with-the-gef-dot-editor&quot;&gt;Eclipse GEF DOT&lt;/a&gt; Editor has been extended by the &lt;a href=&quot;http://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#refactoring&quot;&gt;Rename Refactoring&lt;/a&gt; functionality. Following the Behaviour-Driven Development approach, its acceptance criteria have been specified first:&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;Feature: Rename Refactoring

  Scenario Outline:
    Given is the &amp;lt;dslFile&amp;gt;
    When renaming the &amp;lt;targetElement&amp;gt; to &amp;lt;newName&amp;gt;
    Then the dsl file has the content &amp;lt;newContent&amp;gt;.

    Examples:
      |  dslFile  |   targetElement   | newName | newContent |
      |-----------|-------------------|---------|------------|
      |  graph {  |                   |         |  graph {   |
      |    1      |     firstNode     |    2    |    2       |
      |  }        |                   |         |  }         |
      |           |                   |         |            |
      | digraph { |                   |         | digraph {  |
      |   1       |     firstNode     |    3    |   3        |
      |   1-&amp;gt;2    |                   |         |   3-&amp;gt;2     |
      | }         |                   |         | }          |
      |           |                   |         |            |
      | digraph { |                   |         | digraph {  |
      |   1       |    source node    |    3    |   3        |
      |   1-&amp;gt;2    | of the first edge |         |   3-&amp;gt;2     |
      | }         |                   |         | }          |
      |           |                   |         |            |&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;Thereafter, the test specification has been implemented in JUnit test cases: &lt;/span&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;class DotRenameRefactoringTests extends AbstractEditorTest {

	// ...

	@Test def testRenameRefactoring01() {
		'''
			graph {
				1
			}
		'''.
		testRenameRefactoring([firstNode], &quot;2&quot;, '''
			graph {
				2
			}
		''')
	}

	@Test def testRenameRefactoring02() {
		'''
			digraph {
				1
				1-&amp;gt;2
			}
		'''.
		testRenameRefactoring([firstNode], &quot;3&quot;, '''
			digraph {
				3
				3-&amp;gt;2
			}
		''')
	}

	@Test def testRenameRefactoring03() {
		'''
			digraph {
				1
				1-&amp;gt;2
			}
		'''.
		testRenameRefactoring([sourceNodeOfFirstEdge], &quot;3&quot;, '''
			digraph {
				3
				3-&amp;gt;2
			}
		''')
	}

	// ...

	private def testRenameRefactoring(CharSequence it, (DotAst)=&amp;gt;NodeId element,
		String newName, CharSequence newContent) {
		// given
		dslFile.
		// when
		rename(target(element), newName).
		// then
		dslFileHasContent(newContent)
	}

	// ...

}&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;&lt;br /&gt;Thanks to the &lt;a href=&quot;http://www.eclipse.org/xtend/&quot;&gt;Xtend&lt;/a&gt; programming language, the entire &lt;a href=&quot;https://github.com/eclipse/gef/blob/master/org.eclipse.gef.dot.tests/src/org/eclipse/gef/dot/tests/DotRenameRefactoringTests.xtend&quot;&gt;DotRenameRefactoringTests&lt;/a&gt; test suite became readable, clean, and scales very well.&lt;/span&gt;&lt;/p&gt; 
&lt;blockquote&gt;
 How did I do this? I did not simply write this program from beginning to end in its current form. To write clean code, you must first write dirty code and then clean it.
&lt;/blockquote&gt; 
&lt;p&gt;&lt;strong&gt;&lt;span style=&quot;background-color: transparent; font-size: 12px;&quot;&gt;[Robert C. Martin: Clean Code - A Handbook of Agile Software Craftsmanship (page 200)]&lt;/span&gt;&lt;/strong&gt;&lt;/p&gt; 
&lt;p&gt;&lt;span style=&quot;background-color: transparent;&quot;&gt;Would you like to learn more about Clean Code, Behaviour-Driven and Test-Driven Development? Take a look at the (german) blog posts of my former colleague &lt;a href=&quot;https://hosting.itemis.de/author/christian-fischer&quot;&gt;Christian Fischer&lt;/a&gt;, a very passionate software craftsman and agile coach.&lt;/span&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fimplementing-junit-test-cases-in-xtend&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 15 Jun 2018 14:18:00 +0000</pubDate>
	<author>miklossy@itemis.de (Tamas Miklossy)</author>
</item>
<item>
	<title>Eclipse Ditto: Announcing Ditto Milestone 0.3.0-M2</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2018-06-15-milestone-announcement-030-M2.html</guid>
	<link>https://www.eclipse.org/ditto/2018-06-15-milestone-announcement-030-M2.html</link>
	<description>&lt;p&gt;Today we, the Eclipse Ditto team, are happy to announce our next milestone 0.3.0-M2.&lt;/p&gt;

&lt;p&gt;The main changes are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;improvement of Ditto‚Äôs cluster performance with many managed Things
    &lt;ul&gt;
      &lt;li&gt;a new Ditto service &lt;a href=&quot;https://www.eclipse.org/ditto/architecture-services-concierge.html&quot;&gt;ditto-concierge&lt;/a&gt; was added for this&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;improved cluster bootstrapping based on DNS with the potential to easy plugin other mechanism (e.g. for Kubernetes)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have a look at the Milestone &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_030-M2.html&quot;&gt;0.3.0-M2 release notes&lt;/a&gt; for a detailed description of what 
changed.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;‚Äì&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Fri, 15 Jun 2018 04:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: Hello Planet Eclipse!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39577</guid>
	<link>https://eclipsesource.com/blogs/2018/06/14/hello-planet-eclipse/</link>
	<description>&lt;p&gt;This is a test blog to check the aggregation on &lt;a href=&quot;http://www.planeteclipse.org/planet/&quot;&gt;Planet Eclipse&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 14 Jun 2018 09:23:40 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: ECF Photon supports OSGi Async Remote Services</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-5680104965640748238</guid>
	<link>http://eclipseecf.blogspot.com/2018/05/ecf-photon-supports-osgi-async-intent.html</link>
	<description>In a &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/04/ecf-photon-supports-osgi-r7.html&quot;&gt;previous post&lt;/a&gt;, I indicated that ECF Photon/3.14.0 will support the recently-approved &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0&quot;&gt;OSGi R7 specification&lt;/a&gt;.¬† ¬†What does this support provide for¬† developers?&lt;br /&gt;&lt;br /&gt;Support &lt;b&gt;osgi.async&lt;/b&gt;¬†remote service intent&lt;br /&gt;&lt;br /&gt;The &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html&quot;&gt;OSGi R7 Remote Services specification&lt;/a&gt; has been enhanced with remote service &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#i1693415&quot;&gt;intents&lt;/a&gt;.¬† Remote Service Intents allow service authors to specify requirements on the underlying distribution system in a standardized way.¬† ¬†Standardization of service behavior guarantees the same runtime behavior across distribution providers and implementations.&lt;br /&gt;&lt;br /&gt;The &lt;b&gt;osgi.async&lt;/b&gt; intent allows the service interface to use return types such as Java8's &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletableFuture.html&quot;&gt;CompletableFuture&lt;/a&gt; or OSGi's &lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/util.promise.html&quot;&gt;Promise&lt;/a&gt;.¬† ¬†With a supporting distribution provider, the proxy will automatically implement the asynchronous/non-blocking behavior for the service consumer.&lt;br /&gt;&lt;br /&gt;For example, consider a service interface:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;public interface Hello {&lt;br /&gt;    CompletableFuture&amp;lt;String&amp;gt; hello(String greetingMessage);&lt;br /&gt;}&lt;/pre&gt;When an implementation of this service is registered and exported as a remote service &lt;b&gt;with the osgi.async intent&lt;/b&gt;:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(property = { &quot;service.exported.interfaces=*&quot;, &quot;service.intents=osgi.async&quot; })&lt;br /&gt;public class HelloImpl implements Hello {&lt;br /&gt;    public CompletableFuture&amp;lt;String&amp;gt; hello(String greetingMessage) {&lt;br /&gt;          CompletableFuture&amp;lt;String&amp;gt; future = new CompletableFuture&amp;lt;String&amp;gt;();&lt;br /&gt;          future.complete(&quot;Hi.  This a response to the greeting: &quot;+greetingMessage);&lt;br /&gt;          return future;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;Then when a Hello service consumer (on same or other process) discovers, imports and then remote service is injected by DS:&lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(immediate=true)&lt;br /&gt;public class HelloConsumer {&lt;br /&gt;&lt;br /&gt;    @Reference&lt;br /&gt;    private Hello helloService;&lt;br /&gt;&lt;br /&gt;    @Activate&lt;br /&gt;    void activate() throws Exception {&lt;br /&gt;        // Call helloService.hello remote service without blocking&lt;br /&gt;        helloService.hello(&quot;hi there&quot;).whenComplete((result,exception) -&amp;gt; {&lt;br /&gt;            if (exception != null)&lt;br /&gt;                exception.printStackTrace(exception);&lt;br /&gt;            else&lt;br /&gt;                System.out.println(&quot;hello service responds: &quot; + result);&lt;br /&gt;        });&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;The injected &lt;b&gt;helloService &lt;/b&gt;instance (a distribution-provider-constructed proxy) will automatically implement the asynchronous remote call.¬† ¬†Since the proxy is constructed by the distribution provider, there is no need for the consumer to implement anything other than calling the 'hello' method and handling the response via the Java8-provided &lt;b&gt;whenComplete&lt;/b&gt; method.¬† ¬†Java8's &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/CompletionStage.html&quot;&gt;CompletionStage&lt;/a&gt;, &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html&quot;&gt;Future&lt;/a&gt;, and OSGi's Promise are also supported return types.¬† (Only the return type is used to identify asynchronous remote methods, any method name can be used).¬† For example: the following signature is also supported as an async remote service: &lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;public interface Hello {&lt;br /&gt;    org.osgi.util.promise.Promise&amp;lt;String&amp;gt; hello(String greetingMessage);&lt;br /&gt;}&lt;/pre&gt;&lt;br /&gt;Further, OSGi R7 Remote Services supports a timeout property: &lt;br /&gt;&lt;pre class=&quot;brush:java&quot;&gt;@Component(property = { &quot;service.exported.interfaces=*&quot;, &quot;service.intents=osgi.async&quot;, &quot;osgi.basic.timeout=20000&quot; })&lt;br /&gt;public class HelloImpl implements Hello {&lt;br /&gt;    public CompletableFuture&amp;lt;String&amp;gt; hello(String greetingMessage) {&lt;br /&gt;          CompletableFuture&amp;lt;String&amp;gt; future = new CompletableFuture&amp;lt;String&amp;gt;();&lt;br /&gt;          future.complete(&quot;Hi.  This a response to the greeting: &quot;+greetingMessage);&lt;br /&gt;          return future;&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;With &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Communication_Framework_Project#OSGi_Remote_Services&quot;&gt;ECF's RSA implementation&lt;/a&gt; and &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt;, this timeout will be honored by the underlying distribution system.  That is, if the remote implementation does not return within 20000ms, then the returned CompletableFuture will complete with a TimeoutException. &lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://osgi.org/specification/osgi.cmpn/7.0.0/service.remoteservices.html#d0e1407&quot;&gt;Async Remote Services&lt;/a&gt; make it very easy for service developers to define, implement, and consume loosely-coupled and dynamic asynchronous remote services.¬† ¬†It also makes asynchronous remote service contracts transport independent, allowing the swapping of &lt;a href=&quot;https://wiki.eclipse.org/Distribution_Providers&quot;&gt;distribution providers&lt;/a&gt; or creating/using custom providers without changes to the service contract.&lt;br /&gt;&lt;br /&gt;For the documented example code, see &lt;a href=&quot;https://github.com/ECF/AsyncRemoteServiceExamples&quot;&gt;here&lt;/a&gt;</description>
	<pubDate>Tue, 12 Jun 2018 17:29:24 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.5.2</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-2</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-5-2</link>
	<description>&lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.2, a bug fix release of Vert.x 3.5.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.5.1, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.5.2 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.2-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.2-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding !&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Cedric Brun: Siemens partnering with Obeo on Model Based Systems Engineering solution - a major recognition for OSS Modeling Techs</title>
	<guid isPermaLink="false">http://cedric.brun.io/eclipse/siemens-obeo-partnership</guid>
	<link>http://cedric.brun.io/eclipse/siemens-obeo-partnership/</link>
	<description>&lt;p&gt;You might have already heard the news, earlier this week during &lt;a href=&quot;http://siemensplmconnectionamericas.org/&quot;&gt;Siemens PLM Connection Americas 2018&lt;/a&gt;, Joe Bohman announced that Siemens PLM was partnering with Obeo.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;http://cedric.brun.io/images/blog/plmconnection.png&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/plmconnection-mini.png&quot; /&gt;&lt;/a&gt;    
    
&lt;/figure&gt;

&lt;p&gt;Here is the &lt;a href=&quot;https://www.plm.automation.siemens.com/en/about_us/newsroom/press/press_release.cfm?Component=261192&amp;amp;ComponentTemplate=822&quot;&gt;complete press release&lt;/a&gt; for more detail but in short: we are working with Siemens with either standard modeling languages, Capella, SysML or tools to support custom process methodologies in order to contribute to the true integration of MBSE - Model Based System Engineering, within the entire product lifecycle.&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://www.plm.automation.siemens.com/en/about_us/newsroom/press/press_release.cfm?Component=261192&amp;amp;ComponentTemplate=822&quot;&gt;&lt;img src=&quot;http://cedric.brun.io/images/blog/siemenspr.png&quot; /&gt;&lt;/a&gt;    
    
&lt;/figure&gt;

&lt;p&gt;This is significant in several ways.&lt;/p&gt;

&lt;p&gt;First it‚Äôs another strong data point demonstrating that MBSE is a key enabler in a strategy aiming at enabling multi-domain engineering.&lt;/p&gt;

&lt;p&gt;Second, it‚Äôs a public endorsement from one of the top high-tech multinational company that the OpenSource technologies built through the Eclipse Foundation and the Polarsys Working Group, in this case Acceleo, Sirius and Capella are innovation enablers. Our contribution is fundamental to those and as such this clearly strengthen these projects but also our vision and strategy!&lt;/p&gt;

&lt;p&gt;Even more importantly adopters of those technologies will benefit from new integration points and means to leverage their models during the entire product lifecycle, and that‚Äôs what modeling is all about: using the model, iterating over it, refining it; as a living artifact, one that is shared and not as something gathering dust in a corner.&lt;/p&gt;

&lt;p&gt;These are pretty exciting prospects ahead, no doubt this will be a central subject during &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;EclipseCon France&lt;/a&gt; next week. Note that we‚Äôll hold a &lt;a href=&quot;https://www.eclipsecon.org/france2018/schedule_item/capella-workshop&quot;&gt;Capella workshop&lt;/a&gt; during the Unconference and that it‚Äôs still time to &lt;a href=&quot;https://www.eclipsecon.org/france2018/registration&quot;&gt;register&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;See you next week!&lt;/p&gt;

&lt;figure&gt;
    &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;&lt;img src=&quot;https://www.eclipsecon.org/france2018/sites/all/themes/solstice/_themes/solstice_eclipsecon_france2018/logo.png&quot; /&gt;&lt;/a&gt;    
    
&lt;/figure&gt;


    &lt;p&gt;&lt;a href=&quot;http://cedric.brun.io/eclipse/siemens-obeo-partnership/&quot;&gt;Siemens partnering with Obeo on Model Based Systems Engineering solution - a major recognition for OSS Modeling Techs&lt;/a&gt; was originally published by C√©dric Brun at &lt;a href=&quot;http://cedric.brun.io&quot;&gt;CEO @ Obeo&lt;/a&gt; on June 08, 2018.&lt;/p&gt;</description>
	<pubDate>Fri, 08 Jun 2018 00:00:00 +0000</pubDate>
	<author>cedric.brun@obeo.fr (C√©dric Brun)</author>
</item>
<item>
	<title>Jeremie Bresson: Edit an OpenAPI specification in Eclipse IDE</title>
	<guid isPermaLink="true">http://jmini.github.io/blog/2018/2018-06-08_edit-openapi-files-in-eclipse.html</guid>
	<link>http://jmini.github.io/blog/2018/2018-06-08_edit-openapi-files-in-eclipse.html</link>
	<description>&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;I am working a lot on the &lt;a href=&quot;https://github.com/OpenAPITools/openapi-generator&quot;&gt;OpenAPI Generator&lt;/a&gt; project these days. This means that I need to edit OpenAPI Specification files a lot. A specification file is a &lt;code&gt;*.yaml&lt;/code&gt; file that describes a REST API.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;In Eclipse IDE I have installed the &lt;a href=&quot;https://github.com/RepreZen/KaiZen-OpenApi-Editor&quot;&gt;KaiZen OpenAPI Editor&lt;/a&gt; plugin. This is an Xtext editor that provides everything that you need to be efficient with your OpenAPI specification: outline, code completion, jumps for references, renaming support‚Ä¶‚Äã&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;imageblock&quot;&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;img alt=&quot;KaiZen OpenAPI Editor for Eclipse IDE&quot; src=&quot;http://jmini.github.io/blog/2018/2018-06-08_kaizen-openapi-editor.png&quot; /&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;It can be installed from the &lt;a href=&quot;https://marketplace.eclipse.org/content/kaizen-openapi-editor&quot;&gt;Eclipse Marketplace&lt;/a&gt;.&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;If you use the Eclipse Installer (also called Oomph), you can add this xml snippet to your &lt;code&gt;installation.setup&lt;/code&gt; file:&lt;/p&gt; 
&lt;/div&gt; 
&lt;div class=&quot;listingblock&quot;&gt; 
 &lt;div class=&quot;title&quot;&gt;
  Listing 1. Oomph snippet to install the KaiZen OpenAPI Editor
 &lt;/div&gt; 
 &lt;div class=&quot;content&quot;&gt; 
  &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
&amp;lt;setup.p2:P2Task
    xmi:version=&quot;2.0&quot;
    xmlns:xmi=&quot;http://www.omg.org/XMI&quot;
    xmlns:setup.p2=&quot;http://www.eclipse.org/oomph/setup/p2/1.0&quot;&amp;gt;
  &amp;lt;requirement
      name=&quot;com.reprezen.swagedit.feature.feature.group&quot;/&amp;gt;
  &amp;lt;repository
      url=&quot;http://products.reprezen.com/swagedit/latest/&quot;/&amp;gt;
&amp;lt;/setup.p2:P2Task&amp;gt;&lt;/code&gt;&lt;/pre&gt; 
 &lt;/div&gt; 
&lt;/div&gt; 
&lt;div class=&quot;paragraph&quot;&gt; 
 &lt;p&gt;It is free and open-source (EPL). Enjoy.&lt;/p&gt; 
&lt;/div&gt;</description>
	<pubDate>Thu, 07 Jun 2018 22:00:00 +0000</pubDate>
</item>
<item>
	<title>typefox.io: Visualizing npm Package Dependencies with Sprotty</title>
	<guid isPermaLink="false">http://typefox.io/?p=14872</guid>
	<link>http://typefox.io/visualizing-npm-package-dependencies-with-sprotty</link>
	<description>&lt;div class=&quot;fusion-fullwidth fullwidth-box nonhundred-percent-fullwidth non-hundred-percent-height-scrolling&quot; style=&quot;background-color: rgba(255,255,255,0); background-position: center center; padding-top: 0px; padding-right: 0px; padding-bottom: 0px; padding-left: 0px;&quot;&gt;&lt;div class=&quot;fusion-builder-row fusion-row &quot;&gt;&lt;div class=&quot;fusion-layout-column fusion_builder_column fusion_builder_column_1_1  fusion-one-full fusion-column-first fusion-column-last 1_1&quot; style=&quot;margin-top: 0px; margin-bottom: 0px;&quot;&gt;
					&lt;div class=&quot;fusion-column-wrapper&quot;&gt;
						&lt;div class=&quot;fusion-text&quot;&gt;&lt;p&gt;&lt;a href=&quot;http://typefox.io/sprotty-a-web-based-diagramming-framework&quot;&gt;Sprotty&lt;/a&gt; is an open-source diagramming framework that is based on web technologies. I‚Äôm excited to announce that it will &lt;a href=&quot;https://projects.eclipse.org/proposals/sprotty&quot;&gt;soon be moved to the Eclipse Foundation&lt;/a&gt;. This step will enable existing visualizations built on the Eclipse Platform to be migrated to cloud IDEs such as &lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-theia&quot;&gt;Eclipse Theia&lt;/a&gt;. But Sprotty is not limited to IDE integrations; it can be embedded in any web page simply by consuming its &lt;a href=&quot;https://www.npmjs.com/package/sprotty&quot;&gt;npm package&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post I present an application that I implemented with Sprotty: visualizing the dependencies of &lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm packages&lt;/a&gt; as a graph. Of course there are already several solutions for this, but I was not satisfied with their graph layout quality and their filtering capabilities. These are areas where Sprotty can excel.&lt;/p&gt;
&lt;h3&gt;Standalone Web Page&lt;/h3&gt;
&lt;p&gt;The application is available at &lt;a href=&quot;http://npm-dependencies.com/&quot;&gt;npm-dependencies.com&lt;/a&gt;. Its source code is &lt;a href=&quot;https://github.com/TypeFox/npm-dependency-graph&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-08.15.59.png&quot;&gt;&lt;img alt=&quot;Dependency graph of the sprotty package&quot; class=&quot;aligncenter wp-image-14873&quot; height=&quot;243&quot; src=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-08.15.59-300x146.png&quot; width=&quot;500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The web page offers a search box for npm packages, with package name proposals provided through search requests to the &lt;a href=&quot;https://docs.npmjs.com/misc/registry&quot;&gt;npm registry&lt;/a&gt;. After selecting a package, its metadata is resolved through that same registry and the direct dependencies are shown in the diagram. Further dependencies are loaded by clicking on one of the yet unresolved packages (shown in light blue).&lt;/p&gt;
&lt;p&gt;If you want to see the whole dependency graph at once, click the ‚ÄúResolve All‚Äù button. For projects with many transitive dependencies, this can take quite some time because the application needs to load the metadata of every package in the dependency graph from the npm registry. The resulting graph can be intimidatingly large, as seen below for &lt;a href=&quot;https://www.npmjs.com/package/lerna&quot;&gt;lerna&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2018/06/lerna-dependencies-m-2.png&quot;&gt;&lt;img alt=&quot;The full dependency graph of lerna&quot; class=&quot;aligncenter wp-image-14882&quot; height=&quot;464&quot; src=&quot;http://typefox.io/wp-content/uploads/2018/06/lerna-dependencies-m-2-1024x951.png&quot; width=&quot;499&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is where filtering becomes indispensable. Let‚Äôs say we‚Äôre only interested in the package &lt;code&gt;meow&lt;/code&gt; and how &lt;code&gt;lerna&lt;/code&gt; depends from it. Enter &lt;code&gt;meow&lt;/code&gt; in the filter box and you‚Äôll see this result:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-08.50.47.png&quot;&gt;&lt;img alt=&quot;Dependency paths from lerna to meow&quot; class=&quot;aligncenter wp-image-14876&quot; height=&quot;410&quot; src=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-08.50.47-1024x600.png&quot; width=&quot;700&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The filtered graph shows the packages that contain the filter string plus all packages that have these as direct or indirect dependencies. Thus we obtain a compact visualization of all dependency paths from &lt;code&gt;lerna&lt;/code&gt; to &lt;code&gt;meow&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hint:&lt;/em&gt; If the filter text starts with a space, only packages that have the following text as prefix are selected. If it ends with a space, packages must have the text as suffix. Thus, if the text starts &lt;em&gt;and&lt;/em&gt; ends with a space, only exact matches are accepted.&lt;/p&gt;
&lt;h3&gt;How It Works&lt;/h3&gt;
&lt;p&gt;The basic configuration of the diagram is quite simple and follows the concepts described in the &lt;a href=&quot;https://github.com/theia-ide/sprotty/wiki&quot;&gt;documentation of Sprotty&lt;/a&gt;. Some additional code is necessary to &lt;a href=&quot;https://github.com/TypeFox/npm-dependency-graph/blob/master/depgraph-navigator/src/browser/graph/npm-dependencies.ts&quot;&gt;resolve package metadata from the npm registry&lt;/a&gt; and to &lt;a href=&quot;https://github.com/TypeFox/npm-dependency-graph/blob/master/depgraph-navigator/src/browser/graph/graph-filter.ts&quot;&gt;analyze the graph to apply the selected filter&lt;/a&gt;. A &lt;a href=&quot;https://github.com/TypeFox/npm-dependency-graph/blob/master/depgraph-navigator/src/browser/graph/model-source.ts&quot;&gt;subclass of LocalModelSource&lt;/a&gt; serves as the main API to interact with the graph.&lt;/p&gt;
&lt;p&gt;Automatic layout is provided by &lt;a href=&quot;https://www.npmjs.com/package/elkjs&quot;&gt;elkjs&lt;/a&gt;, a JavaScript version of the &lt;a href=&quot;https://www.eclipse.org/elk/&quot;&gt;Eclipse Layout Kernel&lt;/a&gt;. Here it is configured such that dependency edges point upwards using the &lt;a href=&quot;https://www.eclipse.org/elk/reference/algorithms/org-eclipse-elk-layered.html&quot;&gt;Layered algorithm&lt;/a&gt;. It tries to minimize the number of crossings, though only through a heuristic because that goal &lt;a href=&quot;https://epubs.siam.org/doi/abs/10.1137/0604033&quot;&gt;cannot be satisfied efficiently&lt;/a&gt; (it‚Äôs an &lt;em&gt;NP-hard&lt;/em&gt; problem).&lt;/p&gt;
&lt;h3&gt;Integration in Theia&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.npmjs.com/package/depgraph-navigator&quot;&gt;depgraph-navigator&lt;/a&gt; package can be used in a standalone scenario as described above, but it also works as an extension for the &lt;a href=&quot;https://www.theia-ide.org&quot;&gt;Theia IDE&lt;/a&gt;. Once installed in the Theia frontend, you can use this extension by right-clicking the &lt;code&gt;package.json&lt;/code&gt; file of an npm package you are working on and selecting &lt;em&gt;Open With ‚Üí Dependency Graph&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-09.01.13.png&quot;&gt;&lt;img alt=&quot;The dependency graph view embedded in Theia&quot; class=&quot;aligncenter wp-image-14877&quot; height=&quot;447&quot; src=&quot;http://typefox.io/wp-content/uploads/2018/06/Screen-Shot-2018-06-07-at-09.01.13-1024x572.png&quot; width=&quot;801&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have already installed the dependencies of your project via &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;yarn&lt;/code&gt;, all package metadata are available locally, so they are read from the file system instead of querying the npm registry. The registry is used only as a fallback in case a package is not installed in the local project. This means that resolving further packages is much faster compared to the standalone web page. You can get a full graph view of all dependencies by typing &lt;em&gt;ctrl + shift + A&lt;/em&gt; (&lt;em&gt;cmd + shift + A&lt;/em&gt; on Mac). Again, if the number of dependencies is too large, you probably want to filter the graph; simply start typing a package name to set up the same kind of filter described above for the standalone application (press &lt;em&gt;esc&lt;/em&gt; to remove the filter).&lt;/p&gt;
&lt;h3&gt;Try It!&lt;/h3&gt;
&lt;p&gt;If you haven‚Äôt already done it while reading, &lt;a href=&quot;http://npm-dependencies.com/&quot;&gt;try the dependency graph application&lt;/a&gt;. You are welcome to &lt;a href=&quot;http://typefox.io/author/mirospoenemann&quot;&gt;get in touch with me&lt;/a&gt; if you have any questions about Sprotty and how it can help you to build web-based diagrams and visualizations.&lt;/p&gt;
&lt;p&gt;By the way, don‚Äôt miss the &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/sprotty-graphical-views-web-applications&quot;&gt;talk on Sprotty at EclipseCon France&lt;/a&gt; that I will do together with Jan next week!&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;fusion-clearfix&quot;&gt;&lt;/div&gt;

					&lt;/div&gt;
				&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 07 Jun 2018 07:24:03 +0000</pubDate>
</item>
<item>
	<title>EclipseCon France 2018: Download the conference app</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3918 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/download-conference-app</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Explore the program by speaker, tracks (categories) or days. Read the session descriptions and speaker bios and choose your favourites. Download the &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.eclipsesource.eclipseconfrance&quot; target=&quot;_blank&quot;&gt;Android&lt;/a&gt; or &lt;a href=&quot;https://itunes.apple.com/us/app/eclipsecon-france-2018/id1388897328?l=de&amp;amp;ls=1&amp;amp;mt=8&quot; target=&quot;_blank&quot;&gt;iOS&lt;/a&gt; versions. Thank you &lt;a href=&quot;https://twitter.com/eclipsesource&quot;&gt;@EclipseSource&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/download-conference-app&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/App.png?itok=bfOUL_RM&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 05 Jun 2018 11:56:53 +0000</pubDate>
</item>
<item>
	<title>EclipseCon France 2018: Meet the research community</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/france2018/news/3917 at https://www.eclipsecon.org/france2018</guid>
	<link>https://www.eclipsecon.org/france2018/news/meet-research-community</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Tap into the research community at EclipseCon France!&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Visit the Open Research labs exhibit and meet the researchers working in projects ranging from Automotive and IoT to data mining and GDPR compliance (see the whole list below)&lt;/li&gt;
	&lt;li&gt;Get a quick introduction to the projects at the l&lt;a href=&quot;https://www.eclipsecon.org/france2017/session/meet-greet-eclipse-research-project-community&quot;&gt;ightening talks session on Wednesday June 13th&lt;/a&gt;.¬†&lt;/li&gt;
	&lt;li&gt;Visit workshops on GDPR for Engineers and on the AGAIL IoT platform. Test drive Gemoc at the Hackathon. All at the &lt;a href=&quot;https://www.eclipsecon.org/france2018/unconference&quot;&gt;Unconference on June 12&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;Learn more about Eclipse Kuksa at the talk, &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/eclipse-kuksa-developing-open-source-connected-vehicle-ecosystem&quot;&gt;Eclipse Kuksa: Developing an open source connected vehicle ecosystem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-news-image field-type-image field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://www.eclipsecon.org/france2018/news/meet-research-community&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;img-responsive block-center&quot; height=&quot;250&quot; src=&quot;https://www.eclipsecon.org/france2018/sites/default/files/styles/solstice_news_-_default_-_thumbnail/public/news/Research.png?itok=CLmxWFGw&quot; width=&quot;250&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 05 Jun 2018 10:39:26 +0000</pubDate>
</item>
<item>
	<title>Niko Stotz: Eclipse DemoCamp Photon in Eindhoven on July 4: Platform, Sirius, Xtext, and more!</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=365</guid>
	<link>https://www.nikostotz.de/blog/eclipse-democamp-photon-in-eindhoven-on-july-4-platform-sirius-xtext-and-more/</link>
	<description>&lt;p&gt;
&lt;strong&gt;tl;dr:&lt;/strong&gt; Altran organizes the first Eclipse DemoCamp in Eindhoven to celebrate the Photon Release Train on July 4, 17:00 hrs. &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;Register today!&lt;/a&gt; We have M√©lanie Bats of Obeo talking about Sirus 6, our own Marc Hamilton summarizing lessons learned from 10 years worth of MDE projects, and itemis‚Äô Karsten Thoms and Holger Schill reporting about the latest features of Eclipse Platform 4.8 and Xtext 2.14, respectively.
&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-full wp-image-368&quot; height=&quot;301&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/06/EclipseDemoCampPhoton.png&quot; style=&quot;border: none;&quot; width=&quot;707&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
After hosting the Sirius Day in April, we‚Äôre already looking at the next Eclipse event at &lt;a href=&quot;https://www.altran.com/nl/en/&quot;&gt;Altran Netherlands&lt;/a&gt;: We‚Äôll host the first &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;Eclipse DemoCamp in Eindhoven&lt;/a&gt; to &lt;a href=&quot;https://wiki.eclipse.org/Category:Photon&quot;&gt;celebrate the Photon Release Train&lt;/a&gt; on July 4, 17:00 hrs.
&lt;/p&gt;
&lt;p&gt;
We‚Äôll start off at 17:00 hrs with a small dinner, so we all can enjoy the talks without starving. Afterwards, we have a very exiting list of speakers:
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;
&lt;a href=&quot;https://twitter.com/melaniebats&quot;&gt;M√©lanie Bats&lt;/a&gt;, CTO of &lt;a href=&quot;https://www.obeo.fr/en/&quot;&gt;Obeo&lt;/a&gt;, will tell us about &lt;b&gt;What‚Äôs new in Sirius 6&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;Major Changes in Sirius 6:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sirius now supports an optional integration with &lt;a href=&quot;http://www.eclipse.org/elk&quot;&gt;ELK&lt;/a&gt; for improved diagram layouts: specifiers can configure which ELK algorithm and parameters should be used for each of their diagrams, directly inside the VSM (ticket &lt;a href=&quot;http://eclip.se/509070&quot;&gt;#509070&lt;/a&gt;). This is still considered experimental in 6.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new generic edge creation tool is now available on all Sirius diagrams. With it, end users no longer have to select a specific edge creation tool in the palette, but only to choose the source and target elements (ticket &lt;a href=&quot;http://eclip.se/528002&quot;&gt;#528002&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved compatibility with Xtext with an important bug fix (ticket &lt;a href=&quot;http://eclip.se/513407&quot;&gt;#513407&lt;/a&gt;). This is a first step towards a better integration with Xtext, more fixes and improvements will come during the year.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is now possible for specifiers to configure the background color of each diagram. Like everything else in Sirius, the color can be dynamic and reflect the current state of the model. (ticket &lt;a href=&quot;http://eclip.se/525533&quot;&gt;#525533&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When developing a new modeler, it is now possible to reload the modeler‚Äôs definition (.odesign) from an Eclipse runtime if the definition has changed in the host that launched the runtime. This is similar to ‚Äúhot code replace‚Äù in Java, but for VSMs, and avoids stopping/restarting a new runtime on each VSM change (ticket &lt;a href=&quot;http://eclip.se/522407&quot;&gt;#522407&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the VSM editor, when editing an interpreted expression which uses custom Java services, it is now possible to navigate directly to a service‚Äôs source code using F3 (ticket &lt;a href=&quot;http://eclip.se/471900&quot;&gt;#471900&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A more &lt;a href=&quot;https://blog.obeo.fr/what-is-coming-in-sirius-6-0&quot;&gt;visual overview&lt;/a&gt; can be found in the Obeo blog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;
Altran‚Äôs own Marc Hamilton shares &lt;b&gt;Altran‚Äôs experience developing MDE applications with Eclipse technology&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
    Altran Netherlands develops Eclipse-based model-driven applications for its customers for several years.&lt;br /&gt;
    In this talk, we share our experience with different modeling technologies like &lt;a href=&quot;https://www.eclipse.org/acceleo/&quot;&gt;Acceleo&lt;/a&gt;, &lt;a href=&quot;https://wiki.eclipse.org/OCL&quot;&gt;OCL&lt;/a&gt;, &lt;a href=&quot;https://wiki.eclipse.org/QVTo&quot;&gt;QVTo&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/egf/&quot;&gt;EGF&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Sirius&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/Xtext/&quot;&gt;Xtext&lt;/a&gt;, and others.
    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;b&gt;What‚Äôs new in Xtext 2.14&lt;/b&gt; will be presented by Xtext committer of &lt;a href=&quot;https://www.itemis.com/en/&quot;&gt;itemis&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/holgerschill&quot;&gt;Holger Schill&lt;/a&gt;.&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Major Changes in Xtext 2.14:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 9 and 10 Support&lt;/li&gt;
&lt;li&gt;JUnit 5 Support&lt;/li&gt;
&lt;li&gt;New Grammar Annotations&lt;/li&gt;
&lt;li&gt;Create Action Quickfix&lt;/li&gt;
&lt;li&gt;Code Mining Support&lt;/li&gt;
&lt;li&gt;New Project and File Wizard&lt;/li&gt;
&lt;li&gt;Improved Language Server Support&lt;/li&gt;
&lt;li&gt;Performance Improvements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please check the &lt;a class=&quot;external text&quot; href=&quot;https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2018/05/23/version-2-14-0&quot; rel=&quot;nofollow&quot;&gt;Release Notes&lt;/a&gt; for details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Yet another overview by &lt;a href=&quot;https://twitter.com/kthoms&quot;&gt;Karsten Thoms&lt;/a&gt;, of itemis with his talk &lt;b&gt;Approaching Light Speed ‚Äì News from the Eclipse Photon Platform&lt;/b&gt;.     &lt;/p&gt;
&lt;p&gt;
The Eclipse Photon simultaneous release comes this year with a plethora of new features and improvements that will continue the Eclipse IDE keeping the #1 flexible, scalable and most performing IDE!
&lt;/p&gt;
&lt;p&gt;
This session will give a guided tour through the new features and changes in Eclipse Photon. Due to the vast amount of noteworthy stuff the focus of this talk is on the Eclipse Platform Project, covering JDT only roughly. You will see usability improvements, useful new API for platform developers and neat features for users. Besides visible changes, the platform project team has paid special attention on stability, performance and resource consumption tuning. In this talk, I will give some insights how the team has worked on that.
&lt;/p&gt;
&lt;p&gt;
       Come and see the incredible achievements the platform team and its growing number of contributors made to bring you the best Eclipse IDE ever!
     &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
More talks are in discussion. Please &lt;a href=&quot;mailto:niko.stotz@altran.com&quot;&gt;propose your talk&lt;/a&gt; to us; we‚Äôd be especially &lt;b&gt;happy to include more local speakers&lt;/b&gt; in the lineup.
&lt;/p&gt;
&lt;p&gt;
We‚Äôll have a break and some get-together afterwards, so there is plenty of opportunity to get in touch with the speakers and your fellow Eclipse enthusiasts in the region.
&lt;/p&gt;
&lt;p&gt;
The DemoCamp will take place at the Altran office in Eindhoven. Please refer to the Eclipse wiki for &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;all details&lt;/a&gt; and &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;register now&lt;/a&gt; to secure your spot at the first Eclipse DemoCamp in Eindhoven!&lt;/p&gt;</description>
	<pubDate>Mon, 04 Jun 2018 13:52:15 +0000</pubDate>
        <enclosure url="https://www.nikostotz.de/blog/wp-content/uploads/2018/06/EclipseDemoCampPhoton.png" length="2854" type="image/png"/>
</item>
<item>
	<title>Nikhil Nanivadekar: Bag ‚Äî The Counter</title>
	<guid isPermaLink="false">https://medium.com/p/2689e901aadb</guid>
	<link>https://medium.com/oracledevs/bag-the-counter-2689e901aadb?source=rss-4285d8a2ca86------2</link>
	<description>&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/proxy/1*d1FllHC2H0SXv7CK-aV_iQ.png&quot; /&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;https://www.eclipse.org/collections/&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;I have often times encountered the necessity to count the number of objects. I have experienced the necessity to count in two flavors, first is to count the number of objects which satisfy a certain criteria and second is to find the number of times a particular object is encountered. In this blog we are going to see how to solve the second problem: Find the number of times a particular object is encountered.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bag (or Multiset):&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Bag is a data structure which you use when you are counting objects by putting in a Map&amp;lt;K, Integer&amp;gt;¬†. A Bag is similar to your shopping bag or grocery bag, wherein you can have one or more occurrences or a particular item in no particular order. So, a Bag is an order independent data structure like a Set, however it allows duplicates.&lt;/p&gt;&lt;p&gt;Let us consider a list of items and you want to count the number of each fruit you have in your list. You can simply group the items and count, JDK has Collectors which do that for you. The code looks like¬†this:&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*JFcsY5vECKHJzzxUS3heXA.png&quot; /&gt;Using a Map to¬†count&lt;/figure&gt;&lt;p&gt;‚ÄúApple‚Äù, ‚ÄúBanana‚Äù and ‚ÄúOrange‚Äù have a valid count, however, ‚ÄúGrapes‚Äù which are not a part of the items the assertion has to be for a null. There by making this implementation not null¬†safe.&lt;/p&gt;&lt;p&gt;Now let us solve the same problem by using an Eclipse Collections Bag in this case. Eclipse Collections has the toBag() API available which returns a¬†Bag.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*CqP7n7MbLSjRQRkS4gjwQw.png&quot; /&gt;Using a Bag to¬†count&lt;/figure&gt;&lt;p&gt;Bag has occurrencesOf() API on it which returns the count. The occurrencesOf() API is null safe as can be seen by the assertion for ‚ÄúGrapes‚Äù.&lt;/p&gt;&lt;p&gt;In addition to the rich API available on &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/RichIterable.html&quot;&gt;RichIterable&lt;/a&gt;¬†, the Eclipse Collections &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; also has more specific and intuitive API like occurrencesOf(), addOccurrences(), topOccurrences(), bottomOccurrences() to name a¬†few.&lt;/p&gt;&lt;p&gt;The Eclipse Collections Bag implementation is called HashBag. A HashBag is backed by an ObjectIntMap&amp;lt;K&amp;gt; from Eclipse Collections itself. The ObjectIntMap is an open address map which has Objects as a Key but the values are primitive ints. This implementation makes the Bag¬†leaner.&lt;/p&gt;&lt;p&gt;Below are a few memory and performance comparisons between JDK 1.8 HashMap and Eclipse Collections 9.2.0¬†Bag&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Memory Footprint (lower number the¬†better)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;This shows the total memory footprint including the constituents of the data structures.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*SuPY8rcEPI7xfahQ4phQMA.png&quot; /&gt;Memory Comparison HashMap&amp;lt;Integer, Integer&amp;gt; vs Eclipse Collections HashBag&amp;lt;Integer&amp;gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*2dN20K5t283ieOgf4ja9mw.png&quot; /&gt;Memory Comparison HashMap&amp;lt;String, Integer&amp;gt; vs Eclipse Collections HashBag&amp;lt;String&amp;gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;Performance Tests (higher number the¬†better)&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;All measurements reported in operations/s.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gjk05HQxUyx5Ft_91oCCiA.png&quot; /&gt;&lt;/figure&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/493/1*wO1-XOa3W-mmux86fFTVDQ.png&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Source code for memory tests and performance tests is available on¬†&lt;a href=&quot;https://github.com/nikhilnanivadekar/MemoryPerformanceTest&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Map&amp;lt;K, Integer&amp;gt; is considered for memory and performance tests instead of Map&amp;lt;K, Long&amp;gt; so that the comparisons are comparable since the Eclipse Collections Bag is backed by an ObjectIntMap&amp;lt;K&amp;gt;. I have verified that the memory footprint for Map&amp;lt;K, Integer&amp;gt; and Map&amp;lt;K, Long&amp;gt; for &lt;em&gt;these&lt;/em&gt; tests was¬†same.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Summary:&lt;/strong&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Eclipse Collections HashBag has ~40% smaller memory footprint compared to JDK¬†HashMap.&lt;/li&gt;&lt;li&gt;JDK HashMap performs better for than Eclipse Collections HashBag for add() and look-up operations for sizes less than 40,000 elements.&lt;/li&gt;&lt;li&gt;JDK HashMap and Eclipse Collections HashBag have comparable performance for sizes greater than 40,000 elements.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag performs better than JDK HashMap when adding the same element 10¬†times.&lt;/li&gt;&lt;li&gt;JDK HashMap performs slightly better than Eclipse Collections HashBag for look-up operations.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag has API which is helpful for Bag (count) specific operations.&lt;/li&gt;&lt;li&gt;Eclipse Collections HashBag is null safe for cases where a particular object does not exist in the¬†Bag.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;em&gt;Show your support &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/stargazers&quot;&gt;&lt;em&gt;star us on¬†GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Eclipse Collections Resources:&lt;/strong&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; comes with it‚Äôs own implementations of &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/list/mutable/FastList.html&quot;&gt;List&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/set/mutable/UnifiedSet.html&quot;&gt;Set&lt;/a&gt; and &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/impl/map/mutable/UnifiedMap.html&quot;&gt;Map&lt;/a&gt;. It also has additional data structures like &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/multimap/Multimap.html&quot;&gt;Multimap&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.0.0/org/eclipse/collections/api/bag/Bag.html&quot;&gt;Bag&lt;/a&gt; and an entire Primitive Collections hierarchy. Each of our collections have a rich API for commonly required iteration patterns.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/collections/&quot;&gt;Website&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Source code on¬†GitHub&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/docs/guide.md#eclipse-collections-reference-guide&quot;&gt;Reference Guide&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=2689e901aadb&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/bag-the-counter-2689e901aadb&quot;&gt;Bag ‚Äî The Counter&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Mon, 04 Jun 2018 13:15:03 +0000</pubDate>
</item>

</channel>
</rss>
